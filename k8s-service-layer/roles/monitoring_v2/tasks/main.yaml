---
- name: Patch kube-proxy
  include_tasks:
    file: kube_proxy_patch.yaml
  when: (k8s_monitoring_enabled | bool) and (k8s_network_plugin in ['calico'])

- name: Create namespace
  when: k8s_monitoring_enabled | bool
  community.kubernetes.k8s:
    apply: yes
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ monitoring_namespace }}"
    validate:
      fail_on_error: yes
      strict: yes

- name: Check if admin secret for Grafana already exists
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ monitoring_grafana_admin_secret_name }}"
    namespace: "{{ monitoring_namespace }}"
  register: grafana_admin

- name: Create default admin secret for Grafana
  when: not grafana_admin.resources
  k8s:
    state: present
    apply: yes
    definition: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ monitoring_grafana_admin_secret_name }}"
        namespace: "{{ monitoring_namespace }}"
      data:
        # admin:prom-operator, default credentials
        admin-user: YWRtaW4=
        admin-password: cHJvbS1vcGVyYXRvcg==
    validate:
      fail_on_error: yes
      strict: yes

# Checking the KSL monitoring chart version if its already deployed
- name: Get deployed KSL monitoring stack version
  community.kubernetes.helm_info:
    release_name: "{{ monitoring_prometheus_stack_release_name }}"
    release_namespace: "{{ monitoring_namespace }}"
  when: monitoring_install
  register: monitoring_stack_info
  ignore_errors: true

# Checking if the versions are the different and call the upgrade tasks
- name: Compare the configured and the deployed KSL monitoring version
  when: monitoring_stack_info.status is defined
  vars:
    prom_stack_depl_version: "{{ monitoring_stack_info.status.chart.split('-')[-1] }}"
    prom_stack_conf_version: "{{ monitoring_prometheus_stack_version }}"
  block:
  - name: Check if configured and deployed KSL monitoring version do equal
    debug:
      msg: |
        The configured KSL monitoring version matches the deployed one.
        Configured version: {{ prom_stack_conf_version }}
        Deployed version:   {{ prom_stack_depl_version }}
    when: prom_stack_conf_version is version(prom_stack_depl_version, operator='eq')

  - name: Trigger upgrade configured and deployed KSL monitoring version do not equal
    when: not prom_stack_conf_version is version(prom_stack_depl_version, operator='eq')
    include_tasks: upgrade_kube_prom_stack.yaml


# Install the prometheus stack
- name: "{{ monitoring_install | ternary('I', 'Uni') }}nstall KSL monitoring stack"
  community.kubernetes.helm:
    chart_ref: "{{ monitoring_prometheus_stack_chart_name }}"
    chart_repo_url: https://prometheus-community.github.io/helm-charts
    chart_version: "{{ monitoring_prometheus_stack_version }}"
    release_namespace: "{{ monitoring_namespace }}"
    release_name: "{{ monitoring_prometheus_stack_release_name }}"
    release_state: "{{ monitoring_install | ternary('present', 'absent') }}"
    values: "{{ lookup('template', 'prometheus_stack.yaml.j2') | from_yaml }}"
    wait: no
    update_repo_cache: yes

# Install prometheus-adapter, a metrics-server implementation
# It enables commands like `k top nodes`
- name: "{{ monitoring_install | ternary('I', 'Uni') }}nstall Prometheus adapter"
  community.kubernetes.helm:
    chart_ref: prometheus-adapter
    chart_repo_url: https://prometheus-community.github.io/helm-charts
    chart_version: "{{ monitoring_prometheus_adapter_version }}"
    release_namespace: "{{ monitoring_namespace }}"
    release_name: "{{ monitoring_prometheus_adapter_release_name }}"
    release_state: "{{ monitoring_install | ternary('present', 'absent') }}"
    values: "{{ lookup('template', 'prometheus_adapter.yaml.j2') | from_yaml }}"
    wait: no
    update_repo_cache: yes


- name: Install thanos
  include_role:
    name: monitoring_thanos_v1
  when: monitoring_use_thanos
