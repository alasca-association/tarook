replicas: 1
prometheus:
  url: "http://prometheus-stack-kube-prom-prometheus.{{ monitoring_namespace }}.svc"
  port: 9090
  path: ""

{% if monitoring_common_labels %}
podLabels:
{% for label_key, label_value in monitoring_common_labels.items() %}
  {{ label_key | to_json }}: {{ label_value | to_json }}
{% endfor %}
{% endif %}

# The queries below are go templates. `<< >>` is used to not interfere with prometheus' string substitution.
# The values of `GroupBy` and `LabelMatchers` are explained here [0].
# Note: We're excluding metrics without a container label (`container!=""`) because they contain the sum of all containers in a pod; otherwise we'd count them twice.
#       We're not using the summary value because someone might be interested in the values per container.
# [0]  https://github.com/kubernetes-sigs/prometheus-adapter/blob/master/docs/config.md#querying
rules:
  default: false # I couldn't understand the default rules so I disabled them
  resource:
    cpu:
      containerQuery: sum by (<<.GroupBy>>) (rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, container!=""}[3m]))
      nodeQuery: sum by (<<.GroupBy>>) (rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, container!=""}[3m]))
      resources:
        overrides:
          node:
            resource: node
          namespace:
            resource: namespace
          pod:
            resource: pod
      containerLabel: container
    memory:
      containerQuery: sum by (<<.GroupBy>>) (container_memory_working_set_bytes{<<.LabelMatchers>>, container!=""})
      nodeQuery: sum by (<<.GroupBy>>) (container_memory_working_set_bytes{<<.LabelMatchers>>, container!=""})
      resources:
        overrides:
          node:
            resource: node
          namespace:
            resource: namespace
          pod:
            resource: pod
      containerLabel: container
    window: 3m

{% if monitoring_scheduling_key %}
tolerations:
  - key: "{{ monitoring_scheduling_key }}"
    operator: Exists
    effect: NoSchedule

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: "{{ monitoring_scheduling_key }}"
              operator: Exists
{% endif %}
