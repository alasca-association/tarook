---
- name: Read S3 secrets from Vault
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  vars:
    vault_auth_mount_point: "{{ lookup('env', 'VAULT_AUTH_PATH') }}"
    vault_auth_method: "{{ lookup('env', 'VAULT_AUTH_METHOD') or (lookup('env', 'VAULT_TOKEN') | ternary('token', 'approle')) }}"
    vault_token: "{{ lookup('env', 'VAULT_TOKEN') }}"
    vault_role_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
    vault_secret_id: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
  ansible.builtin.set_fact:
    etcd_backup_s3: "{{ lookup('community.hashi_vault.vault_kv2_get', etcd_backup_vault_path, engine_mount_point=etcd_backup_vault_mount_point, mount_point=vault_auth_mount_point, auth_method=vault_auth_method, token=vault_token, role_id=vault_role_id, secret_id=vault_secret_id).data.data }}"

- name: Create a Secret to save s3 credentials
  kubernetes.core.k8s:
    state: present
    apply: true
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ etcd_backup_secret_name }}"
        namespace: "{{ etcd_backup_namespace }}"
      data:
        access: "{{ etcd_backup_config.access_key | b64encode }}"
        secret: "{{ etcd_backup_config.secret_key | b64encode }}"
    validate:
      fail_on_error: true
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: Install required packages for s3
  ansible.builtin.pip:
    name:
      - boto3
      - botocore
  register: task_result
  until: task_result is not failed
  retries: "{{ network_error_retries }}"
  delay: "{{ network_error_delay }}"

- name: Manage the backup bucket
  environment:
    EC2_ACCESS_KEY: "{{ etcd_backup_config.access_key }}"
    EC2_SECRET_KEY: "{{ etcd_backup_config.secret_key }}"
    EC2_URL: "{{ etcd_backup_config.endpoint_url }}"
  block:
    - name: Check if bucket exists
      community.aws.s3_bucket_info:
        name: "{{ etcd_backup_bucket_name }}"
      register: bucket_info

    - name: Create bucket if it does not exist
      amazon.aws.s3_bucket:
        name: "{{ etcd_backup_bucket_name }}"
        # Even if the etcd-backup role is disabled afterwards we will not delete the bucket automatically
        state: present
        # By default, we're using RGW so only use a subset of the S3 API
        ceph: true
        # Make sure that no one can read the dumps without authentication
        delete_public_access: true
        # That's the default. Added the flag to make it explicit that no S3 server-side encryption takes place
        encryption: none
        # Needed when in ceph compat mode
        s3_url: "{{ etcd_backup_config.endpoint_url }}"

    - name: "Configure a lifecycle rule on the bucket to expire (delete) items after {{ etcd_backup_days_of_retention }}"
      community.aws.s3_lifecycle:
        name: "{{ etcd_backup_bucket_name }}"
        expiration_days: "{{ etcd_backup_days_of_retention }}"
        prefix: "{{ etcd_backup_file_prefix }}"
        status: enabled
        state: present

- name: "{{ etcd_backup_enabled | ternary('Add', 'Remove') }} etcd-backup Repo"
  kubernetes.core.helm_repository:
    name: yaook.cloud
    repo_url: "{{ etcd_backup_helm_repo_url }}"
    repo_state: "{{ etcd_backup_enabled | ternary('present', 'absent') }}"
  register: task_result
  until: task_result is not failed
  retries: "{{ network_error_retries }}"
  delay: "{{ network_error_delay }}"

- name: Deploy yaook operator etcd backup chart
  kubernetes.core.helm:
    chart_ref: yaook.cloud/etcdbackup
    chart_version: "{{ etcd_backup_chart_version }}"
    release_namespace: "{{ etcd_backup_namespace }}"
    release_name: "{{ etcd_backup_name }}"
    release_state: present
    update_repo_cache: true
    values: "{{ lookup('template', 'etcd_backup.yaml.j2') | from_yaml }}"
  register: task_result
  until: task_result is not failed
  retries: "{{ network_error_retries }}"
  delay: "{{ network_error_delay }}"
...
