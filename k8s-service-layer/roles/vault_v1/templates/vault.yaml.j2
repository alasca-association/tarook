global:
  enabled: true
  tlsDisable: false
  serverTelemetry:
    prometheusOperator: false
injector:
  priorityClassName: "system-cluster-critical"
  enabled: false
server:
  # Why is vault considered "system critical?" Quoting jssfr:
  # 1. The cluster depends on an external vault, in which case it typically will not have a vault_v1 vault installed.
  # 2. The cluster provides a vault for other vaults; in that case, it does not have an external vault for itself to rely on, so it self-hosts its vault, i.e. it is in fact system-cluster-critical.
  priorityClassName: "system-cluster-critical"
  affinity: "{{ lookup('template', 'roles/common_defaults_v1/templates/affinity.json') | to_json }}"
  tolerations: "{{ lookup('template', 'roles/common_defaults_v1/templates/tolerations.json') | to_json }}"
  # We would like to use a different certificate (letsencrypt) which is valid in public in addition to the
  # one which is derived from our custom CA. vault should terminate TLS, not the ingress controller. To cope
  # with the situation we add an additional API endpoint (8250) solely for this purpose. Unfortunately we cannot
  # use the Ingress of the helm chart as its tied to the primary API endpoint (8200).
  ingress:
    enabled: false
  logLevel: trace
  authDelegator:
    enabled: false
  standalone:
    enabled: false
  shareProcessNamespace: true
  extraEnvironmentVars:
    VAULT_CAPATH: /vault/userconfig/vault-cert-internal/ca.crt
  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true
      config: |
        ui = true
        listener "tcp" {
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_cert_file = "/vault/userconfig/vault-cert-internal/tls.crt"
          tls_key_file  = "/vault/userconfig/vault-cert-internal/tls.key"
        }
{% if yaook_vault_ingress %}
        listener "tcp" {
          address = "[::]:8250"
          tls_cert_file = "/vault/userconfig/vault-cert-external/tls.crt"
          tls_key_file  = "/vault/userconfig/vault-cert-external/tls.key"
        }
{% endif %}
        storage "raft" {
          path = "/vault/data"
          retry_join {
            leader_ca_cert_file = "/vault/userconfig/vault-cert-internal/ca.crt"
            leader_api_addr = "https://vault.k8s-svc-vault.svc.cluster.local:8200"
          }
        }
        # Enables vault pods to expose their state via labels; requires HA
        service_registration "kubernetes" {}

        # Enable prometheus metrics endpoint
        # Todo: Is monitoring enabled?
        telemetry {
          prometheus_retention_time = "24h"
        }
  dataStorage:
    enabled: true
    size: "{{ yaook_vault_storage_size }}"
    storageClass: "{{ yaook_vault_storage_class }}"
  extraContainers:
{% if yaook_vault_ingress %}
  - name: service-reload-external
    image: registry.gitlab.com/yaook/images/service-reload/service-reload:devel
    volumeMounts:
    - name: userconfig-vault-cert-external
      mountPath: data
    env:
    - name: YAOOK_SERVICE_RELOAD_MODULE
      value: vault
    - name: TINI_SUBREAPER
      value: "1"
    args:
    - /data/
{% endif %}
  - name: service-reload-internal
    image: registry.gitlab.com/yaook/images/service-reload/service-reload:devel
    volumeMounts:
    - name: userconfig-vault-cert-internal
      mountPath: /data
    env:
    - name: YAOOK_SERVICE_RELOAD_MODULE
      value: vault
    - name: TINI_SUBREAPER
      value: "1"
    args:
    - /data/
  extraVolumes:
  - type: secret
    name: vault-cert-internal
{% if yaook_vault_ingress %}
  - type: secret
    name: vault-cert-external
{% endif %}
  service:
    type: {{ yaook_vault_service_type }}
    activeNodePort: {{ yaook_vault_service_active_node_port }}
serverTelemetry:
  # This service monitor comes without any means of authentication
  serviceMonitor:
    enabled: false
  prometheusRules:
    enabled: true
