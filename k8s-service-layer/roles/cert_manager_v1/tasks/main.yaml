---
- name: Create namespace
  when: k8s_cert_manager_install
  kubernetes.core.k8s:
    apply: yes
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ k8s_cert_manager_namespace }}"
    validate:
      fail_on_error: yes
      strict: yes

- name: "{{ k8s_cert_manager_install | ternary('I', 'Uni') }}nstall Cert Manager"
  vars:
    scheduling_key: "{{ k8s_cert_manager_scheduling_key }}"
  kubernetes.core.helm:
    chart_ref: cert-manager
    chart_repo_url: https://charts.jetstack.io
    release_namespace: "{{ k8s_cert_manager_namespace }}"
    release_name: cert-manager
    release_state: "{{ k8s_cert_manager_install | ternary('present', 'absent') }}"
    values:
      installCRDs: true
      global:
        priorityClassName: system-cluster-critical
      affinity: "{{ lookup('template', 'roles/common_defaults_v1/templates/affinity.json') }}"
      tolerations: "{{ lookup('template', 'roles/common_defaults_v1/templates/tolerations.json') }}"
      cainjector:
        affinity: "{{ lookup('template', 'roles/common_defaults_v1/templates/affinity.json') }}"
        tolerations: "{{ lookup('template', 'roles/common_defaults_v1/templates/tolerations.json') }}"
      webhook:
        affinity: "{{ lookup('template', 'roles/common_defaults_v1/templates/affinity.json') }}"
        tolerations: "{{ lookup('template', 'roles/common_defaults_v1/templates/tolerations.json') }}"
  register: task_result
  until: task_result.failed == false
  retries: "{{ network_error_retries }}"
  delay: "{{ network_error_delay }}"

- name: "{{ (k8s_cert_manager_install and k8s_cert_manager_letsencrypt_email) | ternary('I', 'Uni') }}nstall Let's Encrypt cluster issuer"
  kubernetes.core.k8s:
    apply: yes
    state: "{{ k8s_cert_manager_letsencrypt_email | ternary('present', 'absent') }}"
    definition:
      apiVersion: v1
      kind: ClusterIssuer
      metadata:
        name: k8s-letsencrypt
      spec:
        acme:
          email: "{{ k8s_cert_manager_letsencrypt_email }}"
          preferredChain: "{{ k8s_cert_manager_letsencrypt_preferred_chain }}"
          privateKeySecretRef:
            name: letsencrypt-default-issuer-account-key
          server: https://acme-v02.api.letsencrypt.org/directory
          solvers:
          - http01:
              ingress:
                class: "{{ k8s_cert_manager_letsencrypt_ingress }}"
