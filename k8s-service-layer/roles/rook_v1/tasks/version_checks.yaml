# Rook upgrades require additional version specific steps which need to be
# implemented. Therefore, we have to specify which rook versions are supported
# by this role and verify that the configured versions are allowed.
# (We do not care about patch version upgrades)
# In addition, we need to check if the configured ceph version is supported
# by the configured rook version so that the rook operator always feels responsible :)

- name: Fail if the configured rook version does not support the configured ceph version
  vars:
    rook_conf_major_version: "{{ rook_image_versions.operator.split('.')[0] }}"
    rook_conf_minor_version: "{{ rook_image_versions.operator.split('.')[1] }}"
    rook_conf_maj_min_version: "{{ '%s.%s' | format(rook_conf_major_version,rook_conf_minor_version) }}" # ugly
  block:
  - name: Fail if the configured rook version is not supported
    vars:
      supported_rook_releases: "{{ rook_supported_releases | map(attribute='rook_release') }}"
    fail: 
      msg: |
        The configured rook version is not supported. Please adjust your configuration.
        Configured version: {{ rook_conf_maj_min_version }}
        Supported versions: {{ supported_rook_releases }}
    when: rook_conf_maj_min_version not in supported_rook_releases

  - name: Fail if the configured ceph major version is not supported by the configured rook version
    vars:
      supported_ceph_releases: "{{ rook_supported_releases | selectattr('rook_release','equalto',rook_conf_maj_min_version) | map(attribute='supported_ceph_releases') | flatten }}"
      ceph_conf_maj_version: "{{ rook_image_versions.ceph.split('.')[0] }}"
    fail:
      msg: |
        The configured ceph version is not supported by the configured rook version.
        Please adjust your configuration and specify a correct ceph version.
        Configured version: {{ ceph_conf_maj_version }}
        Supported versions: {{ supported_ceph_releases }}
    when: ceph_conf_maj_version not in supported_ceph_releases
