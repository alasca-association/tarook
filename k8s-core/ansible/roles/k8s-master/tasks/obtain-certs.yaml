---
- name: Obtain certificates
  tags:
  - renew-pki
  # We do this step on each node, so we have to use node credentials
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  block:
  # This is based on the k8s best practices
  # https://kubernetes.io/docs/setup/best-practices/certificates/
  - name: Obtain etcd server certificate
    ansible.builtin.include_role:
      name: helpers/vault-onboarded
      tasks_from: get_cert
    vars:
      vault_role_id: "{{ vault_node_role_id }}"
      vault_secret_id: "{{ vault_node_secret_id }}"
      get_cert_title: etcd server certificate
      get_cert_destination_crt: /etc/kubernetes/pki/etcd/server.crt
      get_cert_destination_key: /etc/kubernetes/pki/etcd/server.key
      get_cert_vault_path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/etcd-pki/issuer/{{ k8s_issuer | default('default') }}/issue/server"
      get_cert_owner: root
      get_cert_vault_data:
        common_name: "{{ inventory_hostname }}"
        alt_names: "{{ inventory_hostname }}"
        ip_sans: "{{ local_ipv4_address }},127.0.0.1,::1{% if local_ipv6_address | default(False) %},{{ local_ipv6_address }}{% endif %}"
        ttl: 8784h
      get_cert_notify: Restart etcd

  - name: Obtain etcd peer certificate
    ansible.builtin.include_role:
      name: helpers/vault-onboarded
      tasks_from: get_cert
    vars:
      vault_role_id: "{{ vault_node_role_id }}"
      vault_secret_id: "{{ vault_node_secret_id }}"
      get_cert_title: etcd peer certificate
      get_cert_destination_crt: /etc/kubernetes/pki/etcd/peer.crt
      get_cert_destination_key: /etc/kubernetes/pki/etcd/peer.key
      get_cert_vault_path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/etcd-pki/issuer/{{ k8s_issuer | default('default') }}/issue/peer"
      get_cert_owner: root
      get_cert_vault_data:
        common_name: "{{ inventory_hostname }}"
        alt_names: "{{ inventory_hostname }}"
        ip_sans: "{{ local_ipv4_address }},127.0.0.1,::1{% if local_ipv6_address | default(False) %},{{ local_ipv6_address }}{% endif %}"
        ttl: 8784h
      get_cert_notify: Restart etcd

  - name: Obtain etcd healthcheck certificate
    ansible.builtin.include_role:
      name: helpers/vault-onboarded
      tasks_from: get_cert
    vars:
      vault_role_id: "{{ vault_node_role_id }}"
      vault_secret_id: "{{ vault_node_secret_id }}"
      get_cert_title: etcd healthcheck certificate
      get_cert_destination_crt: /etc/kubernetes/pki/etcd/healthcheck-client.crt
      get_cert_destination_key: /etc/kubernetes/pki/etcd/healthcheck-client.key
      get_cert_vault_path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/etcd-pki/issuer/{{ k8s_issuer | default('default') }}/issue/healthcheck"
      get_cert_owner: root
      get_cert_vault_data:
        common_name: "{{ inventory_hostname }}"
        alt_names: "{{ inventory_hostname }}"
        ttl: 8784h
      get_cert_notify: Restart etcd

  - name: Obtain apiserver etcd client certificate
    ansible.builtin.include_role:
      name: helpers/vault-onboarded
      tasks_from: get_cert
    vars:
      vault_role_id: "{{ vault_node_role_id }}"
      vault_secret_id: "{{ vault_node_secret_id }}"
      get_cert_title: apiserver etcd client certificate
      get_cert_destination_crt: /etc/kubernetes/pki/apiserver-etcd-client.crt
      get_cert_destination_key: /etc/kubernetes/pki/apiserver-etcd-client.key
      get_cert_vault_path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/etcd-pki/issuer/{{ k8s_issuer | default('default') }}/issue/kube-apiserver"
      get_cert_owner: root
      get_cert_vault_data:
        common_name: "{{ inventory_hostname }}"
        ttl: 8784h
      get_cert_notify: Restart kube-apiserver

  - name: Obtain apiserver frontend certificate
    ansible.builtin.include_role:
      name: helpers/vault-onboarded
      tasks_from: get_cert
    vars:
      vault_role_id: "{{ vault_node_role_id }}"
      vault_secret_id: "{{ vault_node_secret_id }}"
      get_cert_title: apiserver frontend certificate
      get_cert_destination_crt: /etc/kubernetes/pki/apiserver.crt
      get_cert_destination_key: /etc/kubernetes/pki/apiserver.key
      get_cert_vault_path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/k8s-pki/issuer/{{ k8s_issuer | default('default') }}/issue/apiserver"
      get_cert_owner: root
      get_cert_vault_data:
        common_name: "kube-apiserver"
        alt_names: "{{ inventory_hostname }},{{ inventory_hostname }}.node.{{ vault_cluster_name }},kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.{{ vault_cluster_name }},kubernetes.default.svc.cluster.local"
        ip_sans: "{{ networking_fixed_ip }},{{ local_ipv4_address }},127.0.0.1,::1{% if networking_fixed_ip_v6 | default(False) %},{{ networking_fixed_ip_v6 }},{{ local_ipv6_address }}{% endif %},{{ k8s_network_service_subnet | ansible.utils.nthhost(1) }}"
        ttl: 8784h
      get_cert_notify: Restart kube-apiserver

  - name: Obtain apiserver kubelet client certificate
    ansible.builtin.include_role:
      name: helpers/vault-onboarded
      tasks_from: get_cert
    vars:
      vault_role_id: "{{ vault_node_role_id }}"
      vault_secret_id: "{{ vault_node_secret_id }}"
      get_cert_title: apiserver kubelet client certificate
      get_cert_destination_crt: /etc/kubernetes/pki/apiserver-kubelet-client.crt
      get_cert_destination_key: /etc/kubernetes/pki/apiserver-kubelet-client.key
      get_cert_vault_path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/k8s-pki/issuer/{{ k8s_issuer | default('default') }}/issue/system-masters_apiserver"
      get_cert_owner: root
      get_cert_vault_data:
        common_name: "apiserver:{{ inventory_hostname }}.node.{{ vault_cluster_name }}"
        ttl: 8784h
      get_cert_notify: Restart kube-apiserver

  - name: Obtain apiserver front proxy client certificate
    ansible.builtin.include_role:
      name: helpers/vault-onboarded
      tasks_from: get_cert
    vars:
      vault_role_id: "{{ vault_node_role_id }}"
      vault_secret_id: "{{ vault_node_secret_id }}"
      get_cert_title: apiserver front proxy client certificate
      get_cert_destination_crt: /etc/kubernetes/pki/front-proxy-client.crt
      get_cert_destination_key: /etc/kubernetes/pki/front-proxy-client.key
      get_cert_vault_path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/k8s-front-proxy-pki/issuer/{{ k8s_issuer | default('default') }}/issue/apiserver"
      get_cert_owner: root
      get_cert_vault_data:
        common_name: "front-proxy-client"
        ttl: 8784h
      get_cert_notify: Restart kube-apiserver
