---
- name: Obtain CAs
  tags:
  - renew-pki
  # We do this step on each node, so we have to use node credentials
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  block:
  # This is based on the k8s best practices
  # https://kubernetes.io/docs/setup/best-practices/certificates/

  - name: Load service account key from Vault # noqa ignore-errors
    ignore_errors: true
    no_log: true  # prevent private key from being exposed
    ansible.builtin.set_fact:
      service_account_key: "{{ lookup('community.hashi_vault.vault_kv2_get', 'k8s/service-account-key', engine_mount_point=('%s/%s/kv' | format(vault_path_prefix, vault_cluster_name)), mount_point=vault_nodes_approle, auth_method='approle', role_id=vault_node_role_id, secret_id=vault_node_secret_id).data.data.private_key | b64decode }}"

  - name: Generate private key if necessary
    when: service_account_key is not defined
    delegate_to: "{{ groups['orchestrator'] | first }}"
    no_log: true  # prevent private key from being exposed
    community.crypto.openssl_privatekey:
      return_content: true
      type: "RSA"
      path: "{{ etc_dir }}/sa.key"
      mode: u=rw,go-rwx
    register: generated_service_account_key

  - name: Delete generated private key from disk
    delegate_to: "{{ groups['orchestrator'] | first }}"
    no_log: true  # prevent private key from being exposed
    ansible.builtin.file:
      state: absent
      path: "{{ etc_dir }}/sa.key"

  - name: Store generated key in vault
    when: service_account_key is not defined
    delegate_to: "{{ groups['orchestrator'] | first }}"
    no_log: true  # prevent private key from being exposed
    community.hashi_vault.vault_write:
      auth_method: approle
      mount_point: "{{ vault_nodes_approle }}"
      role_id: "{{ vault_node_role_id }}"
      secret_id: "{{ vault_node_secret_id }}"
      path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/kv/data/k8s/service-account-key"
      data:
        data:
          private_key: "{{ generated_service_account_key.privatekey | b64encode }}"

  - name: Use generated service account key
    when: service_account_key is not defined
    no_log: true  # prevent private key from being exposed
    ansible.builtin.set_fact:
      service_account_key: "{{ generated_service_account_key.privatekey }}"

  - name: Derive service account public key
    community.crypto.openssl_privatekey_info:
      content: "{{ service_account_key }}"
    register: service_account_key_info

  - name: Write service account private key
    become: true
    no_log: true  # prevent private key from being exposed
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/sa.key
      content: "{{ service_account_key }}"
      owner: root
      group: root
      mode: u=r

  - name: Write service account public key
    become: true
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/sa.pub
      content: "{{ service_account_key_info.public_key }}"
      owner: root
      group: root
      mode: ugo=r

  - name: Get certificate authority data
    include_tasks: get-certificate-authority-data.yaml

  - name: Write k8s CA file
    become: true
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/ca.crt
      owner: root
      group: root
      mode: ugo=r
      content: "{{ k8s_ca_cert if not extra_ca else ([k8s_prev_ca_cert, k8s_ca_cert] | join('')) }}"

  - name: Copy Kubernetes cluster root CA key from Vault
    when: k8s_controller_manager_enable_signing_requests
    no_log: true  # prevent private_key from being exposed
    block:
    - name: Fetch Kubernetes cluster root CA key from Vault
      delegate_to: "{{ groups['orchestrator'] | first }}"
      vars:
        vault_role_id: "{{ vault_node_role_id }}"
        vault_secret_id: "{{ vault_node_secret_id }}"
      community.hashi_vault.vault_kv2_get:
        auth_method: approle
        mount_point: "{{ vault_nodes_approle }}"
        engine_mount_point: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/kv"
        path: k8s-pki/cluster-root-ca
        role_id: "{{ vault_role_id }}"
        secret_id: "{{ vault_secret_id }}"
        token_validate: false
      register: get_ca_key
      failed_when: >
        (get_ca_key is failed)
        or ((get_ca_key.data.data.private_key | default("")) == "")

    - name: Write Kubernetes cluster root CA key
      become: true
      ansible.builtin.copy:
        dest: /etc/kubernetes/pki/ca.key
        owner: "{{ kubeconfig_owner | default('root') }}"
        group: "{{ kubeconfig_group | default(kubeconfig_owner | default('root')) }}"
        mode: u=r,go-rwx
        content: "{{ get_ca_key.data.data.private_key }}"

  - name: Write k8s front proxy CA file
    become: true
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/front-proxy-ca.crt
      owner: root
      group: root
      mode: ugo=r
      content: "{{ k8s_front_proxy_ca_cert if not extra_ca else ([k8s_prev_front_proxy_ca_cert, k8s_front_proxy_ca_cert] | join('')) }}"

  - name: Write etcd CA file
    become: true
    vars:
      ca_pki_name: etcd-pki
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/etcd/ca.crt
      owner: root
      group: root
      mode: ugo=r
      content: "{{ etcd_ca_cert if not extra_ca else ([etcd_prev_ca_cert, etcd_ca_cert] | join('')) }}"
...
