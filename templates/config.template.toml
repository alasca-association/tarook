# Variables marked with "•ᴗ•" are mandatory!
# This means you have to set them, there is no default value!
# If a variable is commented out, it is optional and the defined
# value is the default.

# NOTE:For some sections the inventory updater will apply pefixes to
# the variables before passing them over to the ansible inventories. 

# ANCHOR: terraform_config
# --- TERRAFORM ---
# ansible prefix: /
[terraform]
subnet_cidr = "172.30.154.0/24"
#masters = 3
#workers = 3
#worker_flavors = ["L", "M", "L"]
#enable_az_management = false
# Enable DualStack support
dualstack_support = false # "•ᴗ•"
# If you enabled DualStack-support you may want to adjust the IPv6 subnet
#subnet_v6_cidr = "fd00::/120"

# If true, create block volume for each instance and boot from there.
# Equivalent to `openstack server create --boot-from-volume […].
#create_root_disk_on_volume = false

# Volume type that is used if `create_root_disk_on_volume` is true.
#root_disk_volume_type = "three_times_replicated"

# ANCHOR_END: terraform_config

# ANCHOR: load-balancing_config
# --- LOAD-BALANCING ---
# ansible prefix: /
[load-balancing]
# lb_ports is a list of ports that are exposed by HAProxy on the gateway nodes and forwarded
# to NodePorts in the k8s cluster. This poor man's load-balancing / exposing of services
# has been superseded by ch-k8s-lbaas. For legacy reasons and because it's useful under
# certain circumstances it is kept inside the repository.
# The NodePorts are either literally exposed by HAProxy or can be mapped to other ports.
# The `layer` attribute can either be `tcp` (L4) or `http` (L7). For `http`, `option forwardfor`
# is added implicitly to the backend servers in the haproxy configuration.
# If `use_proxy_protocol` is set to `true`, HAProxy will use the proxy protocol to convey information
# about the connection initiator to the backend. NOTE: the backend has to accept the proxy
# protocol, otherwise your traffic will be discarded.
# Short form:
#lb_ports = [30060]
# Explicit form:
#lb_ports = [{external=80,nodeport=30080, layer=tcp, use_proxy_protocol=true}]

# A list of priorities to assign to the gateway/frontend nodes. The priorities
# will be assigned based on the sorted list of matching nodes.
#
# If more nodes exist than there are entries in this list, the rollout will
# fail.
#
# Please note the keepalived.conf manpage for choosing priority values.
#vrrp_priorities = [150, 100, 50]

# Enable/Disable OpenStack-based load-balancing.
# openstack_lbaas = false

# Port for HAProxy statistics
#haproxy_stats_port = 48981

# ANCHOR_END: load-balancing_config

# ANCHOR: ch-k8s-lbaas_config
# --- C&H KUBERNETES LBaaS ---
# ansible prefix: "ch_k8s_lbaas_"
[ch-k8s-lbaas]
# To enable our LBaaS service, un-comment the following options and fill in a
# unique, random, base64-encoded secret in place of `...`.
# To generate such a secret, you can use the following command:
# $ dd if=/dev/urandom bs=16 count=1 status=none | base64

enabled       = true    # •ᴗ•
shared_secret = "..."   # REPLACE ME
version       = "0.3.3"
agent_port    = 15203

# ANCHOR_END: ch-k8s-lbaas_config

# ANCHOR: kubernetes_basic_cluster_configuration
# --- KUBERNETES: BASIC CLUSTER CONFIGURATION ---
# ansible prefix: "k8s_"
[kubernetes]
# Kubernetes version. Currently, we support from 1.17.* to 1.21.*.
version = "1.21.4" # •ᴗ•

# Enforce the use of pod security policies inside the cluster.
# NOTE: PSPs are being deprecated by k8s and they will be removed from the LCM soon.
# They are not tested anymore and things may break.
use_podsecuritypolicies = false # •ᴗ•

# Uncomment if this cluster contains a worker with GPU access so that the driver
# and surrounding framework is deployed.
is_gpu_cluster = false # •ᴗ•

[kubernetes.apiserver]
frontend_port = 8888 # •ᴗ•

# ANCHOR_END: kubernetes_basic_cluster_configuration

# ANCHOR: storage_base_configuration
# --- KUBERNETES: STORAGE CONFIGURATION ---
# ansible prefix: "k8s_storage"
[kubernetes.storage]
# Many clusters will want to use rook, so you should enable
# or disable it here if you want. It requires extra options
# which need to be chosen with care.
rook_enabled = false # •ᴗ•

# Setting this to true will cause the storage plugins
#to run on all nodes (ignoring all taints). This is often desirable.
#nodeplugin_toleration = false # •ᴗ•

# This flag enables the topology feature gate of the cinder controller plugin.
# Its purpose is to allocate volumes from cinder which are in the same AZ as
# the worker node to which the volume should be attached.
# Important: Cinder must support AZs and the AZs must match the AZs used by nova!
#cinder_enable_topology=true

# ANCHOR_END: storage_base_configuration

# ANCHOR: storage_local_static_configuration
# --- KUBERNETES: STATIC LOCAL STORAGE CONFIGURATION ---
# ansible prefix: "k8s_local_storage"
[kubernetes.local_storage.static]
# Enable static provisioning of local storage. This provisions a single local
# storage volume per worker node.
#
# It is recommended to use the dynamic local storage instead.
enabled = false # •ᴗ•

# Name of the storage class to create.
#
# NOTE: the static and dynamic provisioner must have distinct storage class
# names if both are enabled!
#storageclass_name = "local-storage"

# Namespace to deploy the components in
#namespace = "kube-system"

# Directory where the volume will be placed on the worker node
#data_directory = "/mnt/data"

# Synchronization directory where the provisioner will pick up the volume from
#discovery_directory = "/mnt/mk8s-disks"

# Version of the provisioner to use
#version = "v2.3.4"

# Toleration for the plugin. Defaults to `kubernetes.storage.nodeplugin_toleration`
#nodeplugin_toleration = ...

# ANCHOR_END: storage_local_static_configuration

# ANCHOR: storage_local_dynamic_configuration
# --- KUBERNETES: DYNAMIC LOCAL STORAGE CONFIGURATION ---
# ansible prefix: "k8s_local_storage"
[kubernetes.local_storage.dynamic]
# Enable dynamic local storage provisioning. This provides a storage class which
# can be used with PVCs to allocate local storage on a node.
enabled = false # •ᴗ•

# Name of the storage class to create.
#
# NOTE: the static and dynamic provisioner must have distinct storage class
# names if both are enabled!
#storageclass_name = "local-storage"

# Namespace to deploy the components in
#namespace = "kube-system"

# Directory where the volumes will be placed on the worker node
#data_directory = "/mnt/dynamic-data"

# Version of the local path controller to deploy
#version = "v0.0.20"

# Toleration for the plugin. Defaults to `kubernetes.storage.nodeplugin_toleration`
#nodeplugin_toleration = ...

# ANCHOR_END: storage_local_dynamic_configuration

# ANCHOR: kubernetes_monitoring_configuration
# --- KUBERNETES: MONITORING CONFIGURATION ---
# ansible prefix: "k8s_monitoring"
[kubernetes.monitoring]
# Enable Prometheus-based monitoring.
# For prometheus-specific configurations take a look at the
# k8s-service-layer.prometheus section.
enabled = false # •ᴗ•

# ANCHOR_END: kubernetes_monitoring_configuration

# ANCHOR: kubernetes_global_monitoring_configuration
# --- KUBERNETES: GLOBAL MONITORING CONFIGURATION ---
# ansible prefix: "k8s_global_monitoring"
[kubernetes.global_monitoring]
# This section contains global monitoring related
# information which needs to be known to stage3
# and higher layers.

# Enable/Disable global monitoring
enabled       = false                      # •ᴗ•
#nodeport      = 31911
#nodeport_name = "ch-k8s-global-monitoring"

# ANCHOR_END: kubernetes_global_monitoring_configuration

# ANCHOR: kubernetes_network_configuration
# --- KUBERNETES: NETWORK CONFIGURATION ---
# ansible prefix: "k8s_network"
[kubernetes.network]
# This is the subnet used by Kubernetes for Pods. Subnets will be delegated
# automatically to each node.
pod_subnet = "10.244.0.0/16" # •ᴗ•

# This is the subnet used by Kubernetes for Services.
service_subnet = "10.96.0.0/12" # •ᴗ•

# Pick a networking plugin:
# - kube-router: High-performance, low-overhead implementation with support
#   for NetworkPolicy objects (DEPRACTED: Support will be dropped in the near future)
# - calico: High-performance, pure IP networking, policy engine. Calico provides
#   layer 3 networking capabilities and associates a virtual router with each node.
#   Allows the establishment of zone boundaries through BGP
plugin = "calico" # •ᴗ•

# Define if the IP-in-IP encapsulation of calico should be activated
# https://projectcalico.docs.tigera.io/networking/vxlan-ipip
# calico_ipipmode = "Always"

# ANCHOR_END: kubernetes_network_configuration

# ANCHOR: kubernetes_kubelet_configuration
# --- KUBERNETES: KUBELET CONFIGURATION (WORKERS) ---
# ansible prefix: "k8s_kubelet"
[kubernetes.kubelet]
# This section enables you to customize kubelet on the k8s workers (sic!)
# Changes will be rolled out only during k8s upgrades or if you explicitly
# allow disruptions.

# Maximum number of Pods per worker
# Increasing this value may also decrease performance,
# as more Pods can be packed into a single node.
#pod_limit = 110

# ANCHOR_END: kubernetes_kubelet_configuration

# ANCHOR: kubernetes_continuous_join_key_configuration
# --- KUBERNETES: CONTINUOUS JOIN KEY ---
# ansible prefix: "k8s_continuous_join_key"
[kubernetes.continuous_join_key]
# This section controls a systemd timer which periodically publishes a fresh
# Kubernetes join key into a HashiCorp Vault server. At the time of writing,
# the primary use case is integration with the scripts provided to every node
# deployed via the Yaook Metal Controller.
enabled = false # •ᴗ•

# Absolute path to an executable which prints a fresh, revokable vault token
# to stdout. This token must be privileged enough to write the given vault path
# below.
#vault_token_script =

# Path to a Vault key/value object where the join key data should be written
# to.
#vault_path =

# Path to a file which should be loaded as additional environment to the token
# renewal script.
#env_path = "/dev/null"

# ANCHOR_END: kubernetes_continuous_join_key_configuration

# --- KUBERNETES SERVICE LAYER ---
# ANCHOR: ksl_rook_configuration
# --- KUBERNETES SERVICE LAYER : ROOK (STORAGE) ---
# ansible prefix: "rook"
[k8s-service-layer.rook]
# If kubernetes.storage.rook_enabled is enabled, rook will be installed.
# In this section you can customize and configure rook.

namespace    = "rook-ceph" # •ᴗ•
cluster_name = "rook-ceph" # •ᴗ•

# Currently we support the following rook versions:
# v1.2.3, v1.3.11, v1.4.9, v1.5.12, v1.6.7
#version = "v1.2.3"

#nodeplugin_toleration = true

# Storage class name. SHOULD be compliant with one storage class you
# have configured in the kubernetes.local_storage section (or you should
# know what your are doing).
#mon_volume_storage_class = "local-storage"

# If set to true Rook won’t perform any upgrade checks on Ceph daemons
# during an upgrade. Use this at YOUR OWN RISK, only if you know what
# you’re doing.
# https://rook.github.io/docs/rook/v1.3/ceph-cluster-crd.html#cluster-settings
#skip_upgrade_checks = false

# Scheduling keys control where services may run. A scheduling key corresponds
# to both a node label and to a taint. In order for a service to run on a node,
# it needs to have that label key.
# If no scheduling key is defined for a service, it will run on any untainted
# node.
#scheduling_key = "node-restriction.kubernetes.io/cah-managed-k8s-storage"
# If you're using a general scheduling key prefix,
# you can reference it here directly:
#scheduling_key = "{{ scheduling_key_prefix }}/storage"

# Number of OSDs to run. This should be equal to the number of storage meta
# workers you use.
#nosds = 3

# The size of the storage backing each OSD.
#osd_volume_size = "90Gi"

# Enable the rook toolbox, which is a pod with ceph tools installed to
# introspect the cluster state.
#toolbox = true

# Enable the CephFS shaerd filesystem.
#ceph_fs = true

# ROOK POD RESOURCE LIMITS
# The default values are the *absolute minimum* values required by rook. Going
# below these numbers will make rook refuse to even create the pods. See also:
# https://rook.io/docs/rook/v1.2/ceph-cluster-crd.html#cluster-wide-resources-configuration-settings

# Memory limit for mon Pods
#mon_memory_limit = "1Gi"
#mon_memory_request = "{{ rook_mon_memory_limit }}"
#mon_cpu_limit = "500m"
#mon_cpu_request = "100m"

# Resource limits for OSD pods
# Note that these are chosen so that the OSD pods end up in the
# Guaranteed QoS class.
#osd_memory_limit = "2Gi"
#osd_memory_request = "{{ rook_osd_memory_limit }}"
#osd_cpu_limit = "500m"
#osd_cpu_request = "{{ rook_osd_cpu_limit }}"

# Memory limit for mgr Pods
#mgr_memory_limit = "512Mi"
#mgr_memory_request = "{{ rook_mgr_memory_limit }}"
#mgr_cpu_limit = "500m"
#mgr_cpu_request = "100m"

# Memory limit for MDS / CephFS Pods
#mds_memory_limit = "4Gi"
#mds_memory_request = "{{ rook_mds_memory_limit }}"
#mds_cpu_limit = "1"
#mds_cpu_request = "{{ rook_mds_cpu_limit }}"

# Rook-ceph operator limits
#operator_cpu_limit = "500m"
#operator_cpu_request = "100m"

# ANCHOR_END: ksl_rook_configuration

# ANCHOR: ksl_prometheus_configuration
# --- KUBERNETES SERVICE LAYER : MONITORING(PROMETHEUS) ---
# ansible prefix: "monitoring_"
[k8s-service-layer.prometheus]
# If kubernetes.monitoring.enabled is true, choose whether to install or uninstall
# Prometheus. IF SET TO FALSE, PROMETHEUS WILL BE DELETED WITHOUT CHECKING FOR
# DISRUPTION (sic!).
#install = true

# helm chart version of the prometheus stack
# https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
# If you set this empty (not unset), the latest version is used
# Note that upgrades require additional steps and maybe even LCM changes are needed:
# https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#upgrading-chart
#prometheus_stack_version = "10.3.5"

# Enable grafana
#use_grafana = true

# Enable use of Thanos
#use_thanos = true

# Thanos uses local storage to keep a copy of the metadata from the object store
# for faster access. The size and storage class for that volume can be
# configured:
#thanos_metadata_volume_size="10Gi"
#thanos_metadata_volume_storage_class="rook-ceph-data"

# By default, the monitoring will capture all namespaces. If this is not
# desired, the following switch can be turned off. In that case, only the
# kube-system, monitoring and rook namespaces are scraped by Prometheus.
#prometheus_monitor_all_namespaces=true

# Scheduling keys control where services may run. A scheduling key corresponds
# to both a node label and to a taint. In order for a service to run on a node,
# it needs to have that label key.
# If no scheduling key is defined for service, it will run on any untainted
# node.
#scheduling_key = "node-restriction.kubernetes.io/cah-managed-k8s-monitoring"
# If you're using a general scheduling key prefix
# you can reference it here directly
#scheduling_key = "{{ scheduling_key_prefix }}/monitoring"

# Monitoring pod resource limits
# PROMETHEUS POD RESOURCE LIMITS
# The following limits are applied to the respective pods.
# Note that the Prometheus limits are chosen fairly conservatively and may need
# tuning for larger and smaller clusters.
# By default, we prefer to set limits in such a way that the Pods end up in the
# Guaranteed QoS class (i.e. both CPU and Memory limits and requests set to the
# same value).

#alertmanager_memory_limit = "256Mi"
#alertmanager_memory_request = "{{ monitoring_alertmanager_memory_limit }}"
#alertmanager_cpu_limit = "100m"
#alertmanager_cpu_request = "{{ monitoring_alertmanager_cpu_limit }}"

#prometheus_memory_limit = "3Gi"
#prometheus_memory_request = "{{ monitoring_prometheus_memory_limit }}"
#prometheus_cpu_limit = "1"
#prometheus_cpu_request = "{{ monitoring_prometheus_cpu_limit }}"

#grafana_memory_limit = "512Mi"
#grafana_memory_request = "256Mi"
#grafana_cpu_limit = "500m"
#grafana_cpu_request = "100m"

#kube_state_metrics_memory_limit = "128Mi"
#kube_state_metrics_memory_request = "50Mi"
#kube_state_metrics_cpu_limit = "50m"
#kube_state_metrics_cpu_request = "20m"

#thanos_sidecar_memory_limit = "256Mi"
#thanos_sidecar_memory_request = "{{ monitoring_thanos_sidecar_memory_limit }}"
#thanos_sidecar_cpu_limit = "500m"
#thanos_sidecar_cpu_request = "{{ monitoring_thanos_sidecar_cpu_limit }}"

#thanos_query_memory_limit = "786Mi"
#thanos_query_memory_request = "128Mi"
#thanos_query_cpu_limit = "1"
#thanos_query_cpu_request = "100m"

#thanos_store_memory_limit = "2Gi"
#thanos_store_memory_request = "256Mi"
#thanos_store_cpu_limit = "500m"
#thanos_store_cpu_request = "100m"

#thanos_objectstorage_container_name = "managed-k8s-monitoring-thanos-data"

# Use legacy jsonnet-based setup (monitoring_v1).
# The jsonnet-based monitoring setup will get removed soon™
# https://github.com/prometheus-operator/kube-prometheus
#use_jsonnet_setup = false

# Scrape external targets via blackbox exporter
# https://github.com/helm/charts/tree/master/stable/prometheus-blackbox-exporter
#internet_probe = false

#[[k8s-service-layer.prometheus.internet_probe_targets]]
# name="example"                    # Human readable URL that will appear in Prometheus / AlertManager
# url="http://example.com/healthz"  # The URL that blackbox will scrape
# interval="60s"                    # Scraping interval. Overrides value set in `defaults`
# scrapeTimeout="60s"               # Scrape timeout. Overrides value set in `defaults`

# ANCHOR_END: ksl_prometheus_configuration

# --- KUBERNETES SERVICE LAYER : CERT MANAGER ---
# ansible prefix: "k8s_cert_manager_"
[k8s-service-layer.cert-manager]
# Enable management of a cert-manager.io instance
enabled = false # •ᴗ•

# Configure in which namespace the cert-manager is run. The namespace is
# created automatically, but never deleted automatically.
#namespace = "k8s-svc-cert-manager"

# Install or uninstall cert manager. If set to false, the cert-manager will be
# uninstalled WITHOUT CHECK FOR DISRUPTION!
#install = true

# Scheduling key for the cert manager instance and its resources. Has no
# default.
#scheduling_key =

# ANCHOR: ksl_ingress_configuration
# --- KUBERNETES SERVICE LAYER : INGRESS ---
# ansible prefix: "k8s_ingress_"
[k8s-service-layer.ingress]
# Enable nginx-ingress management.
enabled = false # •ᴗ•

# Namespace to deploy the ingress in (will be created if it does not exist, but
# never deleted).
#namespace = "k8s-svc-ingress"

# If enabled, choose whether to install or uninstall the ingress. IF SET TO
# FALSE, THE INGRESS CONTROLLER WILL BE DELETED WITHOUT CHECKING FOR
# DISRUPTION.
#install = true

# Scheduling key for the cert manager instance and its resources. Has no
# default.
#scheduling_key =

# Service type for the frontend Kubernetes service.
#service_type = "LoadBalancer"

# Node port for the HTTP endpoint
#nodeport_http = 32080

# Node port for the HTTPS endpoint
#nodeport_https = 32443

# Enable SSL passthrough in the controller
#enable_ssl_passthrough = true

# ANCHOR_END: ksl_ingress_configuration

# ANCHOR: node_scheduling_configuration
# --- NODE SCHEDULING ---
# ansible prefix: /
[node-scheduling]
# Scheduling keys control where services may run. A scheduling key corresponds
# to both a node label and to a taint. In order for a service to run on a node,
# it needs to have that label key. The following defines a prefix for these keys
scheduling_key_prefix = "scheduling.mk8s.cloudandheat.com"

# --- NODE SCHEDULING: LABELS (sent to ansible as k8s_node_labels!) ---
[node-scheduling.labels]
# The following fields are commented out because they make assumptions on the existence
# and naming scheme of nodes. Use them for inspiration :)
#managed-k8s-worker-0 = ["{{ scheduling_key_prefix }}/storage=true"]
#managed-k8s-worker-1 = ["{{ scheduling_key_prefix }}/monitoring=true"]
#managed-k8s-worker-2 = ["{{ scheduling_key_prefix }}/storage=true"]
#managed-k8s-worker-3 = ["{{ scheduling_key_prefix }}/monitoring=true"]
#managed-k8s-worker-4 = ["{{ scheduling_key_prefix }}/storage=true"]
#managed-k8s-worker-5 = ["{{ scheduling_key_prefix }}/monitoring=true"]
#
# --- NODE SCHEDULING: TAINTS (sent to ansible as k8s_node_taints!) ---
[node-scheduling.taints]
# The following fields are commented out because they make assumptions on the existence
# and naming scheme of nodes. Use them for inspiration :)
#managed-k8s-worker-0 = ["{{ scheduling_key_prefix }}/storage=true:NoSchedule"]
#managed-k8s-worker-2 = ["{{ scheduling_key_prefix }}/storage=true:NoSchedule"]
#managed-k8s-worker-4 = ["{{ scheduling_key_prefix }}/storage=true:NoSchedule"]

# ANCHOR_END: node_scheduling_configuration

# ANCHOR: wireguard_config
# --- WIREGUARD ---
# ansible prefix: "wg_"
[wireguard]
# Set the environment variable "WG_COMPANY_USERS" or this field to 'false' if C&H company members
# should not be rolled out as wireguard peers.
#rollout_company_users = true

# IP address range to use for WireGuard clients. Must be set to a CIDR and must
# not conflict with the terraform.subnet_cidr.
# Should be chosen uniquely for all clusters of a customer at the very least
# so that they can use all of their clusters at the same time without having
# to tear down tunnels.
ip_cidr = "172.30.153.64/26"
ip_gw   = "172.30.153.65/26"

# Same for IPv6
#ipv6_cidr = "fd01::/120"
#ipv6_gw = "fd01::1/120"

port = 7777 # •ᴗ•

# To add WireGuard keys, create blocks like the following
# You can add as many of them as you want. Inventory updater will auto-allocate IP
# addresses from the configured ip_cidr.
#[[wireguard.peers]]
#pub_key = "test1"
#ident = "testkunde1"

## Wireguard-based site-to-site tunnel
# If enabled, configure site to site tunnel
#s2s_enabled = false

# Subnet of the wireguard "transfer net" between the two endpoints
#s2s_transfer_subnet = "172.30.18.2/31"

# IP which is assigned to our VRRP master in transfer network
#s2s_ip = "172.30.18.2"

# IP which is assigned to our VRRP master in transfer network
#s2s_peer_ip = "172.30.18.3"

# Port on which wireguard listens
#s2s_port = "16000"

# Public wireguard key of the peer
#s2s_peer_pub_key = "7CuC/cSw1US+nilx0ihoA1qb2DsQI0QV2RBuLE8cnhk="

# Endpoint under which the peer can be reached
#s2s_peer_public_endpoint = "<public-IP-of-your-peer>:16000"

# BGP AS IDs for both parties (should differ, unless iBGP is wanted)
#s2s_bgp_as = "65010"
#s2s_peer_bgp_as = "65009"

# ANCHOR_END: wireguard_config

# ANCHOR: ipsec_configuration
# --- IPSEC ---
# ansible prefix: "ipsec_"
[ipsec]
# enabled = false

# Flag to enable the test suite.
# Must make sure a remote endpoint, with ipsec enabled, is running and open for connections. 
# test_enabled = false

# Must be a list of parent SA proposals to offer to the client.
# Must be explicitly set if ipsec_enabled is set to true.
#proposals =

# Must be a list of ESP proposals to offer to the client.
#esp_proposals = "{{ ipsec_proposals }}"

# List of CIDRs to route to the peer. If not set, only dynamic IP
# assignments will be routed.
#peer_networks = []

# List of CIDRs to offer to the peer.
#local_networks = ["{{ subnet_cidr }}"]

# Pool to source virtual IP addresses from. Those are the IP addresses assigned
# to clients which do not have remote networks. (e.g.: "10.3.0.0/24")
#virtual_subnet_pool = null

# List of addresses to accept as remote. When initiating, the first single IP
# address is used.
#remote_addrs = false

# Private address of remote endpoint.
# only used when test_enabled is True
#remote_private_addrs = ""

# The PSK for EAP. Must be set.
#eap_psk =

# ANCHOR_END: ipsec_configuration

# ANCHOR: passwordstore_configuration
# --- PASSWORDSTORE ---
# ansible prefix: "passwordstore_"
[passwordstore]
# Set this field to `true` if the "company" users should be rolled out.
#rollout_company_users = false

# Configure Additional GPG-IDs that should have access to the cluster-repo specific passwordstore.
# If you're not member of the "company-wide" list, e.g., because you're a student you must add yourself here.
# yannic.ahrens@cloudandheat.com serves as an example here because the author is incredibly vain and likes
# to see his name written down everywhere.
# Parameters:
#   - 'ident': easy to read identification string, not used anywhere yet
#   - 'gpg_id': ID of your public GPG key, ideally in long-form

# --- PASSWORDSTORE: ADDITIONAL USERS ---
#[[passwordstore.additional_users]]
#ident = "yannic.ahrens@cloudandheat.com"
#gpg_id = "68AA582E81AD111C127F01273370EBE296354805"

# ANCHOR_END: passwordstore_configuration

# ANCHOR: ch-role-users_configuration
# --- C&H USERS ---
# ansible prefix: "cah_users_"
[cah-users]
rollout = false # •ᴗ•

# Include and exclude C&H users from rollout
# C&H users refers to items in the ch-users-databag repository
# For additional information refer the ch-role-users repository
# The users have to be provided as List<String>
# Possible Configurations:
# - roll_out_users_from
#   - include specific user group
#   - Default: ["opsi", "it-operations", "head"]
# - exclude_users_from
#   - exclude specific user group
#   - Default: ["students", "service"]
# - include_users
#   - include specific user(s)
#   - Default: []
# - exclude_users
#   - exclude specific user(s)
#   - Default: ["deployer"]
# Example Usage:
# include_users = ["<user>", "<user>"]

# ANCHOR_END: ch-role-users_configuration

# ANCHOR: testing_test_nodes_configuration
# --- TESTING: TEST NODES ---
[testing.test-nodes]
# The following fields are commented out because they make assumptions on the existence
# and naming scheme of nodes. Use them for inspiration :)
#"managed-k8s-worker-1" = "worker0"
#"managed-k8s-worker-3" = "worker1"
#"managed-k8s-worker-5" = "worker2"

# ANCHOR_END: testing_test_nodes_configuration

# ANCHOR: miscellaneous_configuration
# --- MISCELLANEOUS ---
# ansible prefix: /
[miscellaneous]
# Install wireguard on all workers (without setting up any server-side stuff)
# so that it can be used from within Pods.
wireguard_on_workers = false

# Name of the internal OpenStack network. This field becomes important if a VM is
# attached to two networks but the controller-manager should only pick up one. If 
# you don't understand the purpose of this field, there's a very high chance you
# won't need to touch it/uncomment it.
# Note: This network name isn't fetched automagically (by terraform) on purpose
# because there might be situations where the CCM should not pick the managed network.
#openstack_network_name = "managed-k8s-network"

# Value for the kernel parameter `vm.max_map_count` on k8s worker nodes. Modifications
# might be required depending on the software running on the nodes (e.g., ElasticSearch).
# If you leave the value commented out you're fine and the system's default will be kept.
#vm_max_map_count = 262144

# ANCHOR_END: miscellaneous_configuration
