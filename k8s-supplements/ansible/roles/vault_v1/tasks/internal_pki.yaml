---
- name: Create Vault CA selfsigned issuer (internal)
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"
  kubernetes.core.k8s:
    apply: true
    definition:
      apiVersion: cert-manager.io/v1
      kind: "{{ yaook_vault_ca_issuer_kind }}"
      metadata:
        name: "{{ yaook_vault_ca_issuer }}"
        namespace: "{{ yaook_vault_namespace }}"
      spec:
        selfSigned: {}
    validate:
      fail_on_error: true
      strict: true

- name: Create Vault CA (internal)
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"
  kubernetes.core.k8s:
    apply: true
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        namespace: "{{ yaook_vault_namespace }}"
        name: vault-ca-internal
      spec:
        issuerRef:
          kind: "{{ yaook_vault_ca_issuer_kind }}"
          name: "{{ yaook_vault_ca_issuer }}"
        secretName: vault-ca-internal
        commonName: vault-ca-internal
        isCA: true
    validate:
      fail_on_error: true
      strict: true

- name: Create Vault Issuer (internal)
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"
  kubernetes.core.k8s:
    apply: true
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        namespace: "{{ yaook_vault_namespace }}"
        name: vault-internal
      spec:
        ca:
          secretName: vault-ca-internal
    validate:
      fail_on_error: true
      strict: true

- name: Enumerate workers
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
  register: nodes
  # Retry this task on failures
  until: nodes is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: Collect worker IPs
  ansible.builtin.set_fact:
    yaook_vault_worker_ips: "{{ (nodes.resources | map(attribute='status') | map(attribute='addresses') | flatten(levels=1) | selectattr('type', 'eq', 'InternalIP') | map(attribute='address')) }}"

- name: Set vault server DNS names
  ansible.builtin.set_fact:
    yaook_vault_dnsnames_complete: |
      [
        {{ "vault.%s.svc.cluster.local" | format(yaook_vault_namespace) | to_json }},
        {{ "vault-active.%s.svc.cluster.local" | format(yaook_vault_namespace) | to_json }},
      ]

- name: Create Vault Certificate (internal)
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"
  # This needs to be valid for:
  # - the cluster service name
  # - all worker IP addresses (if management cluster integration)
  # - possibly a fun public DNS name
  kubernetes.core.k8s:
    apply: true
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        namespace: "{{ yaook_vault_namespace }}"
        name: vault-cert-internal
      spec:
        issuerRef:
          name: vault-internal
        secretName: vault-cert-internal
        duration: 72h
        renewBefore: 24h
        ipAddresses: "{{ (yaook_vault_service_type in ['NodePort', 'LoadBalancer']) | ternary(yaook_vault_worker_ips, []) + ['127.0.0.1', '::1'] }}"
        dnsNames: "{{ yaook_vault_dnsnames_complete }}"
    validate:
      fail_on_error: true
      strict: true
...
