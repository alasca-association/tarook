#jinja2:lstrip_blocks: True
#!/usr/sbin/nft -f

{{ _auto_generated_preamble }}

flush ruleset

define wan = {{ ansible_default_ipv4.interface }}
define haproxy_stats_port = {{ haproxy_stats_port }}
define haproxy_prom_metrics_port = 9101
define keepalived_prom_metrics_port = 9650
define bird_prom_metrics_port = 9324
define node_exporter_metrics_port = 9100

table inet filter {
    # this set may be extended by other roles dropping
    # files into the drop-in directory "/etc/nft.d/"
    set tcp_internal_accepted {
        type inet_service; flags interval;
        elements = {
            $haproxy_prom_metrics_port,
            $haproxy_stats_port,
            $keepalived_prom_metrics_port,
            $bird_prom_metrics_port,
            $node_exporter_metrics_port
        }
    }

    set tcp_mapped_accepted {
        type inet_service; flags interval;
        {% if lb_ports %}
        elements = {
            {% for port in lb_ports %}
                {% if port is mapping %}
                        {{ port.external }},
                {% else %}
                        {{ port }},
                {% endif %}
            {% endfor %}
        }
        {% endif %}
    }

    set udp_accepted {
        type inet_service; flags interval;
        elements = {
            {% for ep in wg_endpoints %}
            {% if ep.enabled %}
            {{ ep.port }},
            {% endif %}
            {% endfor %}
        }
    }

    {% if ipv4_enabled %}
    set ipv4_internal_accepted {
        type ipv4_addr; flags interval;
        elements = {
            {{ priv_ip_cidr }},
            {% for ep in wg_endpoints %}
            {% if ep.enabled %}
            {{ ep.ip_cidr }},
            {% endif %}
            {% endfor %}
        }
    }
    {% endif %}

    set wg_iifnames {
        type ifname;
        elements = {
            {% for ep in wg_endpoints %}
            {% if ep.enabled %}
            wg{{ ep.id }},
            {% endif %}
            {% endfor %}
        }
    }

    {% if ipv6_enabled %}
    set ipv6_internal_accepted {
        type ipv6_addr; flags interval;
        elements = {
            {{ subnet_v6_cidr }},
            {% for ep in wg_endpoints %}
                {% if ep.enabled %}
                {% if ep.ipv6_cidr %}
                {{ ep.ipv6_cidr }},
                {% endif %}
                {% endif %}
            {% endfor %}
        }
    }
    {% endif %}

    chain base_checks {
        ct state invalid drop comment "Drop invalid connections"
        ct state {established, related} accept comment "Accept traffic originating from us"
    }

    chain input {
        type filter hook input priority 0; policy drop;
        iif lo accept comment "Accept any localhost traffic"

        jump base_checks

        tcp dport ssh accept comment "Accept SSH connections from anywhere"

        {% if ipv4_enabled %}
        tcp dport @tcp_internal_accepted ip saddr @ipv4_internal_accepted accept comment "Accept connections to internal services from private subnet"
        {% endif %}

        tcp dport @tcp_mapped_accepted accept comment "Accept connections to nodeport mapped services from anywhere"

        udp dport @udp_accepted accept comment "Accept wireguard traffic from anywhere"

        ip protocol icmp counter accept
        ip protocol vrrp counter accept

        {% if ipv6_enabled %}
        udp dport 546 udp sport 547 accept comment "Allow DHCPv6"
        tcp dport @tcp_internal_accepted ip6 saddr @ipv6_internal_accepted  accept comment "Accept connections to internal services from private subnet v6"
        meta nfproto ipv6 meta l4proto ipv6-icmp accept comment "Accept all ICMPv6 traffic"
        {% endif %}

    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        jump base_checks

        iifname @wg_iifnames oifname $wan ip daddr {{ priv_ip_cidr }} ct state new counter accept;

        iifname $wan oifname $wan ip saddr {{ priv_ip_cidr }} ct state new counter accept;

        {% if ipv6_enabled %}
        iifname $wan oifname $wan ip6 saddr {{ subnet_v6_cidr }} ct state new counter accept;
        {% endif %}

    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}

table ip nat {
    chain postrouting {
        type nat hook postrouting priority 100;
    }

    chain prerouting {
        type nat hook prerouting priority 100;
    }
}

include "/etc/nft.d/*.conf"
include "/var/lib/ch-k8s-lbaas-agent/nftables/*.conf"

table ip nat {
    chain postrouting {
        fib saddr type != local masquerade;
    }
}
