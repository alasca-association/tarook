---
- name: Initialize Snapshots
  vars:
    files_folder: "{{ image_versions.volume_snapshot_controller + '/' }}"
  block:
  - name: Create Custom Snapshot Resource Definitions (< v6.3.3)
    when: image_versions.volume_snapshot_controller is version('v6.3.3', '<')
    kubernetes.core.k8s:
      definition: "{{ lookup('file', files_folder + 'crds/snapshot.storage.k8s.io.yaml') }}"
      apply: true
      state: present
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: Create Custom Snapshot Resource Definitions (>= v6.3.3)
    when: image_versions.volume_snapshot_controller is version('v6.3.3', '>=')
    kubernetes.core.k8s:
      definition: "{{ lookup('file', files_folder + 'crds/' + item) }}"
      apply: true
      state: present
      validate:
        fail_on_error: true
        strict: true
    loop:
    - "snapshot.storage.k8s.io_volumesnapshots.yaml"
    - "snapshot.storage.k8s.io_volumesnapshotcontents.yaml"
    - "snapshot.storage.k8s.io_volumesnapshotclasses.yaml"
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: Check for old snapshot-controller
    when: image_versions.volume_snapshot_controller is version('v7.0.2', '>=')
    block:
    - name: Get old snapshot-controllers
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: kube-system
        label_selectors:
        - app=snapshot-controller
      register: outdated_snapshot_controller
      until: outdated_snapshot_controller is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Remove outdated snapshot-controllers
      when: (outdated_snapshot_controller.resources | length) > 0
      kubernetes.core.k8s:
        state: absent
        kind: Deployment
        name: snapshot-controller
        namespace: kube-system
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

  - name: Deploy the Snapshot Controller and its RBAC
    kubernetes.core.k8s:
      state: present
      apply: true
      definition: "{{ lookup('file', files_folder + 'snapshot-controller/' + item) }}"
      validate:
        fail_on_error: true
        strict: true
    loop:
    - rbac-snapshot-controller.yaml
    - setup-snapshot-controller.yaml
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"
...
