{{ _auto_generated_preamble }}

define ipsec_port = 500
define ipsec_nat_port = 4500

define ipsec_k8s_port = {{ k8s_apiserver_frontend_port }}
define vrrp_master_vip = {{ networking_fixed_ip }}
define ipsec_remote_addresses = {
{% for net in ipsec_peer_networks %}
    {{ net }},
{% endfor %}
{% if ipsec_virtual_subnet_pool %}
    {{ ipsec_virtual_subnet_pool }}
{% endif %}
}

table inet filter {
    set ipsec_local_addresses {
        type ipv4_addr; flags interval;
        elements = {
{% for net in ipsec_local_networks %}
            {{ net }},
{% endfor %}
        }
    }

    set ipsec_port_whitelist {
        type inet_service; flags interval;
        elements = {
            $ipsec_k8s_port
        }
    }

    chain input {
        udp dport { $ipsec_port, $ipsec_nat_port } accept;

        meta secpath exists tcp dport @ipsec_port_whitelist ip saddr $ipsec_remote_addresses accept comment "Accept connections to internal services from ipsec peers"
    }

    chain forward {
        meta secpath exists iifname $wan oifname $wan ip saddr $ipsec_remote_addresses ip daddr @ipsec_local_addresses ct state new counter accept;
    }
}

table ip nat {
    chain postrouting {
        # Prevent SNAT for IPsec -> Pod by not masquerading packets from remote peers
        ip saddr $ipsec_remote_addresses return;
    }
}
