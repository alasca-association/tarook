---
- name: Get infos about deployed rook helm charts
  block:
  - name: Get info about rook-ceph (operator)
    kubernetes.core.helm_info:
      name: rook-ceph
      namespace: "{{ rook_namespace }}"
    register: rook_ceph_info
    ignore_errors: true  # If not deployed, yet

  - name: Get info about rook-ceph-cluster (cluster)
    kubernetes.core.helm_info:
      name: rook-ceph-cluster
      namespace: "{{ rook_namespace }}"
    register: rook_ceph_cluster_info
    ignore_errors: true  # If not deployed, yet

  - name: Gather information about the rook-ceph-operator Deployment
    kubernetes.core.k8s_info:
      kind: Deployment
      namespace: "{{ rook_namespace }}"
      name: rook-ceph-operator
      label_selectors:
      - operator=rook
      - storage-backend=ceph
    register: rook_operator_info
    ignore_errors: true

- name: Sanity checks
  block:
  - name: Check for consistent rollout
    ansible.builtin.assert:
      that: >
        rook_ceph_info.status is not defined and rook_operator_info.resources | length == 0
        or
        rook_ceph_info.status is defined
      fail_msg: |
        There is no rook-ceph helm chart but the rook operator
        is deployed. This indicates that the rook cluster wasn't
        migrated to rook_v2, yet. Refusing to continue.

  - name: Check upgrade prerequisites
    when:  # Execute version checks only if charts are already deployed
    - rook_ceph_info.status is defined
    - rook_ceph_cluster_info.status is defined
    block:
    - name: Check for disruption if it is needed
      assert:
        that: >
          (rook_version is version(rook_ceph_info.status.app_version, operator="eq")
          and rook_version is version(rook_ceph_cluster_info.status.app_version, operator="eq"))
          or _allow_disruption | default(False)
        fail_msg: |
          Configured and deployed versions differ, but no disruption is allowed.
          Please use MANAGED_K8S_RELEASE_THE_KRAKEN=true if you want to proceed.

    # Allow upgrades to the next minor version only
    - name: Check version compatibility
      vars:
        # configured version as vX.Y
        rook_version_array: "{{ rook_version | split('.') }}"
        rook_version_minor: "{{ (rook_version_array[0], rook_version_array[1]) | join('.') }}"

        rook_ceph_info_array: "{{ rook_ceph_info.status.app_version | split('.') }}"
        # rook-ceph version as vX.Y
        rook_ceph_info_minor: "{{ (rook_ceph_info_array[0], rook_ceph_info_array[1]) | join('.') }}"
        # rook-ceph version incremented one minor as vX.Y
        incremented_minor_rook_ceph: "{{ rook_ceph_info_array[1] | int + 1 }}"
        incremented_rook_ceph_info_minor: "{{ (rook_ceph_info_array[0], incremented_minor_rook_ceph) | join('.') }}"

        rook_ceph_cluster_info_array: "{{ rook_ceph_cluster_info.status.app_version | split('.') }}"
        # rook-ceph-cluster version as vX.Y
        rook_ceph_cluster_info_minor: "{{ (rook_ceph_info_array[0], rook_ceph_info_array[1]) | join('.') }}"
        # rook-ceph-cluster version incremented one minor as vX.Y
        incremented_minor_rook_ceph_cluster: "{{ rook_ceph_info_array[1] | int + 1 }}"
        incremented_rook_ceph_cluster_info_minor: "{{ (rook_ceph_cluster_info_array[0], incremented_minor_rook_ceph_cluster) | join('.') }}"
      assert:
        that:
        # assert that rook-ceph version <= configured version
        - rook_ceph_info_minor is version(rook_version_minor, '<=')
        # assert that configured version <= next rook-ceph minor
        - rook_version_minor is version(incremented_rook_ceph_info_minor, '<=')

        # assert that rook-ceph-cluster <= configured version
        - rook_ceph_cluster_info_minor is version(rook_version_minor, '<=')
        # assert that configured version <= next rook-ceph-cluster minor
        - rook_version_minor is version(incremented_rook_ceph_cluster_info_minor, '<=')
        fail_msg: "Upgrades are allowed between minor releases only."
...
