---
- name: Check reachability of remote endpoint
  vars:
    gateway: "{{ (groups['gateways'] | first) if (groups['gateways'] | default([]) | length) != 0 else False }}"
    ipsec_enabled: "{{ hostvars[gateway]['ipsec_enabled'] | default(False) }}"
    ipsec_test_enabled: "{{ hostvars[gateway]['ipsec_test_enabled'] | default(False) }}"
    ipsec_remote_private_addrs: "{{ hostvars[gateway]['ipsec_remote_private_addrs'] }}"
  block:
  - name: create namespace
    kubernetes.core.k8s:
      api_version: v1
      kind: Namespace
      name: "{{ check_ipsec_namespace }}"
      state: present
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: create a busybox Pod
    kubernetes.core.k8s:
      state: present
      definition: "{{ lookup('template', 'busybox-ping-job.yaml.j2') }}"
      wait: true
      apply: true
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: Try to ping test-node via IPsec
    kubernetes.core.k8s_exec:
      namespace: "{{ check_ipsec_namespace }}"
      pod: ipsec-test-busybox
      command: ping -c 1 {{ ipsec_remote_private_addrs }}
    register: ipsec_test_vm_ping
    delay: 5
    retries: 20
    until: ipsec_test_vm_ping.rc == 0

  - name: delete namespace
    kubernetes.core.k8s:
      api_version: v1
      kind: Namespace
      name: "{{ check_ipsec_namespace }}"
      state: absent
      wait: true
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"
...
