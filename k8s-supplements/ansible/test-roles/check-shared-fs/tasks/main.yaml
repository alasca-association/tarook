---
- name: show test information
  ansible.builtin.debug:
    msg: "This test is using the {{ fs_storage_class }} storageClass"

- name: Run the test
  block:
  - name: create namespace
    kubernetes.core.k8s:
      state: present
      api_version: v1
      kind: Namespace
      name: "{{ check_shared_filesystem_namespace }}"
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: create PVC
    kubernetes.core.k8s:
      state: present
      definition: "{{ lookup('template', 'pvc.yaml') }}"
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: start worker pods
    vars:
      test_worker_nodes: "{{ testing_nodes | default([groups['k8s_nodes'] | first, groups['k8s_nodes'] | last]) }}"
    kubernetes.core.k8s:
      state: present
      definition: "{{ lookup('template', 'pod.yaml') }}"
      validate:
        fail_on_error: true
        strict: true
    loop: "{{ test_worker_nodes }}"
    register: worker_pods
    # Retry this task on failures
    until: worker_pods is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: fetch worker pod completion state
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Pod
      name: "shared-fs-test-{{ item.item }}"
      namespace: "{{ check_shared_filesystem_namespace }}"
    register: worker_state
    loop: "{{ worker_pods.results }}"
    until: "worker_state.resources and (worker_state.resources[0].status | default(False)) and (worker_state.resources[0].status.phase | default('') in ['Succeeded', 'Failed'])"
    delay: 5
    retries: 240

  - name: check worker pod success
    ansible.builtin.debug:
      msg: "Worker pod {{ item.resources[0].metadata.name }} is in condition {{ item.resources[0].status.phase }}"
    failed_when: 'item.resources[0].status.phase == "Failed"'
    loop: "{{ worker_state.results }}"

  - name: delete namespace
    kubernetes.core.k8s:
      state: absent
      api_version: v1
      kind: Namespace
      name: "{{ check_shared_filesystem_namespace }}"
      wait: true
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"
    tags:
    - test-cleanup
...
