---
- name: Execute test on the k8s layer
  delegate_to: "{{ groups['orchestrator'] | first }}"
  block:
  - name: create test namespace
    kubernetes.core.k8s:
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: "{{ check_networkpolicy_namespace }}"
          labels:
            test: "{{ check_networkpolicy_namespace }}"
      validate:
        fail_on_error: true
        strict: true
      state: present
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: create service
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'service.yaml') }}"
      state: present
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: get pod IPs
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Pod
      label_selectors:
      - app=echo
      namespace: "{{ check_networkpolicy_namespace }}"
    register: service_pods
    until: |
      (service_pods.resources | default(False) and
       not service_pods.resources | rejectattr('status') | list and
       not service_pods.resources | map(attribute='status') | rejectattr('phase', 'eq', 'Running') | list and
       not service_pods.resources | map(attribute='status') | rejectattr('podIP') | list)
    retries: 60
    delay: 1

  - name: store pod IPs
    ansible.builtin.set_fact:
      service_pod_ips: "{{ service_pods.resources | map(attribute='status') | map(attribute='podIP') | list }}"

  - name: start blocked-test
    vars:
      pod_name: blocked-test
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'test-pod.yaml') }}"
      state: present
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: fetch blocked-test pod completion state
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Pod
      name: blocked-test
      namespace: "{{ check_networkpolicy_namespace }}"
    register: blocked_test_state
    until: "blocked_test_state.resources and (blocked_test_state.resources[0].status | default(False)) and (blocked_test_state.resources[0].status.phase | default('') in ['Succeeded', 'Failed'])"
    delay: 1
    retries: 60

  - name: check blocked-test pod failure
    ansible.builtin.debug:
      msg: "Blocked test pod is in condition {{ blocked_test_state.resources[0].status.phase }}"
    failed_when: 'blocked_test_state.resources[0].status.phase != "Failed"'

  - name: unblock for sources from the same namespace
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'unblock-same-namespace.yaml') }}"
      state: present
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: start unblocked-test
    vars:
      pod_name: unblocked-test
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'test-pod.yaml') }}"
      state: present
      validate:
        fail_on_error: true
        strict: true
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

  - name: fetch unblocked-test pod completion state
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Pod
      name: unblocked-test
      namespace: "{{ check_networkpolicy_namespace }}"
    register: blocked_test_state
    until: "blocked_test_state.resources and (blocked_test_state.resources[0].status | default(False)) and (blocked_test_state.resources[0].status.phase | default('') in ['Succeeded', 'Failed'])"
    delay: 1
    retries: 60

  - name: check unblocked-test pod succeeded
    ansible.builtin.debug:
      msg: "Blocked test pod is in condition {{ blocked_test_state.resources[0].status.phase }}"
    failed_when: 'blocked_test_state.resources[0].status.phase == "Failed"'

- name: check service is unreachable from the node
  # In SingleNode setups, the node will be able to connect to the service
  when: inventory_hostname != groups['masters'] | first
  ansible.builtin.uri:
    url: "http://{{ item }}:8080"
    timeout: 10
    status_code: -1
  register: uri_result
  until: uri_result is not failed
  delay: 1
  retries: 3
  loop: "{{ service_pod_ips }}"

- name: unblock access from everywhere
  delegate_to: "{{ groups['orchestrator'] | first }}"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'unblock-all.yaml') }}"
    state: present
    validate:
      fail_on_error: true
      strict: true
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: check service is reachable from the node
  ansible.builtin.uri:
    url: "http://{{ item }}:8080"
    status_code: 200
  register: uri_result
  until: uri_result is not failed
  loop: "{{ service_pod_ips }}"
  delay: 1
  retries: 60

- name: delete test namespace
  delegate_to: "{{ groups['orchestrator'] | first }}"
  kubernetes.core.k8s:
    api_version: v1
    name: "{{ check_networkpolicy_namespace }}"
    kind: Namespace
    state: absent
    wait: true
    validate:
      fail_on_error: true
      strict: true
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"
  tags:
  - test-cleanup
...
