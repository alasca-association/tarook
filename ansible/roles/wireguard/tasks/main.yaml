- name: Ensure private key consistency
  become: yes
  any_errors_fatal: true
  block:
    - name: Check for existence of private key in old location (LEGACY)
      stat:
        path: /etc/wireguard/wg_gw.key
      register: wg_gw
    - name: Fail if the key exists (LEGACY)
      fail:
        msg: |
          This task fails because we changed the handling of the wireguard key of the gateway.
          The key is now stored locally in the inventory and not on the gateways.
          To avoid voodoo synchronization, manual intervention is required.
          1.) Copy the private wireguard key file of the gateway (/etc/wireguard/wg_gw.key) to your local inventory {{ etc_dir }}/wg_gw_priv.key.
          2.) Remove the key file (/etc/wireguard/wg_gw.key) from all gateways.
          3.) Re-run the playbook
          This task is only relevant for existing clusters.
      when: "wg_gw.stat.exists"

- name: Check existence of wg0.conf
  become: yes
  stat:
    path: /etc/wireguard/wg0.conf
  register: wg0_conf

- name: Lookup private wireguard key of the gateway
  # Currently the passwordstore lookup plugin cannot deal with whitespaces in the passwordstore directory. [0]
  # We're mitigating this issue by checking that `etc_dir` does not contain a whitespace + hardcoding the path
  # to the cluster local password store.
  #
  # [0] https://github.com/ansible-collections/community.general/blob/de8e2a83e2948eabb0b8b1d9c1a533a18fc65214/plugins/lookup/passwordstore.py#L161
  become: no
  delegate_to: localhost
  run_once: yes
  vars:
    password_store_dir: "{{ etc_dir }}/passwordstore"
  block:
    - name: Lookup key in passwordstore # noqa 207
      ignore_errors: yes
      # Check if the key exists
      set_fact:
        wg_gw_key: "{{ lookup('passwordstore', 'wg_gw_key directory={{ password_store_dir }}') }}"

    - name: Fail if wg0.conf exists but key is not in passwordstore
      fail:
        msg: |
          This task fails because the private wireguard key of the gateway should no longer be stored in plain text in the file system of the workstation.
          Previously the key was not included in the git repository to mitigate the risk of leaking sensitive credentials.
          The role didn't warn you about a missing key, however, but overwrote it happily. Mercy on those who do not use '--diff'.
          We're using pass to store the credentials from now on. Here is what to do:
          1.) Fetch the current wireguard private key of the gateways. Likely spots are:
            - inventory/.etc/wg_gw_priv.key
            - /etc/wireguard/wg0.conf (on the gateways)
          2.) If you haven't done so already, install `pass` on your workstation. (https://www.passwordstore.org/)
          3.) Tell pass where to look for the password database: `export PASSWORD_STORE_DIR="$(pwd)/inventory/.etc/passwordstore"`
          4.) Insert the key into the database: `pass insert wg_gw_key`
          5.) Compare the output of `pass show wg_gw_key` with the current wireguard private key of the gateway and make sure that they match.
      when: "wg0_conf.stat.exists and (wg_gw_key is not defined)"

    - name: Create new wireguard private key of the gateway
      command: wg genkey
      register: wg_genkey
      when: "not wg0_conf.stat.exists and (wg_gw_key is not defined)"

    - name: Insert key into the passwordstore # noqa 207
      # Ignoring the linter here because without nesting jinja we'd have to concat strings which is even uglier.
      set_fact:
        _: "{{ lookup('passwordstore', 'wg_gw_key userpass={{ wg_genkey.stdout }} directory={{ password_store_dir }} create=True') }}"
      when: "not wg0_conf.stat.exists and (wg_gw_key is not defined)"

- name: Load shared keypair
  become: no
  delegate_to: localhost
  run_once: yes
  vars:
    password_store_dir: "{{ etc_dir }}/passwordstore"
  block:
    - name: Load private key # noqa 207
      set_fact:
        wg_gw_priv_key: "{{ lookup('passwordstore', 'wg_gw_key directory={{ password_store_dir }}') }}"
    - name: Derive public key
      command: "wg pubkey"
      args:
        stdin: "{{ wg_gw_priv_key }}"
      register: wg_pubkey
    - name: Write public key to disk
      copy:
        content: "{{ wg_pubkey.stdout }}"
        dest: "{{ wg_local_pub_path }}"

- name: Create /etc/wireguard/wg0.conf on gateway side
  become: yes
  template:
    src: wg0_server.conf.j2
    dest: /etc/wireguard/wg0.conf
    mode: '0640'
  register: wg0_conf

- name: Create a wg0.conf template for each peer
  become: no
  delegate_to: localhost
  run_once: yes
  template:
    src: wg0_client.conf.j2
    dest: "{{ wg_client_path }}"
    mode: '0640'
  vars:
    wg_client_path: "{{ etc_dir }}/wg_{{ item['ident'] }}.conf"
    vip_port: vip-port
  loop: "{{ wg_peers }}"

- name: Notify user about auto-generated wg.conf
  delegate_to: localhost
  become: no
  run_once: yes
  debug:
    msg: |
      The wg-* configurations were written to {{ etc_dir }}.
      You need to insert your private wireguard key and bring the wireguard
      interface up before continuing.

- name: Create /etc/sysctl.d/wireguard.conf on the wireguard VPN server
  become: yes
  copy:
    dest: /etc/sysctl.d/wireguard.conf
    content: |
      net.ipv4.ip_forward=1

- name: Load /etc/sysctl.d/wireguard.conf on the wireguard VPN server
  become: yes
  command: sysctl -p /etc/sysctl.d/wireguard.conf
  changed_when: false

- name: Remove old service
  become: yes
  file:
    path: /etc/systemd/system/wireguard.service
    state: absent
  register: old_wg_service

- name: Stop and disable old wireguard service
  become: yes
  service:
    name: wireguard.service
    state: stopped
    enabled: no
  when: old_wg_service is changed

- name: Reload systemd to drop old wireguard service
  become: yes
  systemd:
    daemon_reload: yes
  when: old_wg_service is changed

- name: Stop wg0 after removal of legacy service so that the new service can take over
  become: yes
  command:
  args:
    argv: ['wg-quick', 'down', 'wg0']
  when: old_wg_service is changed

- name: Start and enable wireguard endpoint
  become: yes
  block:
    - name: Start and enable wireguard endpoint
      service:
        name: wg-quick@wg0
        enabled: yes
        state: "{{ 'restarted' if wg0_conf is changed else 'started' }}"
  rescue:
    - name: Collect logs of the wg-quick service
      shell: journalctl -u wg-quick@wg0; systemctl status wg-quick@wg0
      register: wg_logs
      ignore_errors: yes
    - name: Print logs
      debug:
        var: wg_logs.stdout_lines
    - name: Re-raise error
      fail:
        msg: "{{ ansible_failed_result }}"
