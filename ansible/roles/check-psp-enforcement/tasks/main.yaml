
- name: Run the test
  become: yes
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

  block:
  - name: Create namespace
    k8s:
      definition: "{{ lookup('template', 'namespace.yaml') }}"
      state: present
      validate:
        fail_on_error: yes
        strict: yes

  - name: Configure PSP resources
    k8s:
      definition: "{{ lookup('template', 'psp.yaml') }}"
      state: present
      validate:
        fail_on_error: yes
        strict: yes

  - name: Create job without available policy
    k8s:
      definition: "{{ lookup('template', 'failing-job-no-psp.yaml') }}"
      state: present
      validate:
        fail_on_error: yes
        strict: yes

  - name: Create job without matching policy
    k8s:
      definition: "{{ lookup('template', 'failing-job-psp-mismatch.yaml') }}"
      state: present
      validate:
        fail_on_error: yes
        strict: yes

  - name: Create succeeding job
    k8s:
      definition: "{{ lookup('template', 'succeeding-job.yaml') }}"
      state: present
      validate:
        fail_on_error: yes
        strict: yes

  - name: Fetch succeeding pod completion state
    k8s_info:
      api_version: v1
      kind: Pod
      label_selectors:
      - "job-name=succeeding-job"
      namespace: "{{ test_check_psp_enforcement_namespace }}"
    register: succeeding_state
    until: "succeeding_state.resources and (succeeding_state.resources[0].status | default(False)) and (succeeding_state.resources[0].status.phase | default('') in ['Succeeded', 'Failed'])"
    delay: 1
    retries: 60

  - name: Check succeeding pod success
    debug:
      msg: "Succeeding pod is in condition {{ succeeding_state.resources[0].status.phase }}"
    failed_when: 'succeeding_state.resources[0].status.phase == "Failed"'

  - name: Retrieve info of all pods
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ test_check_psp_enforcement_namespace }}"
    register: pod_info

  - name: Check that no no-psp Pods exist
    fail:
      msg: "The pod {{ item.metadata.name }} exists, it should've been forbidden by policy (annotations: {{ item.metadata.annotations | default([]) }})."
    loop: "{{ pod_info.resources }}"
    when: "item.metadata.name.startswith('failing-job-no-psp-')"

  - name: Check that no psp-mismatch Pods exist
    fail:
      msg: "The pod {{ item.metadata.name }} exists, it should've been forbidden by policy (annotations: {{ item.metadata.annotations }})."
    loop: "{{ pod_info.resources }}"
    when: "item.metadata.name.startswith('failing-job-psp-mismatch-')"

  - name: Clean up resources
    k8s:
      definition: "{{ lookup('template', item) }}"
      state: absent
      wait: yes
    loop:
    - "failing-job-no-psp.yaml"
    - "failing-job-psp-mismatch.yaml"
    - "succeeding-job.yaml"
    - "psp.yaml"
    - "namespace.yaml"
    tags:
    - test-cleanup
