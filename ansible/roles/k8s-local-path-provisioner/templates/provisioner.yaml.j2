---
{{ _auto_generated_preamble }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-path-provisioner-service-account
  namespace: {{ k8s_local_storage_dynamic_namespace | to_json }}
  labels:
    app.kubernetes.io/name: local-path
    app.kubernetes.io/instance: local-path
    app.kubernetes.io/version: {{ k8s_local_storage_dynamic_version | to_json }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: local-path-provisioner-role
  labels:
    app.kubernetes.io/name: local-path
    app.kubernetes.io/instance: local-path
    app.kubernetes.io/version: {{ k8s_local_storage_dynamic_version | to_json }}
rules:
  - apiGroups: [ "" ]
    resources: [ "nodes", "persistentvolumeclaims", "configmaps" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources: [ "endpoints", "persistentvolumes", "pods" ]
    verbs: [ "*" ]
  - apiGroups: [ "" ]
    resources: [ "events" ]
    verbs: [ "create", "patch" ]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "storageclasses" ]
    verbs: [ "get", "list", "watch" ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-path-provisioner-bind
  labels:
    app.kubernetes.io/name: local-path
    app.kubernetes.io/instance: local-path
    app.kubernetes.io/version: {{ k8s_local_storage_dynamic_version | to_json }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
  - kind: ServiceAccount
    name: local-path-provisioner-service-account
    namespace: {{ k8s_local_storage_dynamic_namespace | to_json }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-path-provisioner
  namespace: {{ k8s_local_storage_dynamic_namespace | to_json }}
  labels:
    app.kubernetes.io/name: local-path
    app.kubernetes.io/instance: local-path
    app.kubernetes.io/version: {{ k8s_local_storage_dynamic_version | to_json }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-path-provisioner
  template:
    metadata:
      labels:
        app: local-path-provisioner
    spec:
      serviceAccountName: local-path-provisioner-service-account
{% if k8s_local_storage_dynamic_nodeplugin_toleration %}
      tolerations:
        - operator: Exists
{% if k8s_local_storage_dynamic_nodeplugin_toleration != True %}
          key: {{ k8s_local_storage_dynamic_nodeplugin_toleration | to_json }}
{% endif %}
{% endif %}
      containers:
        - name: local-path-provisioner
          image: rancher/local-path-provisioner:{{ k8s_local_storage_dynamic_version }}
          imagePullPolicy: IfNotPresent
          command:
            - local-path-provisioner
            - --debug
            - start
            - --config
            - /etc/config/config.json
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config/
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      volumes:
        - name: config-volume
          configMap:
            name: local-path-config

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: local-path-config
  namespace: {{ k8s_local_storage_dynamic_namespace | to_json }}
  labels:
    app.kubernetes.io/name: local-path
    app.kubernetes.io/instance: local-path
    app.kubernetes.io/version: {{ k8s_local_storage_dynamic_version | to_json }}
data:
  config.json: |-
    {
            "nodePathMap":[
            {
                    "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                    "paths":["{{ k8s_local_storage_dynamic_data_directory }}"]
            }
            ]
    }
  setup: |-
    #!/bin/sh
    while getopts "m:s:p:" opt
    do
        case $opt in
            p)
            absolutePath=$OPTARG
            ;;
            s)
            sizeInBytes=$OPTARG
            ;;
            m)
            volMode=$OPTARG
            ;;
        esac
    done

    mkdir -m 0777 -p -- ${absolutePath}
  teardown: |-
    #!/bin/sh
    while getopts "m:s:p:" opt
    do
        case $opt in
            p)
            absolutePath=$OPTARG
            ;;
            s)
            sizeInBytes=$OPTARG
            ;;
            m)
            volMode=$OPTARG
            ;;
        esac
    done

    rm -rf -- ${absolutePath}
  helperPod.yaml: |-
    apiVersion: v1
    kind: Pod
    metadata:
      name: helper-pod
    spec:
      containers:
      - name: helper-pod
        image: busybox
        imagePullPolicy: IfNotPresent
