#jinja2:lstrip_blocks: True
#!/usr/sbin/nft -f

flush ruleset

define wan = eth0
define wg = wg0
define wg_port = {{ vpn_port }}
define k8s_port = {{ k8s_apiserver_frontend_port }}
define haproxy_stats_port = {{ haproxy_stats_port }}
define ipsec_port = 500
define ipsec_nat_port = 4500
define haproxy_prom_metrics_port = 9101
define keepalived_prom_metrics_port = 9650
define node_exporter_metrics_port = 9100

{% if monitoring_ch_global_monitoring %}
define ch_global_monitoring_port = {{ monitoring_ch_global_monitoring_nodeport }}
{% endif %}

table inet filter {
    set tcp_internal_accepted {
        type inet_service; flags interval;
        elements = {
{% if monitoring_ch_global_monitoring %}
            $ch_global_monitoring_port,
{% endif %}
            $k8s_port,
            $haproxy_prom_metrics_port,
            $haproxy_stats_port,
            $keepalived_prom_metrics_port,
            $node_exporter_metrics_port
        }
    }

    set tcp_mapped_accepted {
        type inet_service; flags interval;
        {% if lb_ports %}
        elements = {
            {% for port in lb_ports %}
                {% if port is mapping %}
                        {{ port.external }},
                {% else %}
                        {{ port }},
                {% endif %}
            {% endfor %}
        }
        {% endif %}
    }

    set udp_accepted {
        type inet_service; flags interval;
        elements = {
            $wg_port,
            $ipsec_port,
            $ipsec_nat_port
        }
    }

    chain base_checks {
        ct state invalid drop comment "Drop invalid connections"
        ct state {established, related} accept comment "Accept traffic originating from us"
    }

    chain input {
        type filter hook input priority 0; policy drop;
        iif lo accept comment "Accept any localhost traffic"

        jump base_checks

        tcp dport ssh accept comment "Accept SSH connections from anywhere"

        tcp dport @tcp_internal_accepted ip saddr { {{ priv_ip_cidr }}, {{ wg_ip_cidr }} }  accept comment "Accept connections to internal services from private subnet"

        tcp dport @tcp_mapped_accepted accept comment "Accept connections to nodeport mapped services from anywhere"

        udp dport @udp_accepted accept comment "Accept wireguard traffic from anywhere"

        ip protocol icmp counter accept
        ip protocol vrrp counter accept
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        jump base_checks

        iifname $wg oifname $wan ct state new counter accept;

        # Note sure if we want to limit the subnet here
        meta secpath exists iifname $wan oifname $wan ip saddr {{ ipsec_virtual_subnet_pool }} ct state new counter accept;

    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}

table ip nat {
    chain postrouting {
        type nat hook postrouting priority 100;
    }

    chain prerouting {
        type nat hook prerouting priority 100;
    }
}

include "/var/lib/ch-k8s-lbaas-agent/nftables/*.conf"

table ip nat {
    chain postrouting {
        masquerade;
    }
}
