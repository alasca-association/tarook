- name: Deploy calico/node
  vars:
    typhaca_crt_path: "{{ etc_dir }}/typhaca.crt"
    typhaca_key_path: "{{ etc_dir }}/typhaca.key"
    calico_node_crt_path: "{{ etc_dir }}/calico-node.crt"
    calico_node_csr_path: "{{ etc_dir }}/calico-node.csr"
    calico_node_key_path: "{{ etc_dir }}/calico-node.key"
  block:
  - name: Generate a new OpenSSL private key for calico/node
    delegate_to: localhost
    community.crypto.openssl_privatekey:
      mode: 0600
      path: "{{ calico_node_key_path }}"
      size: 4096
      force: yes # regenerate the key even if it exists. leads to a new key on every run

  - name: Generate a new OpenSSL Certificate Signing Request (CSR) for calico/node
    delegate_to: localhost
    community.crypto.openssl_csr:
      mode: 0664
      path: "{{ calico_node_csr_path }}"
      privatekey_path: "{{ calico_node_key_path }}"
      common_name: calico-node
      subject:
        CN: calico-node
      basic_constraints:
        - CA:TRUE
      force: yes # force regeneration of certificate signing request

  - name: Generate/Sign a new OpenSSL Certificate Signing Request for calico/node
    delegate_to: localhost
    community.crypto.x509_certificate:
      mode: 0664
      path: "{{ calico_node_crt_path }}"
      csr_path: "{{ calico_node_csr_path }}"
      ownca_path: "{{ typhaca_crt_path }}"
      ownca_privatekey_path: "{{ typhaca_key_path }}"
      entrust_not_after: "+365d"
      provider: ownca
      force: yes # force regeneration of certificate

  - name: Apply new calico/node secret with calico/node private key and crt
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      apply: yes
      definition:
        apiVersion: v1
        data:
          calico-node.crt: "{{ lookup('file', calico_node_crt_path) | b64encode }}"
          calico-node.key: "{{ lookup('file', calico_node_key_path) | b64encode }}"
        kind: Secret
        metadata:
          name: calico-node-certs
          namespace: kube-system
      validate:
        fail_on_error: yes
        strict: yes

  # Provision RBAC
  - name: Create ServiceAccount for calico/node, configure RBAC, ClusterRole, ClusterRoleBinding
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      state: "present"
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - calico-node-serviceaccount.yaml

  - name: Create calico/node PodSecurityPolicy
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      state: present
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - calico-node-psp.yaml

  - name: Check if calico/node DaemonSet exists
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s_info:
      api_version: v1
      kind: DaemonSet
      name: calico-node
      namespace: kube-system
    register: calico_node_daemonset_presence # check if this is a rerun. then we need to rollout restart

  # Install Daemon-Set
  # Felix: - Calico per-node daemon
  # BIRD: - Distribution of routing information via the BGP protocol
  # confd: - watches Calico datastore for config changes and updates BIRDs config files
  - name: Deploy Calico node DaemonSet
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      apply: yes
      definition: "{{ lookup('template', item) }}"
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - calico-node-daemonset.yaml.j2

  # We need to restart the calico/node Pods on a rerun, because the keys and certificates are updated
  - name: Restart calico/node Pods
    when: calico_node_daemonset_presence.resources
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - rollout
        - restart
        - ds
        - calico-node
        - -n
        - kube-system

  - name: Wait for Rollout Restart of calico/node Pods to finish
    when: calico_node_daemonset_presence.resources
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - rollout
        - status
        - ds
        - calico-node
        - -n
        - kube-system

  - name: Give k8s time to terminate remaining calico/node Pods
    when: calico_node_daemonset_presence.resources
    pause:
      seconds: 15

  - name: Wait for calico/node Pods to get Ready
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - wait
        - -n
        - kube-system
        - -l
        - app.kubernetes.io/name=calico,app.kubernetes.io/component=calico-node
        - --for=condition=Ready
        - pods
        - --timeout=120s
