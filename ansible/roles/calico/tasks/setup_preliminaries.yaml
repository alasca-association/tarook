# If you plan to upgrade calico resources:
# curl https://docs.projectcalico.org/manifests/calico.yaml -O
# Make sure to only apply the CustomResourceDefinitions

- name: Create Custom Calico Resource Definitions
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  k8s:
    definition: "{{ lookup('file', item) }}"
    apply: yes
    state: present
    validate:
      fail_on_error: yes
      strict: yes
  loop:
  - calico-crds.yaml

- name: Check local presence of calico-kubeconfig certificate
  block:
  - name: Check if calico-kubeconfig private key is locally present
    delegate_to: localhost
    stat:
      path: "{{ calico_cni_key_path }}"
    register: calico_cni_key_local

  - name: Check if calico-kubeconfig signed certificate is locally present
    delegate_to: localhost
    stat:
      path: "{{ calico_cni_crt_path }}"
    register: calico_cni_crt_local

  - name: Fail if certificate but private key does not exist for calico-kubeconfig
    fail:
      msg: "### WARNING ###\nThe certificate of calico-kubeconfig is locally present, but not the private key!"
    when: calico_cni_crt_local.stat.exists and not calico_cni_key_local.stat.exists

- name: Validate local calico-kubeconfig crt on expiration
  when: calico_cni_crt_local.stat.exists
  block:
  - name: Collect expiration information of the calico-kubeconfig crt
    delegate_to: localhost
    openssl_certificate_info:
      path: "{{ calico_cni_crt_path }}"
      valid_at:
        point_1: "+104w"
        point_2: "+52w"
    register: calico_cni_crt_valid

  # ToDo send a notification
  - name: Warn if the calico-kubeconfig crt expires in less than 2 years from now
    debug:
      msg: "### WARNING ###\nThe calico-kubeconfig certificate expires in less than 2 years from now"
    when: not calico_cni_crt_valid.valid_at.point_1

  - name: Warn if the calico-kubeconfig crt expires in less than 1 year from now
    debug:
      msg: "### WARNING ###\nThe calico-kubeconfig certificate expires in less than 1 year from now"
    when: not calico_cni_crt_valid.valid_at.point_2

- name: Create calico-kubeconfig and push it to all nodes
  become: no
  environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  block:
    - name: Regenerate (force) private key of calico-kubeconfig if it is short to expire
      when: not (calico_cni_crt_valid.valid_at.point_2 | default('false'))
      delegate_to: localhost
      openssl_privatekey:
        path: "{{ calico_cni_crt_path }}"
        mode: 0600
        size: 4096
        force: yes

    - name: Generate private key for CA certificate of calico-kubeconfig
      delegate_to: localhost
      openssl_privatekey:
        mode: 0600
        path: "{{ calico_cni_key_path }}"
        size: 4096

    - name: Generate Certificate Signing Request for calico-kubeconfig
      delegate_to: localhost
      openssl_csr:
        mode: 0664
        path: "{{ calico_cni_csr_path }}"
        privatekey_path: "{{ calico_cni_key_path }}"
        common_name: calico-cni
        subject:
          CN: calico-cni

    - name: Sign the Certificate Signing Request for calico-kubeconfig
      delegate_to: localhost
      openssl_certificate:
        mode: 0664
        path: "{{ calico_cni_crt_path }}"
        csr_path: "{{ calico_cni_csr_path }}"
        ownca_path: "{{ own_ca_crt_path }}"
        ownca_privatekey_path: "{{ own_ca_key_path }}"
        entrust_not_after: "+3653d"
        provider: ownca

    - name: Ensure that /etc/cni/net.d/ exists on all k8s_nodes
      become: yes
      delegate_to: "{{ item }}"
      file:
        owner: root
        group: root
        mode: 0640
        path: /etc/cni/net.d/
        state: directory
      loop: "{{ groups['k8s_nodes'] }}"

    - name: Push calico-kubeconfig from localhost to k8s_nodes
      become: yes
      delegate_to: "{{ item }}"
      template:
        owner: root
        group: root
        mode: 0400
        src: "calico-kubeconfig.j2"
        dest: /etc/cni/net.d/calico-kubeconfig
      loop: "{{ groups['k8s_nodes'] }}"

- name: Create user for calico-cni, configure RBAC and create RoleBinding
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  k8s:
    definition: "{{ lookup('file', item) }}"
    apply: yes
    state: "present"
    validate:
      fail_on_error: yes
      strict: yes
  loop:
    - calico-cni-user.yaml
