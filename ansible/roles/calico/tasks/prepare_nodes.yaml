# If you plan to upgrade calico resources:
# curl https://docs.projectcalico.org/manifests/calico.yaml -O

# These tasks also install calicoctl. calicoctl is currently necessary to configure
# Calico specific resources as the Calico CRDs are not designed to 
# be used directly by kubectl. Please refer to the following issue:
# https://github.com/projectcalico/calico/issues/2923

- name: Configure Calico Resources
  run_once: true
  become: yes
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  k8s:
    definition: "{{ lookup('file', item) }}"
    apply: yes
    state: present
    validate:
      fail_on_error: yes
      strict: yes
  loop:
    - calico-crds.yaml

- name: Provision Kubernetes user account for the calico cni plugin
  become: yes
  run_once: yes
  environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
  block:
    - name: Generate calico-cni key
      openssl_privatekey:
        owner: root
        group: root
        mode: 0600
        path: /etc/kubernetes/pki/cni.key
        size: 4096

    #- name: copy calico-cni key to localhost
    #  delegate_to: localhost
    #  become: no
    #  copy:
    #    src: "/etc/kubernetes/pki/cni.key"
    #    dest: "{{ etc_dir }}/calico-cni-key"

    - name: CSR for calico-cni key
      openssl_csr:
        owner: root
        group: root
        mode: 0600
        path: /etc/kubernetes/pki/cni.csr
        privatekey_path: /etc/kubernetes/pki/cni.key
        common_name: calico-cni
        subject:
          CN: calico-cni

    - name: Sign the calico-cni csr
      openssl_certificate:
        owner: root
        group: root
        mode: 0600
        path: /etc/kubernetes/pki/cni.crt
        csr_path: /etc/kubernetes/pki/cni.csr
        ownca_path: /etc/kubernetes/pki/ca.crt
        ownca_privatekey_path: /etc/kubernetes/pki/ca.key
        entrust_not_after: "+365d"
        provider: ownca

    - name: Ensure that /etc/cni/net.d/ exists
      delegate_to: "{{ item }}"
      become: yes
      file:
        owner: root
        group: root
        mode: 0750
        path: /etc/cni/net.d/
        state: directory
      loop: "{{ groups['k8s_nodes'] }}"

    - name: Set cluster Kubernetes
      command: "kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs=true --server=https://[{{ networking_fixed_ip }}]:{{ k8s_apiserver_frontend_port }} --kubeconfig=/etc/cni/net.d/calico-kubeconfig" # noqa 204
    - name: Set calico-cni credentials
      command:
        argv:
        - kubectl
        - config
        - set-credentials
        - calico-cni
        - --client-certificate=/etc/kubernetes/pki/cni.crt
        - --client-key=/etc/kubernetes/pki/cni.key
        - --embed-certs=true
        - --kubeconfig=/etc/cni/net.d/calico-kubeconfig

    - name: Set calico-cni context
      command:
        argv:
        - kubectl
        - config
        - set-context
        - default
        - --cluster=kubernetes
        - --user=calico-cni
        - --kubeconfig=/etc/cni/net.d/calico-kubeconfig

    - name: Set use config
      command:
        argv:
          - kubectl
          - config
          - use-context
          - default
          - --kubeconfig=/etc/cni/net.d/calico-kubeconfig
    
    - name: Fetch calico-kubeconfig from the initial master to localhost
      become: yes
      fetch:
        src: /etc/cni/net.d/calico-kubeconfig
        dest: "{{ etc_dir }}/"
        flat: yes
      run_once: yes

    - name: Push calico-kubeconfig from localhost to k8s_nodes
      become: yes
      delegate_to: "{{ item }}"
      copy:
        owner: root
        group: root
        mode: 0400
        src: "{{ etc_dir }}/calico-kubeconfig"
        dest: /etc/cni/net.d/calico-kubeconfig
      loop: "{{ groups['k8s_nodes'] }}" # ToDo: also store keys locally and distribute them to masters
    
    # just to be sure
    - name: Restrict access to /etc/cni/net.d/calico-kubeconfig
      delegate_to: "{{ item }}"
      file:
        path: /etc/cni/net.d/calico-kubeconfig
        owner: root
        group: root
        mode: 0400
      loop: "{{ groups['k8s_nodes'] }}"

- name: Configure Calico RBAC
  run_once: true
  become: yes
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  k8s:
    definition: "{{ lookup('file', item) }}"
    apply: yes
    state: present
    validate:
      fail_on_error: yes
      strict: yes
  loop:
    - calico-rbac.yaml

- name: Install and configure Calico CNI Plugin binaries
  become: yes
  block:
    - name: Install calicoctl
      delegate_to: "{{ item }}"
      get_url:
        owner: root
        group: root
        mode: 0750
        # cannot use to_json on the calico.version
        url: "https://github.com/projectcalico/calicoctl/releases/download/v{{ calico.version }}/calicoctl-linux-amd64"
        dest: /usr/local/bin/calicoctl
      loop: "{{ groups['masters'] }}"

    - name: Ensure that /opt/cni/bin/ exists
      delegate_to: "{{ item }}"
      file:
        owner: root
        group: root
        mode: 0750
        recurse: yes
        path: /opt/cni/bin/
        state: directory
      loop: "{{ groups['k8s_nodes'] }}"

    - name: Install calico
      delegate_to: "{{ item }}"
      get_url:
        owner: root
        group: root
        mode: 0750
        url: "https://github.com/projectcalico/cni-plugin/releases/download/v{{ calico.version }}/calico-amd64" # cannot use to_json on the calico.version
        dest: /opt/cni/bin/calico
      loop: "{{ groups['k8s_nodes'] }}"

    - name: Install calico-ipam
      delegate_to: "{{ item }}"
      get_url:
        owner: root
        group: root
        mode: 0750
        url: "https://github.com/projectcalico/cni-plugin/releases/download/v{{ calico.version }}/calico-ipam-amd64" # cannot use to_json on the calico.version
        dest: /opt/cni/bin/calico-ipam
      loop: "{{ groups['k8s_nodes'] }}"

- name: Activate k8s Calico CNI plugin
  become: yes
  delegate_to: "{{ item }}"
  copy:
    owner: root
    group: root
    mode: 0600
    src: 10-calico.conflist
    dest: /etc/cni/net.d/10-calico.conflist
  loop: "{{ groups['k8s_nodes'] }}"
