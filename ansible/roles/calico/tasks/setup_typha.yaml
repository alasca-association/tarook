- name: Deploy Typha
  become: yes
  block:
  # TODO: we should protect this with a password and store it in a more secure place
  # We will use mutually authenticated TLS to ensure that calico/node and Typha communicate securely
  # We generate a certificate authority (CA) and use it to sign a certificate for Typha.
  - name: Ensure that /etc/kubernetes/pki/typha exists
    file:
      path: /etc/kubernetes/pki/typha
      state: directory
      mode: 0600
      owner: root
      group: root

  - name: Generate OpenSSL private key for CA certificate of Typha
    openssl_privatekey:
      path: /etc/kubernetes/pki/typha/typhaca.key
      mode: 0600
      owner: root
      group: root
      size: 4096
      force: yes # regenerate the key even if it exists. leads to a new key on every run

  - name: Generate OpenSSL Certificate Signing Request (CSR) for CA certificate of Typha
    openssl_csr:
      path: /etc/kubernetes/pki/typha/typhaca.csr
      privatekey_path: /etc/kubernetes/pki/typha/typhaca.key
      common_name: "Calico Typha CA"
      subject:
        CN: "Calico Typha CA"
      basic_constraints:
        - CA:TRUE
      group: root
      owner: root
      mode: 0600
      force: yes # force regeneration of certificate signing request

  - name: Sign OpenSSL Certificate Signing Request (CSR) for CA certificate of Typha
    openssl_certificate:
      path: /etc/kubernetes/pki/typha/typhaca.crt
      privatekey_path: /etc/kubernetes/pki/typha/typhaca.key
      csr_path: /etc/kubernetes/pki/typha/typhaca.csr
      provider: selfsigned
      group: root
      owner: root
      mode: 0600
      force: yes # generate the certificate even if it already exists

  # Store the CA in a ConfigMap that Typha & calico/node will access
  # kubectl apply needs a yaml and does not work out-of-the-box with configmaps in the cli
  # because the yaml depends on the typha crt, we do create it via a dry-run
  - name: Create/Generate ConfigMap YAML for the Typha CA certificate
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - create
        - configmap
        - -n
        - kube-system
        - calico-typha-ca
        - --from-file=/etc/kubernetes/pki/typha/typhaca.crt
        - --dry-run=client
        - -o
        - yaml
        - --save-config
    register: typha_ca_configmap_yaml

  - name: Apply generated ConfigMap YAML for the Typha CA certificate
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - apply
        - --filename=-
      stdin: "{{ typha_ca_configmap_yaml.stdout }}"

  - name: Fetch Typha CA key from initial master to localhost
    fetch:
      src: "/etc/kubernetes/pki/typha/typhaca.key"
      dest: "{{ etc_dir }}/"
      flat: yes

  - name: Fetch Typha CA crt from the initial master to localhost
    fetch:
      src: "/etc/kubernetes/pki/typha/typhaca.crt"
      dest: "{{ etc_dir }}/"
      flat: yes

  # Create the Typha key and certificate signing request (CSR)
  - name: Generate OpenSSL private key for Typha
    openssl_privatekey:
      owner: root
      group: root
      mode: 0600
      path: /etc/kubernetes/pki/typha/typha.key
      size: 4096
      force: yes # force generation even if it already exists

  # The certificate presents the Common Name (CN) as calico-typha. 
  # calico/node will be configured to verify this name.
  - name: Generate OpenSSL Certificate Signing Request (CSR) for Typha
    openssl_csr:
      owner: root
      group: root
      mode: 0600
      path: /etc/kubernetes/pki/typha/typha.csr
      privatekey_path: /etc/kubernetes/pki/typha/typha.key
      common_name: calico-typha
      subject:
        CN: calico-typha
      basic_constraints:
        - CA:TRUE
      force: yes # force the regeneration of the certificate signing request

  - name: Generate/Sign OpenSSl Certificate for Signing Request of Typha
    openssl_certificate:
      owner: root
      group: root
      mode: 0600
      path: /etc/kubernetes/pki/typha/typha.crt
      csr_path: /etc/kubernetes/pki/typha/typha.csr
      ownca_path: /etc/kubernetes/pki/typha/typhaca.crt
      ownca_privatekey_path: /etc/kubernetes/pki/typha/typhaca.key
      entrust_not_after: "+365d"
      provider: ownca
      force: yes # Generate the certificate even if it already exists

  - name: Create/Generate Secret YAML for signed Typha certificate
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - create
        - secret
        - generic
        - -n
        - kube-system
        - calico-typha-certs
        - --from-file=/etc/kubernetes/pki/typha/typha.key
        - --from-file=/etc/kubernetes/pki/typha/typha.crt
        - -o
        - yaml
        - --dry-run=client
        - --save-config
    register: secret_typha_certs_yaml

  - name: Apply generated Secret YAML for signed Typha certificate
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - apply
        - --filename=-
      stdin: "{{ secret_typha_certs_yaml.stdout }}"

  - name: Fetch Typha key from initial master to localhost
    fetch:
      src: "/etc/kubernetes/pki/typha/typha.key"
      dest: "{{ etc_dir }}/"
      flat: yes

  - name: Fetch Typha crt from the initial master to localhost
    fetch:
      src: "/etc/kubernetes/pki/typha/typha.crt"
      dest: "{{ etc_dir }}/"
      flat: yes

  - name: Create ServiceAccount for calico-typha, configure RBAC, ClusterRole, ClusterRoleBinding
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      state: "present"
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - typha-serviceaccount.yaml

  - name: Create Typha PodSecurityPolicy
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      state: "present"
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - typha-psp.yaml

  - name: Create/Generate Cluster-Role-Binding YAML for the calico-typha ServiceAccount
    become: yes
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - create
        - clusterrolebinding
        - calico-typha
        - --clusterrole=calico-typha
        - --serviceaccount=kube-system:calico-typha
        - -o
        - yaml
        - --dry-run=client
        - --save-config
    register: clusterrolebinding_calico_typha_yaml
  
  - name: Apply generated Cluter-Role-Binding YAMl for the calico-typha ServiceAccount
    become: yes
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - apply
        - --filename=-
      stdin: "{{ clusterrolebinding_calico_typha_yaml.stdout }}"

  - name: Deploy Typha deployment
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('template', item) }}"
      apply: yes
      validate:
        fail_on_error: yes
        strict: yes
    loop:
    - typha-deployment.yaml.j2

  - name: Deploy Typha service
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      validate:
        fail_on_error: yes
        strict: yes
    loop:
    - typha-service.yaml

  - name: Wait for Typha Pods to get ready
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - wait
        - -n
        - kube-system
        - -l
        - k8s-app=calico-typha
        - --for=condition=Ready
        - pods
        - --timeout=120s

# TODO: Validate that Typha is using TLS?
# https://docs.projectcalico.org/getting-started/kubernetes/hardway/install-typha#install-service
