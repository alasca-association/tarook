- name: Check local and remote presence of Typha CA
  block:
  - name: Check if Typha CA private key is locally present
    delegate_to: localhost
    stat:
      path: "{{ etc_dir }}/typhaca.key"
    register: typhaca_material_key_local

  - name: Check if Typha CA crt is locally present
    delegate_to: localhost
    stat:
      path: "{{ etc_dir }}/typhaca.crt"
    register: typhaca_material_crt_local

  - name: Check if Typha CA configmap is present
    become: yes
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s_info:
      api_version: v1
      kind: ConfigMap
      name: calico-typha-ca
      namespace: kube-system
    register: typhaca_configmap

- name: Validate local Typha CA on expiration
  when: typhaca_material_crt_local.stat.exists
  block:
  - name: Collect Expiration information of the Typha CA crt
    vars:
      typhaca_path: "{{ etc_dir }}/typhaca.crt"
    delegate_to: localhost
    openssl_certificate_info:
      path: "{{ typhaca_path }}"
      valid_at:
        point_1: "+52w"
        point_2: "+104w"
    register: typhaca_valid

  # ToDo send a notification
  - name: Warn if the Typha CA crt expires in less than 2 years from now
    debug:
      msg: "### WARNING ###\nThe Typha CA certificate expires in less than 2 years from now"
    when: not typhaca_valid.valid_at.point_1

  - name: Warn if the Typha CA crt expires in less than 1 year from now
    debug:
      msg: "### ERROR ####\nThe Typha CA certificate expires in less than 1 year from now.\nGenerating a new CA certificate now."
    when: not typhaca_valid.valid_at.point_2

- name: Validate local Typha CA against Typha CA in ConfigMap
  when: typhaca_material_crt_local.stat.exists and typhaca_configmap.resources
  block:
  - name: Check that local Typha CA equals the one in the ConfigMap
    vars:
     typha_ca_local_content: "{{ lookup('file', '{{ etc_dir }}/typhaca.crt') | trim | to_json }}"
     typha_ca_configmap_content: "{{ typhaca_configmap.resources[0].data['typhaca.crt'] | trim | to_json }}"
    debug:
      msg: "The local Typha CA and the one in the ConfigMap do equal!"
    when: typha_ca_configmap_content == typha_ca_local_content
    register: typha_ca_local_remote_equality

  - name: Fail if the local Typha CA and the one in the ConfigMap do not match
    fail:
      msg: "The local Typha CA and the one in the ConfigMap do not equal!"
    when: not typha_ca_local_remote_equality

- name: Generate a new Typha CA
  become: no
  when: not typhaca_material_key_local.stat.exists or not typhaca_material_crt_local.stat.exists or not typhaca_valid.valid_at.point_2
  vars:
    typhaca_crt_path: "{{ etc_dir }}/typhaca.crt"
    typhaca_key_path: "{{ etc_dir }}/typhaca.key"
    typhaca_csr_path: "{{ etc_dir }}/typhaca.csr"
  block:
  # TODO: we should protect this with a password and store it in a more secure place
  # We will use mutually authenticated TLS to ensure that calico/node and Typha communicate securely
  # We generate a certificate authority (CA) and use it to sign a certificate for Typha.
  - name: Generate OpenSSL private key for CA certificate of Typha
    delegate_to: localhost
    openssl_privatekey:
      path: "{{ typhaca_key_path }}"
      mode: 0600
      size: 4096
      force: yes # regenerate the key even if it exists. leads to a new key on every run

  - name: Generate OpenSSL Certificate Signing Request (CSR) for CA certificate of Typha
    delegate_to: localhost
    openssl_csr:
      path: "{{ typhaca_csr_path }}"
      privatekey_path: "{{ typhaca_key_path }}"
      common_name: "Calico Typha CA"
      subject:
        CN: "Calico Typha CA"
      basic_constraints:
        - CA:TRUE
      mode: 0664
      force: yes # force regeneration of certificate signing request

  - name: Sign OpenSSL Certificate Signing Request (CSR) for CA certificate of Typha
    delegate_to: localhost
    openssl_certificate:
      path: "{{ typhaca_crt_path }}"
      privatekey_path: "{{ typhaca_key_path }}"
      csr_path: "{{ typhaca_csr_path }}"
      provider: selfsigned
      mode: 0664
      force: yes # generate the certificate even if it already exists
      entrust_not_after: "+3653d"

- name: Deploy Typha
  vars:
    typhaca_crt_path: "{{ etc_dir }}/typhaca.crt"
    typhaca_key_path: "{{ etc_dir }}/typhaca.key"
    typha_crt_path: "{{ etc_dir }}/typha.crt"
    typha_csr_path: "{{ etc_dir }}/typha.csr"
    typha_key_path: "{{ etc_dir }}/typha.key"
  block:
  # Store Typha CA in ConfigMap
  - name: Apply local Typha CA certificate to ConfigMap
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      apply: yes
      definition:
        apiVersion: v1
        data:
          typhaca.crt: |
            {{ lookup('file', typhaca_crt_path) }}
        kind: ConfigMap
        metadata:
          name: calico-typha-ca
          namespace: kube-system
      validate:
        fail_on_error: yes
        strict: yes

  # Create the Typha key and certificate signing request (CSR)
  - name: Generate a new OpenSSL private key for Typha
    delegate_to: localhost
    openssl_privatekey:
      mode: 0600
      path: "{{ typha_key_path }}"
      size: 4096
      force: yes # force generation even if it already exists

  # The certificate presents the Common Name (CN) as calico-typha. 
  # calico/node will be configured to verify this name.
  - name: Generate a new OpenSSL Certificate Signing Request (CSR) for Typha
    delegate_to: localhost
    openssl_csr:
      mode: 0664
      path: "{{ typha_csr_path }}"
      privatekey_path: "{{ typha_key_path }}"
      common_name: calico-typha
      subject:
        CN: calico-typha
      basic_constraints:
        - CA:TRUE
      force: yes # force the regeneration of the certificate signing request

  - name: Generate/Sign a new OpenSSl Certificate for Signing Request of Typha
    delegate_to: localhost
    openssl_certificate:
      mode: 0664
      path: "{{ typha_crt_path }}"
      csr_path: "{{ typha_csr_path }}"
      ownca_path: "{{ typhaca_crt_path }}"
      ownca_privatekey_path: "{{ typhaca_key_path }}"
      entrust_not_after: "+365d"
      provider: ownca
      force: yes # Generate the certificate even if it already exists

  - name: Apply new Typha secret with Typha private key and crt
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      apply: yes
      definition:
        apiVersion: v1
        data:
          typha.crt: "{{ lookup('file', typha_crt_path) | b64encode }}"
          typha.key: "{{ lookup('file', typha_key_path) | b64encode }}"
        kind: Secret
        metadata:
          name: calico-typha-certs
          namespace: kube-system
      validate:
        fail_on_error: yes
        strict: yes

  - name: Create ServiceAccount for calico-typha, configure RBAC, ClusterRole, ClusterRoleBinding
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      state: "present"
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - typha-serviceaccount.yaml

  - name: Create Typha PodSecurityPolicy
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      state: "present"
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - typha-psp.yaml

  # check if this is a rerun. then we need to rollout restart
  - name: Check if Typha Deployment exists
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s_info:
      api_version: v1
      kind: Deployment
      name: calico-typha
      namespace: kube-system
    register: calico_typha_deployment_presence

  - name: Deploy Typha Deployment
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('template', item) }}"
      apply: yes
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - typha-deployment.yaml.j2

  - name: Deploy Typha service
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    k8s:
      definition: "{{ lookup('file', item) }}"
      apply: yes
      validate:
        fail_on_error: yes
        strict: yes
    with_items:
    - typha-service.yaml

  # We need to restart the Typha Pods on a rerun, because the keys and certificates are updated
  - name: Restart Typha Pods
    when: calico_typha_deployment_presence.resources
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - rollout
        - restart
        - deployment
        - calico-typha
        - -n
        - kube-system

  - name: Wait for Rollout Restart of Typha Pods to finish
    when: calico_typha_deployment_presence.resources
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - rollout
        - status
        - deployment
        - calico-typha
        - -n
        - kube-system

  - name: Give k8s time to terminate remaining Typha Pods
    when: calico_typha_deployment_presence.resources
    pause:
      seconds: 15

  - name: Wait for Typha Pods to get Ready
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    command:
      argv:
        - kubectl
        - wait
        - -n
        - kube-system
        - -l
        - app.kubernetes.io/name=calico,app.kubernetes.io/component=calico-typha
        - --for=condition=Ready
        - pods
        - --timeout=120s

# TODO: Validate that Typha is using TLS?
# https://docs.projectcalico.org/getting-started/kubernetes/hardway/install-typha#install-service
