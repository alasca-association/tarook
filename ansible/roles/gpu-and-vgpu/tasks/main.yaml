- name: Check if the node has kubernetes installed
  stat:
    path: "/etc/kubernetes"
  register: kubernetes_dir

- name: Install lspci
  become: yes
  package:
    name:
    - pciutils

- name: Copy the gpu discovery script to the host
  become: yes
  copy:
    src: "{{ role_path }}/files/check_pci.sh"
    dest: "{{ nvidia_working_dir }}/check_pci.sh"
    mode: u=rwx,go=rx
    owner: root
    group: root

- name: Detect (v)GPU presence
  become: yes
  command: "{{ nvidia_working_dir }}/check_pci.sh"
  register: gpu_test
  failed_when: gpu_test.rc == 2
  changed_when: false

- name: Set gpu fact
  set_fact:
    has_gpu: yes
  when: gpu_test.rc == 0

# A GPU as been detected
- name: Install GPU drivers
  become: yes
  when:
  - "has_gpu is defined"
  - "_allow_disruption or not kubernetes_dir.stat.exists"
  block:
  - name: Install deps for the nvidia drivers
    yum:
      name:
      - make
      - git
      - gcc
      - vim
      - pciutils
      - wget
      - gcc-c++
      - kernel-devel
      - elfutils-libelf-devel

  - name: Install virutal gpu driver
    when: is_virtual_gpu
    block:
    - name: Download the nvidia vgpu driver script on the host
      get_url:
        url: "{{ nvidia_object_store }}/{{ nvidia_vgpu_driver_name }}"
        dest: "{{ nvidia_working_dir }}/{{ nvidia_vgpu_driver_name }}"
        mode: '0755'

    # This step and the next reboot are intended to support replaying of 03_final after a kernel update
    - name: Uninstall potential currently installed nvidia vgpu driver (can take long)
      command: "{{ nvidia_working_dir }}/{{ nvidia_vgpu_driver_name }} --uninstall -s -q"

    - name: Reboot
      become: yes
      reboot:

    - name: Install nvidia vgpu driver (can take long)
      command: "{{ nvidia_working_dir }}/{{ nvidia_vgpu_driver_name }} -s -q"

    - name: Create the nvidia gridd conf
      copy:
        dest: "{{ nvidia_gridd_conf }}"
        content: |
          ServerAddress={{ ServerAddress }}
          ServerPort={{ ServerPort }}
          BackupServerAddress={{ BackupServerAddress }}
          BackupServerPort={{ BackupServerPort }}
          FeatureType={{ FeatureType }}
      register: nvidia_conf

    - name: Set permissions to the nvidia gridd conf
      become: yes
      file:
        path: "{{ nvidia_gridd_conf }}"
        mode: '0655'

    - name: Restart nvidia-gridd (can take long)
      systemd:
        enabled: yes
        state: restarted
        daemon_reload: yes
        name: nvidia-gridd
      when: nvidia_conf is changed


  - name: Install classic gpu driver
    when: not is_virtual_gpu
    block:
    - name: Download the nvidia classic driver script on the host
      get_url:
        url: "{{ nvidia_object_store }}/{{ nvidia_classic_driver_name }}"
        dest: "{{ nvidia_working_dir }}/{{ nvidia_classic_driver_name }}"
        mode: '0755'

    - name: Blacklist nouveau safely (we do not trust <classic driver> --disable-nouveau)
      copy:
        dest: /etc/modprobe.d/blacklist_nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modeset=0

    - name: Apply nouveau blacklisting
      command: "dracut -f -v"

    # This step and the next reboot are intended to support replaying of 03_final after a kernel update
    - name: Uninstall potential currently installed nvidia classic driver (can take long)
      command: "{{ nvidia_working_dir }}/{{ nvidia_classic_driver_name }} --uninstall -s -q"

    - name: Reboot
      become: yes
      reboot:

    - name: Install nvidia classic driver (can take long)
      command: "{{ nvidia_working_dir }}/{{ nvidia_classic_driver_name }} -s -q"

  - name: Reboot
    become: yes
    reboot:

  - name: Basic sanity check with nvidia-smi
    command: nvidia-smi





