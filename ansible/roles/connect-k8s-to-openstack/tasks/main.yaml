- name: Create cloud-config secret
  become: no
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  k8s:
    apply: yes
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      data:
        cloud.conf: "{{ lookup('template', 'os_cloud_config.ini') | b64encode }}"
      metadata:
        name: cloud-config
        namespace: kube-system
    validate:
      fail_on_error: yes
      strict: yes
  notify:
  - restart CCM

- name: Patch the K8s controller manager to mount the cloud-config
  script: "{{ playbook_dir }}/utils/patch_kube_controller.py -i -f /etc/kubernetes/manifests/kube-controller-manager.yaml"
  args:
    executable: python3

- name: Force restart of kube-controller-manager
  become: no
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: kube-system
    name: "kube-controller-manager-{{ inventory_hostname }}"
    wait: no
    validate:
      fail_on_error: yes
      strict: yes

- name: Start the OpenStack Cloud Controller manager
  become: no
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  block:
    - name: Prepare PodSecurityPolicy configuration
      k8s:
        state: "{{ k8s_use_podsecuritypolicies | ternary('present', 'absent') }}"
        apply: yes
        definition: "{{ lookup('file', 'psp.yaml') }}"
        validate:
          fail_on_error: yes
          strict: yes

    - name: Deploy the CCM and its RBAC
      k8s:
        state: present
        apply: yes
        definition: "{{ lookup('template', item) }}"
        validate:
          fail_on_error: yes
          strict: yes
      loop:
      - controller-manager/openstack-cloud-controller-manager-ds.yaml
      - rbac/cloud-controller-manager-roles.yaml
      - rbac/cloud-controller-manager-role-bindings.yaml

    - name: Start the Cinder CSI driver plugin
      k8s:
        state: present
        apply: yes
        definition: "{{ lookup('template', 'cinder-csi-plugin/' + item) }}"
        validate:
          fail_on_error: yes
          strict: yes
      loop:
      - cinder-csi-controllerplugin-rbac.yaml
      - cinder-csi-controllerplugin.yaml
      - cinder-csi-nodeplugin-rbac.yaml
      - cinder-csi-nodeplugin.yaml

    - name: Create cinder storage class (hdd)
      k8s:
        state: present
        apply: yes
        definition: "{{ lookup('file', 'cinder_storage_class.yaml') }}"
        validate:
          fail_on_error: yes
          strict: yes

    - name: Create cinder storage class (nvme)
      when: openstack_cinder_nvme
      k8s:
        state: present
        apply: yes
        definition: "{{ lookup('file', 'cinder_nvme_storage_class.yaml') }}"
        validate:
          fail_on_error: yes
          strict: yes

- name: Start the Octavia Ingress Controller
  when: openstack_lbaas_ingress
  become: no
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  tags:
  - openstack-lbaas
  block:
    - name: Configure Ingress Controller
      k8s:
        apply: yes
        definition:
          apiVersion: v1
          kind: Secret
          type: Opaque
          data:
            octavia-ingress-controller-config.yaml: "{{ lookup('template', 'octavia-ingress-controller/config.yaml') | b64encode }}"
          metadata:
            name: octavia-ingress-controller-config
            namespace: kube-system
        state: present
        validate:
          fail_on_error: yes
          strict: yes
      notify:
      - restart octavia-ingress-controller

    - name: Deploy Ingress Controller
      k8s:
        apply: yes
        state: present
        definition: "{{ lookup('template', item) }}"
        validate:
          fail_on_error: yes
          strict: yes
      loop:
      - octavia-ingress-controller/rbac.yaml
      - octavia-ingress-controller/controller.yaml
