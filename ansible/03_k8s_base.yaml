- name: Initial sanity checks
  hosts: localhost
  gather_facts: false
  roles:
    - validate_configuration

- name: Initial node bootstrap
  hosts: k8s_nodes
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  roles:
  - detect_user
  - role: ssh-known-hosts
    tags: ssh-known-hosts
  - role: prepare-node
    tags: prepare-node
  - role: journald
    tags: journald
  - role: is-k8s-installed
    tags: update_system
  - role: configure-automatic-system-updates
    tags: configure-automatic-system-updates
  - role: monitoring-system-update-status
    tags: monitoring-system-update-status
  - role: disable-swap
    tags: disable-swap

- name: Harden SSH
  hosts: k8s_nodes
  become: yes
  collections:
  - devsec.hardening
  roles:
  - role: devsec.hardening.ssh_hardening
    tags: harden-ssh

- name: Upgrade the system
  hosts: node_with_k8s_installed
  gather_facts: false
  serial: 1
  vars_files:
  - vars/disruption.yaml
  roles:
    - kubeadm-drain-node
    - update_system
    - kubeadm-uncordon-node
  tags:
    - update_system

- name: Upgrade the system
  hosts: node_with_k8s_not_installed
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  roles:
    - update_system
  tags:
    - update_system

- name: Detect login for gateways
  hosts: gateways
  gather_facts: false
  roles:
  - detect_user

- name: Prepare Gateways for global monitoring
  hosts: gateways
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  roles:
  - role: global-monitoring-support
    tags: k8s-global-monitoring # ToDo: find better tag
    when: k8s_global_monitoring_enabled

- name: Rollout company users
  hosts: k8s_nodes
  gather_facts: true
  tasks:
    - name: Rollout company users
      when: cah_users_rollout
      include_role:
        name: ch-role-users
      tags:
        - ch-role-users

- name: Prepare the k8s nodes
  hosts: k8s_nodes
  gather_facts: true
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  roles:
    - role: disable_selinux
      tags: disable_selinux
      when: ansible_distribution == "CentOS"
    - role: centos-networking
      tags: centos-networking
      when: ansible_distribution == "CentOS"
    - role: ntp
      tags: ntp
    - role: gpu-and-vgpu
      tags: gpu-and-vgpu
    - role: docker
      tags: docker
    - role: kubeadm
      tags: kubeadm
    - role: remove_snap
      tags: remove_snap
    - role: wireguard-support
      tags: wireguard
      when: "wireguard_on_workers"

# If DualStack is enabled, the k8s cluster needs to use calico as CNI plugin
# In Ansible, it is not possible to overwrite inventory variables, therefore we need to fail here
# and ask the user to adjust its configuration.
- name: Validate DualStack configurations
  hosts: localhost
  tasks:
  - name: Check if DualStack support is enabled, but CNI plugin is not set to calico
    fail:
      msg: "### ERROR ###\nYou have enabled DualStack support, but have not chosen calico as k8s network plugin.\nPlease set 'k8s_network_plugin' to 'calico' in your config and rerun." # noqa 204
    when: dualstack_support and k8s_network_plugin != "calico"

- name: Spawn the K8s control plane
  hosts: masters
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  # With serial we can specify the number of hosts on which the Playbook is
  # executed in parallel.
  # https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html
  # FIXME: Do we really want to copy our OpenStack user credentials like this?
  serial:
    - 1
    - "100%"
  roles:
    - role: k8s-master
      tags: k8s-master

- name: Install calico supporting services
  hosts: masters
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  roles:
    - role: calico-control-plane
      tags:
      - calico
      - calico-control-plane
      when: k8s_network_plugin == 'calico'
    - role: calico-worker
      tags:
      - calico
      - calico-control-plane
      - calico-worker
      when: k8s_network_plugin == 'calico'

- name: Spawn the K8s worker nodes
  hosts: workers
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  roles:
    - role: k8s-worker
      tags: k8s-worker
    - role: calico-worker
      tags:
      - calico
      - calico-worker
      when: k8s_network_plugin == 'calico'

- name: Spawn the OpenStack k8s Control Plane
  hosts: masters
  become: yes
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  run_once: yes
  roles:
    - role: connect-k8s-to-openstack
      tags: openstack
    - role: ch-k8s-lbaas-controller
      tags:
      - ch-k8s-lbaas
      - ch-k8s-lbaas-controller

- name: Configure BGP and LBaaS on the gateways
  hosts: gateways
  become: yes
  gather_facts: true
  vars_files:
  - vars/auto_generated_preamble.yaml
  roles:
  - role: k8s-bgp
    tags:
    - k8s-bgp
  - role: ch-k8s-lbaas-agent
    tags:
    - ch-k8s-lbaas
    - ch-k8s-lbaas-agent

- name: Configure the local-storage controller
  hosts: workers
  vars_files:
  - vars/auto_generated_preamble.yaml
  roles:
    - role: k8s-local-storage-controller
      tags: lsc
