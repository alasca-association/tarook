---
- name: Test the metrics API
  ansible.builtin.include_tasks: scrape_metrics_api.yaml

- name: Run the test
  block:
  - name: Discover IP address of prometheus service
    kubernetes.core.k8s_info:
      namespace: monitoring
      name: prometheus-operated
      api_version: v1
      kind: Endpoints
    register: prometheus_endpoint
    until: |
        (prometheus_endpoint.resources | default(False))
        and (prometheus_endpoint.resources[0].subsets | default(False))
        and (prometheus_endpoint.resources[0].subsets[0].addresses | default(False))
        and (prometheus_endpoint)
    retries: 60
    delay: 3

  - name: Set prometheus cluster IP and web port
    ansible.builtin.set_fact:
      prometheus_cluster_ip: "{{ prometheus_endpoint.resources[0].subsets[0].addresses[0].ip }}"
      prometheus_web_port: "{{ (prometheus_endpoint.resources[0].subsets[0].ports | selectattr('name', 'in', ['web','http-web']) | first).port }}"

  - name: information about config
    ansible.builtin.debug:
      msg: "This test is going to use the prometheus at {{ prometheus_cluster_ip }}:{{ prometheus_web_port }}"

  - name: Scrape prometheus endpoints
    block:
    - name: Create the prometheus test scraper namespace
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ check_prometheus_scraping_namespace }}"
            labels:
              monitoring-checks: "{{ check_prometheus_scraping_namespace }}"
        validate:
          fail_on_error: yes
          strict: yes
        state: present
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Create the prometheus test scraper Pod
      kubernetes.core.k8s:
        definition: "{{ lookup('template', 'scraper.yaml.j2') }}"
        apply: yes
        state: "present"
        wait: yes
        validate:
          fail_on_error: yes
          strict: yes
      register: scraper_info
      # Retry this task on failures
      until: scraper_info is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Scrape endpoints for prometheus stack itself
      ansible.builtin.include_tasks: scrape_prometheus_stack.yaml

    - name: Scrape endpoints for managed services
      ansible.builtin.include_tasks: scrape_managed_services.yaml

  - name: Delete Namespace
    kubernetes.core.k8s:
      api_version: v1
      name: "{{ check_prometheus_scraping_namespace }}"
      kind: Namespace
      state: absent
      wait: true
      validate:
        fail_on_error: yes
        strict: yes
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"
    tags:
      - test-cleanup
...
