---
- name: Run the test
  block:
  - name: discover IP address of prometheus service
    kubernetes.core.k8s_info:
      namespace: monitoring
      name: prometheus-k8s
      api_version: v1
      kind: Service
    register: prometheus_service
    failed_when: |
      not ((prometheus_service.resources | default(False))
        and (prometheus_service.resources[0].spec | default(False))
        and (prometheus_service.resources[0].spec.clusterIP | default(False))
      )

  - name: set cluster IP fact
    ansible.builtin.set_fact:
      prometheus_cluster_ip: "{{ prometheus_service.resources[0].spec.clusterIP }}"

  - name: information about config
    ansible.builtin.debug:
      msg: "This test is going to use the prometheus at {{ prometheus_cluster_ip }}:9090"

  - name: Scrape the endpoints
    block:
    - name: Create the node-exporter-scraper namespace
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ check_node_exporter_namespace }}"
            labels:
              monitoring-checks: "{{ check_node_exporter_namespace }}"
        validate:
          fail_on_error: yes
          strict: yes
        state: present
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Create the node-exporter scraper Pod
      kubernetes.core.k8s:
        definition: "{{ lookup('template', 'scraper.yaml.j2') }}"
        apply: yes
        state: "present"
        wait: yes
        validate:
          fail_on_error: yes
          strict: yes
      register: scraper_info
      # Retry this task on failures
      until: scraper_info is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: check node exporter scrape endpoint status
      kubernetes.core.k8s_exec:
        namespace: "{{ check_node_exporter_namespace }}"
        pod: node-exporter-scraper
        command: curl -g "http://{{ prometheus_cluster_ip }}:9090/api/v1/query?query=up{job='node-exporter',instance='{{ item }}'}"
      register: metrics
      until: |
        metrics.failed == false and
        metrics.return_code == 0 and
        metrics.stdout | from_json | json_query('status') == "success" and
        metrics.stdout | from_json | json_query('data.result[0].value | [1]') == '1'
      retries: 25
      delay: 3
      loop: "{{ groups['k8s_nodes'] }}"

    - name: check keepalived exporter scrape endpoint status
      kubernetes.core.k8s_exec:
        namespace: "{{ check_node_exporter_namespace }}"
        pod: node-exporter-scraper
        command: curl -g 'http://{{ prometheus_cluster_ip }}:9090/api/v1/query?query=up{job="prometheus-keepalived",instance="{{ hostvars[item]["local_ipv4_address"] }}:9650"}'
      register: metrics
      loop: "{{ groups['frontend'] }}"
      until: |
        metrics.failed == false and
        metrics.return_code == 0 and
        metrics.stdout | from_json | json_query('status') == "success" and
        metrics.stdout | from_json | json_query('data.result[0].value | [1]') == '1'
      retries: 25
      delay: 3

    - name: check haproxy exporter scrape endpoint status
      kubernetes.core.k8s_exec:
        namespace: "{{ check_node_exporter_namespace }}"
        pod: node-exporter-scraper
        command: curl -g 'http://{{ prometheus_cluster_ip }}:9090/api/v1/query?query=up{job="prometheus-haproxy",instance="{{ hostvars[item]["local_ipv4_address"] }}:9101"}'
      register: metrics
      loop: "{{ groups['frontend'] }}"
      until: |
        metrics.failed == false and
        metrics.return_code == 0 and
        metrics.stdout | from_json | json_query('status') == "success" and
        metrics.stdout | from_json | json_query('data.result[0].value | [1]') == '1'
      retries: 25
      delay: 3

    - name: check ceph mgr scrape endpoint status
      kubernetes.core.k8s_exec:
        namespace: "{{ check_node_exporter_namespace }}"
        pod: node-exporter-scraper
        command: curl -g 'http://{{ prometheus_cluster_ip }}:9090/api/v1/query?query=up{job="rook-ceph-mgr"}'
      register: metrics
      when: "k8s_storage_rook_enabled"
      until: |
        metrics.failed == false and
        metrics.return_code == 0 and
        metrics.stdout | from_json | json_query('status') == "success" and
        metrics.stdout | from_json | json_query('data.result[0].value | [1]') == '1'
      retries: 25
      delay: 3

    - name: check LBaaS controller scrape endpoint status
      kubernetes.core.k8s_exec:
        namespace: "{{ check_node_exporter_namespace }}"
        pod: node-exporter-scraper
        command: curl -g 'http://{{ prometheus_cluster_ip }}:9090/api/v1/query?query=up{job="ch-k8s-lbaas-controller"}'
      register: metrics
      when: ch_k8s_lbaas_enabled
      until: |
        metrics.failed == false and
        metrics.return_code == 0 and
        metrics.stdout | from_json | json_query('status') == "success" and
        metrics.stdout | from_json | json_query('data.result[0].value | [1]') == '1'
      retries: 25
      delay: 3

    - name: check LBaaS agent scrape endpoint status
      kubernetes.core.k8s_exec:
        namespace: "{{ check_node_exporter_namespace }}"
        pod: node-exporter-scraper
        command: curl -g 'http://{{ prometheus_cluster_ip }}:9090/api/v1/query?query=up{job="ch-k8s-lbaas-agent",instance="{{ hostvars[item]["local_ipv4_address"] }}:{{ ch_k8s_lbaas_agent_port }}"}'
      register: metrics
      when: ch_k8s_lbaas_enabled
      loop: "{{ groups['frontend'] }}"
      until: |
        metrics.failed == false and
        metrics.return_code == 0 and
        metrics.stdout | from_json | json_query('status') == "success" and
        metrics.stdout | from_json | json_query('data.result[0].value | [1]') == '1'
      retries: 25
      delay: 3

  - name: Delete Namespace
    kubernetes.core.k8s:
      api_version: v1
      name: "{{ check_node_exporter_namespace }}"
      kind: Namespace
      state: absent
      wait: true
      validate:
        fail_on_error: yes
        strict: yes
    # Retry this task on failures
    register: k8s_apply
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"
    tags:
    - test-cleanup
...
