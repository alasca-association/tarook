workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_REF_NAME =~ /^(devel|stable)$/'
      when: always
    - when: never

stages:
- lint
- spawn-cluster

tflint:
  when: always
  image:
    name: wata727/tflint:latest
    entrypoint: ["/bin/sh", "-c"]
  stage: lint
  script:
  - tflint terraform
  tags:
  - docker

shellcheck:
  when: always
  variables:
    SHELLCHECK_IMAGE_TAG: v0.7.2
  image: koalaman/shellcheck-alpine:$SHELLCHECK_IMAGE_TAG
  stage: lint
  script:
  - "find -iname '*.sh' '!' -ipath './jsonnet-sources/*/vendor/**' '!' -ipath './.git/**' -print0 | xargs -0 -- shellcheck -Calways"
  tags:
  - docker

ansible-lint:
  when: always
  variables:
    ANSIBLE_LINT_IMAGE_TAG: 5
  image:
    name: cytopia/ansible-lint:$ANSIBLE_LINT_IMAGE_TAG
    entrypoint: ["/bin/sh", "-c"]
  stage: lint
  script:
  - 'cd ansible-legacy && ansible-galaxy install -r requirements.yaml'
  - 'cd ansible-legacy && ansible-lint -x 701 02_trampoline.yaml 03_k8s_base.yaml && cd ..'
  - 'cd k8s-service-layer && ansible-lint -x 701 install.yaml && cd ..'
  - 'cd k8s-managed-services && ansible-lint -x 701 install.yaml && cd ..'
  tags:
  - docker

flake8:
  when: always
  image: python:3
  script:
  - 'pip3 install flake8'
  - 'python3 -m flake8 --filename="*.py"'
  stage: lint
  tags:
  - docker

.prepare_spawn_test_cleanup_k8s_cluster:
  image: "registry.gitlab.com/yaook/images/k8s-ci/f1a"
  before_script:
  - 'export wg_conf_name=wg0'
  # id_rsa must be set as `File` input in the GitLab CI/CD variables of the
  # repository.
  - 'cp "$id_rsa" /root/.ssh/id_rsa && chmod go-rwx -R /root/.ssh'
  # OS_PASSWORD must be set as `Variable` input in the GitLab CI/CD variables of
  # the repository.
  - . /root/openrc.sh
  - git clean -f .
  - 'chmod o-w *'
  - rm -rf ci # make sure we're operating on a clean directory
  - git checkout -- ci
  - export MANAGED_K8S_GIT="$(realpath .)"
  - export WG_COMPANY_USERS="false"
  - export PASS_COMPANY_USERS="false"
  - export SSH_COMPANY_USERS="false"
  - cd ci
  - git init
  - ../actions/init.sh
  - ../actions/init.sh # A second run to check idempotency
    # Note that this is basically a dummy keypair that is not used to protect any significant data
  - gpg --quick-generate-key --batch --passphrase '' mk8s-ci@gitlab rsa1024 encr never
  script:
  - pip3 install -r managed-k8s/requirements.txt
  - ./managed-k8s/actions/apply-terraform.sh
  - ./reachability-or-recreate.sh
  - ./retry_and_timeout.sh ./managed-k8s/actions/apply-stage2.sh 2 40m
  - ./retry_and_timeout.sh ./managed-k8s/actions/apply-stage3.sh 2 80m
  - ./retry_and_timeout.sh ./managed-k8s/actions/apply-stage4.sh 2 30m
  - ./retry_and_timeout.sh ./managed-k8s/actions/apply-stage5.sh 2 30m
  - ./retry_and_timeout.sh ./managed-k8s/actions/test.sh 2 30m
  after_script:
  - cd ci/
  - ./cleanup.sh
  artifacts:
    paths:
      - ci/podlogs/
    when: always
  tags:
  - docker
  - wireguard-ready
  resource_group: ch-k8s-ci-environment-f1a-1

# Spawn a cluster with kube-router as CNI and rook disabled
kuberouter:
  extends: .prepare_spawn_test_cleanup_k8s_cluster
  rules:
  - if: '$CI_COMMIT_REF_NAME =~ /^(devel|stable)$/'
    when: on_success
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: manual
  allow_failure: false
  stage: spawn-cluster
  variables:
    ANSIBLE_ANY_ERRORS_FATAL: "true"
    ANSIBLE_FORCE_COLOR: "true"
    AFLAGS: "--diff -e rook=False"

# Spawn a cluster with kube-router as CNI and rook enabled
kuberouter-rook:
  extends: .prepare_spawn_test_cleanup_k8s_cluster
  rules:
  - if: '$CI_COMMIT_REF_NAME =~ /^(devel|stable)$/'
    when: manual
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: manual
  allow_failure: true
  stage: spawn-cluster
  variables:
    ANSIBLE_ANY_ERRORS_FATAL: "true"
    ANSIBLE_FORCE_COLOR: "true"

# Spawn a cluster with calico as CNI and rook enabled
calico-rook-dualstack:
  extends: .prepare_spawn_test_cleanup_k8s_cluster
  rules:
  - if: '$CI_COMMIT_REF_NAME =~ /^(devel|stable)$/'
    when: on_success
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: manual
  allow_failure: false
  stage: spawn-cluster
  variables:
    ANSIBLE_ANY_ERRORS_FATAL: "true"
    ANSIBLE_FORCE_COLOR: "true"
    AFLAGS: "--diff -e k8s_network_plugin=calico"
    TF_VAR_dualstack_support: "true"

# Spawn a cluster with calico as CNI and rook disabled
calico-dualstack:
  extends: .prepare_spawn_test_cleanup_k8s_cluster
  rules:
  - if: '$CI_COMMIT_REF_NAME =~ /^(devel|stable)$/'
    when: manual
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: manual
  allow_failure: true
  stage: spawn-cluster
  variables:
    ANSIBLE_ANY_ERRORS_FATAL: "true"
    ANSIBLE_FORCE_COLOR: "true"
    AFLAGS: "--diff -e k8s_network_plugin=calico -e rook=False"
    TF_VAR_dualstack_support: "true"
