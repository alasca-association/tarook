variables:
  YAOOK_K8S_RELEASE_BRANCH_PREFIX: release/v
  YAOOK_K8S_RELEASE_PREPARE_BRANCH_PREFIX: release-prepare/v
  YAOOK_K8S_RELEASE_HOTFIX_BRANCH_PREFIX: hotfix/
  YAOOK_K8S_DEFAULT_BRANCH: devel

  REGEX_RELEASE_BRANCH_PREFIX: /^release\/v\S+$/
  REGEX_RELEASE_PREPARE_BRANCH_PREFIX: /^release-prepare\/v\S+$/
  REGEX_RELEASE_HOTFIX_BRANCH_PREFIX: /^hotfix\/\S+$/

# Pipelines run on devel branch, release-(prepare)-branches, hotfix-branches and merge requests
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $YAOOK_K8S_DEFAULT_BRANCH
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_PREPARE_BRANCH_PREFIX'
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_BRANCH_PREFIX'
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_HOTFIX_BRANCH_PREFIX'
    - if: $CI_MERGE_REQUEST_EVENT_TYPE

stages:
- lint
- cluster-tests
- release

# include:
#   - local: ci/cluster-tests.yaml
#   - local: ci/release.yaml

# always lint on merge trains
.default_lint_rules:
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: on_success

tflint:
  image:
    name: "ghcr.io/terraform-linters/tflint:v0.50.1"
    entrypoint: ["/bin/sh", "-c"]
  stage: lint
  script:
    - tflint --chdir=terraform/
  tags:
    - docker
  rules:
    - !reference [.default_lint_rules, rules]
    - changes:
      - 'terraform/**/*'
      when: on_success
    - when: never

shellcheck:
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/koalaman/shellcheck-alpine:v0.9.0"
  stage: lint
  script:
    - "find -iname '*.sh' '!' -ipath './jsonnet-sources/*/vendor/**' '!' -ipath './.git/**' -print0 | xargs -0 -- shellcheck -Calways"
  tags:
    - docker
  rules:
    - !reference [.default_lint_rules, rules]
    - changes:
      - '**/*.sh'
      when: on_success
    - when: never

yamllint:
  stage: lint
  tags:
    - docker
  image: registry.gitlab.com/pipeline-components/yamllint:latest
  script:
    - yamllint .
  rules:
    - !reference [.default_lint_rules, rules]
    - changes:
      - '**/*.{yaml,yml}'
      when: on_success
    - when: never

detect-vault-image:
  image: "registry.gitlab.com/yaook/images/k8s-ci/f1a:devel"
  stage: lint
  script:
    - bash ./actions/detect-vault-image.sh
  tags:
    - docker
  rules:
    - !reference [.default_lint_rules, rules]
    - when: on_success

ansible-lint:
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  stage: lint
  before_script:
    - poetry install --with ci --sync
  script:
    - "ansible-galaxy install -r ansible/requirements.yaml"
    - "ANSIBLE_ROLES_PATH=./k8s-base/roles:./k8s-managed-services/roles/:./k8s-service-layer/roles:./k8s-base/test-roles/:./k8s-service-layer/test-roles/:./k8s-managed-services/test-roles ansible-lint -c ci/lint/ansible-lint-conf --offline --exclude .gitlab-ci.yml --exclude .pre-commit-config.yaml"
  tags:
    - docker
  rules:
    - !reference [.default_lint_rules, rules]
    - when: on_success

flake8:
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  before_script:
    - poetry install --with ci --sync
  script:
    - 'python3 -m flake8'
  stage: lint
  tags:
    - docker
  rules:
    - !reference [.default_lint_rules, rules]
    - changes:
      - '**/*.py'
      when: on_success
    - when: never

poetry-lock:
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  before_script:
    - poetry install --sync
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"
  script:
    - bash ./ci/lint/poetry-lock.sh
  stage: lint
  tags:
    - docker
  rules:
    - !reference [.default_lint_rules, rules]
    - changes:
      - pyproject.toml
      - poetry.lock
      when: on_success
    - when: never

pre-commit-hooks:
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  before_script:
    - poetry install --sync
  script:
    - 'SKIP=shellcheck,yamllint,flake8,check-flake pre-commit run --all-files || true'
    - git --no-pager diff
    - git restore .
    - 'SKIP=shellcheck,yamllint,flake8,check-flake pre-commit run --all-files'
  stage: lint
  tags:
    - docker
  rules:
    - !reference [.default_lint_rules, rules]
    - when: on_success

build-docs-check:
  stage: lint
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  before_script:
    - poetry install --with docs --sync
  script:
    - sphinx-build -W docs _build/html
    - mv _build/html public
  artifacts:
    expose_as: "Rendered Docs"
    expire_in: "7 days"
    paths:
      - public/
  rules:
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_BRANCH_PREFIX'
      when: never
    - !reference [.default_lint_rules, rules]
    - changes:
      - 'docs/[!_]*/**/*'
      - 'docs/[!_]*'  # the above does not include files directly in docs/
      when: on_success
    - when: never
  tags:
    - docker

release-note-file-check:
  stage: lint
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  variables:
    CONFIG_FILE: towncrier.toml
    SOURCE_BRANCH: origin/${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
    TARGET_BRANCH: origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
    COMMIT_MESSAGE: MR-number for releasenote(s) changed
    COMMIT_FILES: docs/_releasenotes
  before_script:
    - poetry install --with ci --with docs --sync
    - git fetch origin "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    - |
      if [ "${CI_MERGE_REQUEST_PROJECT_URL}" = "${CI_MERGE_REQUEST_SOURCE_PROJECT_URL}" ]; then
        FORK=False
      else
        FORK=True
      fi
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
  script:
    - python3 ci/lint/check-releasenote-file.py "${CI_PROJECT_DIR}" "${TARGET_BRANCH}" "${CONFIG_FILE}" "${CI_MERGE_REQUEST_IID}" "${FORK}"
    - towncrier build --version x.x.x --draft
    - |
      if [ "${FORK}" = "False" ]; then
        git fetch origin "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
        git checkout "${SOURCE_BRANCH}"
        git status
        CHANGES=$(git diff "${SOURCE_BRANCH}" --name-only -- ${COMMIT_FILES} | wc -l)
        if [ "${CHANGES}" -gt 0 ]; then
          echo "committing"
          git add ${COMMIT_FILES}
          git commit --amend --no-edit
          git push --force -o ci.skip "https://gitlab-ci-token:${PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}" HEAD:"${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
        fi
      fi
  tags:
    - docker
  retry: 1
  rules:
    # run only for MRs on devel
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $YAOOK_K8S_DEFAULT_BRANCH
      when: on_success
    - when: never

.test-rules-changes: &test-rules-changes
      changes:
      # match files/directories in the root which are not "docs"
      - '{[^d]*,d,d[^o]*,do,do[^c]*,doc,doc[^s]*,docs?*}'
      # match changes in subdirs other than "docs"
      - '{[^d]*,d,d[^o]*,do,do[^c]*,doc,doc[^s]*,docs?*}/**/*'

.prepare_spawn_test_cleanup_k8s_cluster:
  image: "registry.gitlab.com/yaook/images/k8s-ci/f1a:devel"
  variables:
    WG_COMPANY_USERS: "false"
    PASS_COMPANY_USERS: "false"
    SSH_COMPANY_USERS: "false"
    ANSIBLE_ANY_ERRORS_FATAL: "true"
    ANSIBLE_FORCE_COLOR: "true"
    # before you panic: this key is only used in the CI vault
    # instance, for integration testing.
    # obviously: don't use this for anything else :>
    ci_cert_vault_key: |
      -----BEGIN RSA PRIVATE KEY-----
      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
      -----END RSA PRIVATE KEY-----
    ci_cert_vaultca_crt: |
      -----BEGIN CERTIFICATE-----
      MIIFCTCCAvGgAwIBAgIUdGsWd3PKnQAUkKoJG7vn7TNlG9QwDQYJKoZIhvcNAQEL
      BQAwEzERMA8GA1UECgwIVkFVTFQgQ0EwIBcNMjIwMjAxMTI1MzU2WhgPMjEyMjAx
      MDgxMjUzNTZaMBMxETAPBgNVBAoMCFZBVUxUIENBMIICIjANBgkqhkiG9w0BAQEF
      AAOCAg8AMIICCgKCAgEApE2jBJjrgZuyiENA/7tBFe9QoC9J6EoFZ5E6D9Ybmv7/
      kI26EdN3VrQuRRJyC6qblXLEJ7lg5fb+b224TD2F87jLR2HfsdyBB5C/3JQgjgab
      l7CKpm20THr6rwB0qerQ3K9IgmKzspbP3UwQqXeqQdwceVn8UMm6uTd07ZM4qpD0
      g3R+M7fKpslyBEiqtgjqwMrEquCy+BT+KnZYgLWqgyWqP1F+qI3JCoUZo3l/o+kC
      WtG2+KGw2XQk67RYOSJ9iMlKFfQfoDgNdazVKJusjdV7FBPeat5f4dI+wEXRUU1A
      THvfcxDoLVronzbFdopve80bPYxBx6tmRsZck+huRpAPHDZCKsEYU1EeVVnC6DBs
      8ftGBXqPW2cFybQUKu6IgVHpt9toQ12A4lEJ/+LJfQYvWT6rqISlet97oHM37XKP
      vUhoBFrSM+raFNsuxkuy/EOhulQmG+0cEstU+iblknMv6/R/XRIIAm69PYNyh2VG
      Dh0P5JCAKN8BjKKqaZtlmwBZq63iy43ned18lhrIgo+21hqutFqFAEGucNHcM6EZ
      oRMcRlE7L4Ndl7v2It2Iq+Xb2XKG0jGo6Hapn13ykaQ0dxWnNCx7ny1uUTwDM31K
      kcEm/iTrYjelZzFYBi5HA2oRynZZ6H1sD2YgN1+HlfFgvalo3sI2JLbme1+90nEC
      AwEAAaNTMFEwHQYDVR0OBBYEFEdsXrikI+DgTe8iSPxALNL33H6vMB8GA1UdIwQY
      MBaAFEdsXrikI+DgTe8iSPxALNL33H6vMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZI
      hvcNAQELBQADggIBAJpMT21CMyGqs5enTaY8WWvdiTmKbdlgjNnHSaBOBXZFN00a
      9zEZmcs9APDmaZXfT1I+z3qniYJOjUFj04HX9pvi8DaaYY++IcNKEjWinIjzg4Rx
      HTYCqd6onklgfL0JLAHeQWvjaPzRkEcd9CDJ/R7cVz5Q3UXwX4xP8yyn8R1W7hdP
      B9ltsm7P7n2W5L0J8iYEJIeZkAA+S1tXwVzUytdNWiZMRtQapsuKF/NDQ/aoDnfE
      /yTYLty0rlyjDdOy8h3sfiArUXfE95SPHLRHz1eAH6cD6MHlbueIJnzAG3pOO/oB
      ibVfYNG1/PwCpVirDKx9Cs/eiLNgHdUSBtvz+CoSVPmqSTFEwUQmhZ301N53/BpL
      45wtiCqUSH3BUpSqSZEjvtqntwA3xAk9a36ufslMEwaYf+hpRTGpiYN5mnptRbYz
      2Kh1M7CXpZy1o7pKgDku1hQ+xzh/JGGeYNG+pXmlfwJV3x7zkxBtDr9PmxeWoO/s
      ZigqgxUwF9gQZTQENXVKLsR2y7KadUFqDSxwKdyM/fp/ClD+X++wDtYUFRiW6ET+
      eJIHRfCFhgcm61uaQUn2oWp7/EmESxU20PMddg4G9vz2YdBfFCplgsCyp2t98T0u
      LyHrHQa1VuGocU8/DFsLxUOThPmAtuBvqRvTtWZLuNEP05QwmyvBv/5VFXpd
      -----END CERTIFICATE-----
    ci_cert_vaultchain_crt: |
      -----BEGIN CERTIFICATE-----
      MIIFOjCCAyKgAwIBAgIUdHgUyppBwbwfssawJKI5H7h11RcwDQYJKoZIhvcNAQEL
      BQAwEzERMA8GA1UECgwIVkFVTFQgQ0EwIBcNMjIwMjAxMTI1MzU4WhgPMjEyMjAx
      MDgxMjUzNThaMCAxDjAMBgNVBAoMBVlBT09LMQ4wDAYDVQQDDAVWQVVMVDCCAiIw
      DQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKWS+5bI0z3yKa1PGENggq4XNAiK
      rZFMrOI/6jzeDXO27Xip3Mi25LsdbhqpybB7F8IVoeJUgvhBV93bbS+0YQTvHE4O
      7W/yXyVN23qZ8cv8m+iP3nf5JxY+IWMB+9OOLIXWnCd/G/7X8P1AiVqfKnH8ogyj
      zyLf9YtzXBhK/xwYiYf3Yi0CiuPHlwjlCeLYXqFjSfDe4IlYUUwZ0iA1MmtyY5RX
      tXLIoVpCUOObf6QWbFlyoSJYQeK1q1pWnE5H+3voS7KUarkqdZp7BiX5TgnSjgWD
      gJLujwSC6VICSPyVh+wCiEOEPZnGwfXoAzwQFGAcrqqqZdzLjS9nMsQCcCFFRl1L
      3fqnoqdMHTDEtEENnpBQ2hAGSJUEC4x5QqL8U3wXeM4X5jjTyW//yNYBNht+IFDV
      FJdxm+LWxzk82DS3bCcAKDGmlCJ9CMTRnMvC4/QVtAIKUvB9628e59riwlXrntLx
      /mNa6ciLtGLP2Z26bR+JsmOkbkbdHBY5/wwXkbx9tb/RrLUVthxBizqKfX8MnbI/
      eKt+jPpTe+VyAOUzL/KOnRmUNMD/ATwj1wVqkaIUDWiJiUuGydDbW55ssEc4iaga
      Bbtmf2IE6YnmwefDDvl6TOOzBumt3beklRvW0HXH800gjUpdWNdgs4TvUjmElnHG
      P9Anrlk5KduobZ/XAgMBAAGjdzB1MAkGA1UdEwQCMAAwHQYDVR0OBBYEFKLgyBWw
      i7ijxYAacqXAXBQjZ9NEMAsGA1UdDwQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcD
      ATAnBgNVHREEIDAehwR/AAABgglsb2NhbGhvc3SCC3lhb29rLXZhdWx0MA0GCSqG
      SIb3DQEBCwUAA4ICAQAMLC+pct33zz1RxCo2hpyH6jR5No2yAu/0XtiJCcM9Momo
      tQ4xAg7OA+R4tjr0Kv02ozeHFFe7tTO3ggdQ8fm4KMZgY4IBpsj7yHSru4jlt/PM
      U8HVSzGscFLVwiFkctZsFH+HJMfZlEqiWQCodDdawCH0shCLLpAOZCUYfFQ+EhXR
      YNmCKgsw8NicgrySrp36N1kZPr3wLbWSdm1ZcAWSV1zgc34Hx+DJVeePlI/5/nTa
      nNuGA61z2tV2xujMADjCSBcIW9GiZCTiZI/U7le/KB8zL/dpJhsBR+zqdpoCtekW
      gPNVIEb7e3Id7HaUs2vqV9NeyuZ/+9AvB4qCMWGwXEbe+/gIrmhxiAEEZDQpoJ5l
      Sn5TYW3gVB4f77+LkFRmrvioEqCibkKpgXKcQSqnan3DnrqMak5NN/3XQ2dPRoZP
      bA2PX4P47I9HNhZpmEa80xzNLsZqc/LoTBlP64rqMHoEcYSDWds8I4rJFHgTq3Ac
      1Z3XLXZXkhrutoh0loZJgCyEX/uOdKUqDnyvG0KB672x3QEk1dYyR8IFbTegLl2n
      GyBew4GGCGqQb06OEux1eSHd21FS5wfzLky4k3xMdgDjiBHKmq6c0bmfygexM75x
      3ESPlOmpGC3c6buXhaE2IecO5SrRHOxKKl6EVv8CQ6z3Ny4VxavTs7bOhiVmnw==
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIFCTCCAvGgAwIBAgIUdGsWd3PKnQAUkKoJG7vn7TNlG9QwDQYJKoZIhvcNAQEL
      BQAwEzERMA8GA1UECgwIVkFVTFQgQ0EwIBcNMjIwMjAxMTI1MzU2WhgPMjEyMjAx
      MDgxMjUzNTZaMBMxETAPBgNVBAoMCFZBVUxUIENBMIICIjANBgkqhkiG9w0BAQEF
      AAOCAg8AMIICCgKCAgEApE2jBJjrgZuyiENA/7tBFe9QoC9J6EoFZ5E6D9Ybmv7/
      kI26EdN3VrQuRRJyC6qblXLEJ7lg5fb+b224TD2F87jLR2HfsdyBB5C/3JQgjgab
      l7CKpm20THr6rwB0qerQ3K9IgmKzspbP3UwQqXeqQdwceVn8UMm6uTd07ZM4qpD0
      g3R+M7fKpslyBEiqtgjqwMrEquCy+BT+KnZYgLWqgyWqP1F+qI3JCoUZo3l/o+kC
      WtG2+KGw2XQk67RYOSJ9iMlKFfQfoDgNdazVKJusjdV7FBPeat5f4dI+wEXRUU1A
      THvfcxDoLVronzbFdopve80bPYxBx6tmRsZck+huRpAPHDZCKsEYU1EeVVnC6DBs
      8ftGBXqPW2cFybQUKu6IgVHpt9toQ12A4lEJ/+LJfQYvWT6rqISlet97oHM37XKP
      vUhoBFrSM+raFNsuxkuy/EOhulQmG+0cEstU+iblknMv6/R/XRIIAm69PYNyh2VG
      Dh0P5JCAKN8BjKKqaZtlmwBZq63iy43ned18lhrIgo+21hqutFqFAEGucNHcM6EZ
      oRMcRlE7L4Ndl7v2It2Iq+Xb2XKG0jGo6Hapn13ykaQ0dxWnNCx7ny1uUTwDM31K
      kcEm/iTrYjelZzFYBi5HA2oRynZZ6H1sD2YgN1+HlfFgvalo3sI2JLbme1+90nEC
      AwEAAaNTMFEwHQYDVR0OBBYEFEdsXrikI+DgTe8iSPxALNL33H6vMB8GA1UdIwQY
      MBaAFEdsXrikI+DgTe8iSPxALNL33H6vMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZI
      hvcNAQELBQADggIBAJpMT21CMyGqs5enTaY8WWvdiTmKbdlgjNnHSaBOBXZFN00a
      9zEZmcs9APDmaZXfT1I+z3qniYJOjUFj04HX9pvi8DaaYY++IcNKEjWinIjzg4Rx
      HTYCqd6onklgfL0JLAHeQWvjaPzRkEcd9CDJ/R7cVz5Q3UXwX4xP8yyn8R1W7hdP
      B9ltsm7P7n2W5L0J8iYEJIeZkAA+S1tXwVzUytdNWiZMRtQapsuKF/NDQ/aoDnfE
      /yTYLty0rlyjDdOy8h3sfiArUXfE95SPHLRHz1eAH6cD6MHlbueIJnzAG3pOO/oB
      ibVfYNG1/PwCpVirDKx9Cs/eiLNgHdUSBtvz+CoSVPmqSTFEwUQmhZ301N53/BpL
      45wtiCqUSH3BUpSqSZEjvtqntwA3xAk9a36ufslMEwaYf+hpRTGpiYN5mnptRbYz
      2Kh1M7CXpZy1o7pKgDku1hQ+xzh/JGGeYNG+pXmlfwJV3x7zkxBtDr9PmxeWoO/s
      ZigqgxUwF9gQZTQENXVKLsR2y7KadUFqDSxwKdyM/fp/ClD+X++wDtYUFRiW6ET+
      eJIHRfCFhgcm61uaQUn2oWp7/EmESxU20PMddg4G9vz2YdBfFCplgsCyp2t98T0u
      LyHrHQa1VuGocU8/DFsLxUOThPmAtuBvqRvTtWZLuNEP05QwmyvBv/5VFXpd
      -----END CERTIFICATE-----
    ci_vault_config_hcl: |
      {
        "storage": {
          "file": {
            "path": "/vault/data"
          }
        },
        "listener": {
          "tcp": {
            "address": "0.0.0.0:8200",
            "tls_disable": "false",
            "tls_cert_file": "/vault/tls/vaultchain.crt",
            "tls_key_file": "/vault/tls/vault.key",
            "tls_require_and_verify_client_cert": "false",
            "tls_disable_client_certs": "true"
          }
        },
        "disable_mlock": "true",
        "api_addr": "http://0.0.0.0:8200",
        "ui": "true",
        "log_level": "Info"
      }
  services:
  - name: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/vault:1.13.3"
    alias: yaook-vault
    entrypoint: ["sh", "-c"]
    command:
      - |
        export VAULT_ADDR=https://127.0.0.1:8200
        mkdir -p /vault/config /vault/tls/ca
        printf "%s" "$ci_cert_vault_key" > /vault/tls/vault.key
        printf "%s" "$ci_cert_vaultchain_crt" > /vault/tls/vaultchain.crt
        printf "%s" "$ci_vault_config_hcl" > /vault/config/config.hcl
        cp /bin/vault $CI_PROJECT_DIR
        exec vault server -config=/vault/config/config.hcl
  before_script:
    - "export wg_conf_name=wg0"
    # id_rsa must be set as `File` input in the GitLab CI/CD variables of the
    # repository.
    - 'cp "$id_rsa" /root/.ssh/id_rsa && chmod go-rwx -R /root/.ssh'
    # OS_PASSWORD must be set as `Variable` input in the GitLab CI/CD variables of
    # the repository.
    - . /root/openrc.sh
    - git clean -f .
    - "chmod o-w *"
    - rm -rf ci # make sure we're operating on a clean directory
    - git checkout -- ci
    - export MANAGED_K8S_GIT="$(realpath .)"
    - cd ci
    - git init
    - ../actions/init.sh
    - ../actions/init.sh # A second run to check idempotency
      # Note that this is basically a dummy keypair that is not used to protect any significant data
    - gpg --quick-generate-key --batch --passphrase '' mk8s-ci@gitlab rsa1024 encr never
      # Ensure that the project is clean
    - python3 clean-up-os-project.py
    - poetry install --with ci --sync

  script:
    - export VAULT_ADDR=https://yaook-vault:8200
    - mkdir -p $CI_PROJECT_DIR/tls/ca
    - printf "%s" "$ci_cert_vaultca_crt" > $CI_PROJECT_DIR/tls/ca/vaultca.crt
    - export VAULT_CACERT="$CI_PROJECT_DIR/tls/ca/vaultca.crt"
    - vault operator init -key-shares=1 -key-threshold=1 -format=json > $CI_PROJECT_DIR/vault_init.out
    - jq .root_token -c $CI_PROJECT_DIR/vault_init.out -r | tee $CI_PROJECT_DIR/root.key
    - jq .unseal_keys_b64[0] -c $CI_PROJECT_DIR/vault_init.out -r | tee $CI_PROJECT_DIR/unseal.key
    - vault operator unseal $(cat $CI_PROJECT_DIR/unseal.key)
    - vault login $(cat $CI_PROJECT_DIR/root.key)
    - bash ./managed-k8s/tools/vault/init.sh
    - bash ./managed-k8s/tools/vault/mkcluster-root.sh k8s.ci.yaook.cloud
    - export VAULT_TOKEN=$(cat $CI_PROJECT_DIR/root.key)
      # Insert IPSec PSK
    - vault kv put yaook/k8s.ci.yaook.cloud/kv/ipsec-eap-psk ipsec_eap_psk="$IPSEC_EAP_PSK"
    - ./managed-k8s/actions/apply-terraform.sh
    - ./reachability-or-recreate.sh
    - ./managed-k8s/actions/apply-stage2.sh
    - ./managed-k8s/actions/apply-stage3.sh
    - ./managed-k8s/actions/apply-stage4.sh
    - ./managed-k8s/actions/apply-stage5.sh
    - MANAGED_K8S_RELEASE_THE_KRAKEN=true ./managed-k8s/actions/system_update_nodes.sh
    - ./managed-k8s/actions/test.sh
  after_script:
    - cd ci/
    - ./after_script_cleanup.sh
  artifacts:
    paths:
      - ci/podlogs/
    when: always
  tags:
    - docker
    - wireguard-ready

.test_upgrade_path_k8s_cluster:
  image: "registry.gitlab.com/yaook/images/k8s-ci/f1a:devel"
  services: !reference [.prepare_spawn_test_cleanup_k8s_cluster, services]
  before_script:
  - !reference [.prepare_spawn_test_cleanup_k8s_cluster, before_script]
  script:
    # Spawn and test cluster
  - 'python3 managed-k8s/tools/patch_config.py --patch-config "{\"kubernetes\":{\"version\":\"1.24.17\"}}"'
  - !reference [.prepare_spawn_test_cleanup_k8s_cluster, script]
    # Upgrade cluster to k8s v1.25
  - MANAGED_K8S_RELEASE_THE_KRAKEN=true ./managed-k8s/actions/upgrade.sh 1.25.16
    # Update k8s version
  - 'python3 managed-k8s/tools/patch_config.py --patch-config "{\"kubernetes\":{\"version\":\"1.25.16\"}}"'
  - AFLAGS="-t mk8s-ms/monitoring" ./managed-k8s/actions/apply-stage5.sh
    # Retest the cluster
    # Upgrade cluster to k8s v1.26
  - MANAGED_K8S_RELEASE_THE_KRAKEN=true ./managed-k8s/actions/upgrade.sh 1.26.12
    # Update k8s version
  - 'python3 managed-k8s/tools/patch_config.py --patch-config "{\"kubernetes\":{\"version\":\"1.26.12\"}}"'
  - ./managed-k8s/actions/test.sh
  after_script:
  - !reference [.prepare_spawn_test_cleanup_k8s_cluster, after_script]
  artifacts: !reference [.prepare_spawn_test_cleanup_k8s_cluster, artifacts]
  tags: !reference [.prepare_spawn_test_cleanup_k8s_cluster, tags]

# Spawn a cluster and test the k8s upgrade path (w/ calico)
containerd-k8s-upgrade:
  environment:
    name: spawn-cluster
  rules:
    # run on merge.merge_train only if files outside docs have changed
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      <<: *test-rules-changes
      needs: ["containerd"]
      when: on_success
    # run always on release-prepare
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_PREPARE_BRANCH_PREFIX'
      needs: ["containerd"]
      when: on_success
    # otherwise create manual job
    - when: manual
      allow_failure: true
  extends: .test_upgrade_path_k8s_cluster
  stage: cluster-tests
  retry: 2
  variables:
    # the variables defined in .test_upgrade_path_k8s_cluster get overwritten,
    # so we need to reference the default vars here (only one level of nesting is allowed)
    WG_COMPANY_USERS: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, WG_COMPANY_USERS]
    PASS_COMPANY_USERS: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, PASS_COMPANY_USERS]
    SSH_COMPANY_USERS: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, SSH_COMPANY_USERS]
    ANSIBLE_ANY_ERRORS_FATAL: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ANSIBLE_ANY_ERRORS_FATAL]
    ANSIBLE_FORCE_COLOR: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ANSIBLE_FORCE_COLOR]
    ci_vault_config_hcl: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ci_vault_config_hcl]
    ci_cert_vaultchain_crt: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ci_cert_vaultchain_crt]
    ci_cert_vault_key: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ci_cert_vault_key]
    ci_cert_vaultca_crt: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ci_cert_vaultca_crt]

# Spawn a cluster with calico as CNI, containerd as CRI and
# rook enabled (MR only)
containerd:
  environment:
    name: spawn-cluster
  rules:
    # create manual job on merge.detached and merge.merged_result
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "detached" || $CI_MERGE_REQUEST_EVENT_TYPE == "merged_result"'
      when: manual
      allow_failure: true
    # always run on release-prepare
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_PREPARE_BRANCH_PREFIX'
      when: on_success
    # otherwise run only if files outside docs have changed
    - if:
      <<: *test-rules-changes
      when: on_success
    # when there are no changes, create manual job
    - when: manual
      allow_failure: true
  extends: .prepare_spawn_test_cleanup_k8s_cluster
  stage: cluster-tests
  script:
  - !reference [.prepare_spawn_test_cleanup_k8s_cluster, script]
  retry: 2
  variables:
    # the variables defined in .test_upgrade_path_k8s_cluster get overwritten,
    # so we need to reference the default vars here (only one level of nesting is allowed)
    WG_COMPANY_USERS: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, WG_COMPANY_USERS]
    PASS_COMPANY_USERS: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, PASS_COMPANY_USERS]
    SSH_COMPANY_USERS: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, SSH_COMPANY_USERS]
    ANSIBLE_ANY_ERRORS_FATAL: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ANSIBLE_ANY_ERRORS_FATAL]
    ANSIBLE_FORCE_COLOR: !reference [.prepare_spawn_test_cleanup_k8s_cluster, variables, ANSIBLE_FORCE_COLOR]

pages:
  stage: release
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  before_script:
    - poetry install --with docs --sync
  script:
    - sphinx-build -W docs _build/html
    - mv _build/html public
  artifacts:
    paths:
      - public/
  rules:
    # run only on release-branches
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_BRANCH_PREFIX'
      when: on_success
    - when: never
  tags:
    - docker

tag-release:
  stage: release
  tags:
    - docker
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  ## if you change the project wide setting back to GIT_STRATEGY=fetch keep in mind this jobs needs
  ## to be run with GIT_STRATEGY=clone
  # variables:
  #   GIT_STRATEGY: clone
  script:
    - YAOOK_K8S_BUILD_VERSION=$(cat ./version)
    - |
      if echo "$CI_COMMIT_BRANCH" | grep -F "${YAOOK_K8S_RELEASE_PREPARE_BRANCH_PREFIX}"; then
        if echo "${YAOOK_K8S_BUILD_VERSION: -2}" | grep -qE '.0'; then
          # tag with -rc.<buildnr>
          echo "This is a major or minor release, I will tag that as a release candidate.";
          YAOOK_K8S_BUILD_VERSION="${YAOOK_K8S_BUILD_VERSION}-rc"
          git fetch --all --tags
          last_tag=$(git tag -l --sort=-version:refname "*${YAOOK_K8S_BUILD_VERSION}*" | head -n1)
          rc_value=${last_tag##*.}; rc_value=${rc_value:-"-1"}
          rc_value=$((rc_value + 1))
          YAOOK_K8S_BUILD_VERSION=$YAOOK_K8S_BUILD_VERSION.$rc_value
        fi
      fi
      echo "version: ${YAOOK_K8S_BUILD_VERSION}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git remote set-url origin https://gitlab-ci-token:${PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    # tag with v$Major.$Minor.$Patch (note the "v"!)
    # - git tag -a "v${YAOOK_K8S_BUILD_VERSION}" -m "Version v${YAOOK_K8S_BUILD_VERSION}"
    # - git push origin "v${YAOOK_K8S_BUILD_VERSION}"
  rules:
    # run only on release and YAOOK_K8S_RELEASE_PREPARE_BRANCH-branches
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_BRANCH_PREFIX || $CI_COMMIT_BRANCH =~ $REGEX_RELEASE_PREPARE_BRANCH_PREFIX'
      when: on_success
    - when: never

merge-to-release-branch:
  stage: release
  image: "registry.gitlab.com/yaook/images/k8s-ci/base:devel"
  ## if you change the project wide setting back to GIT_STRATEGY=fetch keep in mind this jobs needs
  ## to be run with GIT_STRATEGY=clone
  # variables:
  #   GIT_STRATEGY: clone
  before_script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git remote set-url origin https://gitlab-ci-token:"${PUSH_TOKEN}"@"${CI_SERVER_HOST}"/"${CI_PROJECT_PATH}".git
    - git checkout -b "${CI_COMMIT_BRANCH}"
  script:
    - YAOOK_K8S_BUILD_VERSION=$(cat ./version)
    - cat ./version
    - |
      BRANCH_NAME="${YAOOK_K8S_RELEASE_BRANCH_PREFIX}${YAOOK_K8S_BUILD_VERSION%.*}"
      if echo "${YAOOK_K8S_BUILD_VERSION: -2}" | grep -qE '.0'; then
        echo "This is a major or minor release, I will create a new release-branch ${BRANCH_NAME}."
        git checkout -b "${BRANCH_NAME}" origin/"${CI_COMMIT_BRANCH}"
        git push --set-upstream origin "${BRANCH_NAME}"
      else
        echo "This is a fix release, I will merge it in the last release-branch ${BRANCH_NAME}"
        git fetch origin ${BRANCH_NAME}
        git checkout "${BRANCH_NAME}"
        git merge origin/"${CI_COMMIT_BRANCH}"
        git push
      fi
    - git checkout "${CI_COMMIT_BRANCH}"
    - echo "new release ${YAOOK_K8S_BUILD_VERSION}" > docs/_releasenotes/+.misc.release-v"${YAOOK_K8S_BUILD_VERSION}"  # place a releasenote (for MR to devel)
    - git add docs/_releasenotes/+.misc.release-v"${YAOOK_K8S_BUILD_VERSION}"
    - git commit -m "Trigger MR to devel for "${CI_COMMIT_BRANCH}" of ${YAOOK_K8S_BUILD_VERSION}" --allow-empty
    - |
      git push -o ci.skip --set-upstream origin "${CI_COMMIT_BRANCH}" \
        -o merge_request.create -o merge_request.target="${YAOOK_K8S_DEFAULT_BRANCH}" -o merge_request.label="Release" \
        -o merge_request.title="Version bump for ${CI_COMMIT_BRANCH}" -o merge_request.remove_source_branch
  needs: ["tag-release"]
  rules:
    # run only on YAOOK_K8S_RELEASE_PREPARE_BRANCH-branches
    - if: '$CI_COMMIT_BRANCH =~ $REGEX_RELEASE_PREPARE_BRANCH_PREFIX'
      when: delayed
      # it's not possible to use a variable here (https://docs.gitlab.com/ee/ci/variables/where_variables_can_be_used.html)
      # but we can manually start the job earlier, if wanted
      start_in: 1 week
    - when: never
