- name: Initial sanity checks
  hosts: localhost
  gather_facts: false
  vars_files:
  - vars/etc.yaml
  roles:
    - validate_configuration

- name: Initial node bootstrap
  hosts: k8s_nodes
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  - vars/etc.yaml
  roles:
  - role: detect_user
    tags: detect_user
  - role: ssh-known-hosts
    tags: ssh-known-hosts
  - role: prepare-node
    tags: prepare-node
  - role: journald
    tags: journald
  - role: is-k8s-installed
    tags: update_system
  - role: configure-automatic-system-updates
    tags: configure-automatic-system-updates
  - role: monitoring-system-update-status
    tags: monitoring-system-update-status
  - role: disable-swap
    tags: disable-swap

- name: Disable SELinux
  hosts: k8s_nodes
  roles:
  - role: disable_selinux
    tags: disable_selinux
    when: ansible_os_family == 'RedHat'

- name: Harden SSH
  hosts: k8s_nodes
  become: yes
  collections:
  - devsec.hardening
  roles:
  - role: devsec.hardening.ssh_hardening
    tags: harden-ssh

- name: Upgrade the system
  hosts: k8s_nodes
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  tasks:
    - name: Upgrade the system
      when: install_status == 'k8s_not_installed'
      include_role:
        name: update_system
      tags:
        - update_system

- name: Detect login for gateways
  hosts: gateways
  gather_facts: false
  vars_files:
  - vars/etc.yaml
  roles:
  - detect_user

- name: Prepare Gateways
  hosts: frontend
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  roles:
  - role: k8s-api-frontend
    tags: k8s-api-frontend
  - role: global-monitoring-frontend
    tags: k8s-global-monitoring # ToDo: find better tag
    when: k8s_global_monitoring_enabled

- name: Rollout company users
  hosts: k8s_nodes
  gather_facts: true
  tasks:
    - name: Rollout company users
      when: cah_users_rollout
      include_role:
        name: ch-role-users
      tags:
        - ch-role-users

- name: Prepare the k8s nodes
  hosts: k8s_nodes
  gather_facts: true
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  roles:
  - role: networking
    tags: networking
  - role: ntp
    tags: ntp
  - role: gpu-support
    tags: gpu-support
  - role: vgpu-support
    tags: vgpu-support
  - role: docker
    tags: docker
    when: container_runtime == 'docker'
  - role: containerd
    tags: containerd
    when: container_runtime == 'containerd'
  - role: kubeadm
    tags: kubeadm
  - role: remove_snap
    tags: remove_snap
  - role: wireguard-support
    tags: wireguard
    when: wireguard_on_workers

# If DualStack is enabled, the k8s cluster needs to use calico as CNI plugin
# In Ansible, it is not possible to overwrite inventory variables, therefore we need to fail here
# and ask the user to adjust its configuration.
- name: Validate DualStack configurations
  hosts: localhost
  tasks:
  - name: Check if DualStack support is enabled, but CNI plugin is not set to calico
    fail:
      msg: |
        ### ERROR ###
        You have enabled DualStack support, but have not chosen calico as k8s network plugin.
        Please set 'k8s_network_plugin' to 'calico' in your config and rerun.
    when: dualstack_support and k8s_network_plugin != "calico"

- name: Clean up control plane
  hosts: masters
  gather_facts: true
  serial: 1
  roles:
    - role: etcd-clean-stale-members
      tags: etcd-clean-stale-members

- name: Spawn the K8s control plane
  hosts: masters
  gather_facts: true
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  - vars/etc.yaml
  # With serial we can specify the number of hosts on which the Playbook is
  # executed in parallel.
  # https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html
  # FIXME: Do we really want to copy our OpenStack user credentials like this?
  serial:
    - 1
    - "100%"
  roles:
    - role: k8s-master
      tags: k8s-master

- name: Install calico supporting services
  hosts: masters
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  - vars/etc.yaml
  roles:
    - role: calico-control-plane
      tags:
      - calico
      - calico-control-plane
      when: k8s_network_plugin == 'calico'
    - role: calico-worker
      tags:
      - calico
      - calico-control-plane
      - calico-worker
      when: k8s_network_plugin == 'calico'

- name: Spawn and configure the k8s worker nodes
  hosts: workers
  gather_facts: true
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  - vars/etc.yaml
  roles:
    - role: k8s-worker
      tags: k8s-worker
    - role: kubelet-configuration
      tags: kubelet-configuration
    - role: calico-worker
      tags:
      - calico
      - calico-worker
      when: k8s_network_plugin == 'calico'

- name: Spawn the OpenStack k8s Control Plane
  hosts: masters
  become: yes
  gather_facts: false
  vars_files:
  - vars/disruption.yaml
  - vars/auto_generated_preamble.yaml
  run_once: yes
  roles:
    - role: connect-k8s-to-openstack
      tags: connect-k8s-to-openstack
      when: on_openstack | default(False) | bool
    - role: ch-k8s-lbaas-controller
      tags:
      - ch-k8s-lbaas
      - ch-k8s-lbaas-controller

- name: Configure BGP and LBaaS on the gateways
  hosts: gateways
  become: yes
  gather_facts: true
  vars_files:
  - vars/auto_generated_preamble.yaml
  roles:
  - role: k8s-bgp
    tags:
    - k8s-bgp
  - role: ch-k8s-lbaas-agent
    tags:
    - ch-k8s-lbaas
    - ch-k8s-lbaas-agent

- name: Configure the local-storage controllers
  hosts: k8s_nodes
  vars_files:
  - vars/auto_generated_preamble.yaml
  roles:
    - role: k8s-local-storage-controller
      tags: lsc
      when: k8s_local_storage_static_enabled
    - role: k8s-local-path-provisioner
      tags: lpp
      when: k8s_local_storage_dynamic_enabled

# yahrens: This play resides only transitionally here.
# See https://gitlab.com/yaook/k8s/-/issues/349 for details
- name: Configure vm.max_map_count
  hosts: workers
  gather_facts: false
  tasks:
    - name: Configure vm.max_map_count
      import_role:
        name: vm-max-map-count
      when: "vm_max_map_count is defined"
      tags:
        - vm-max-map-count

- name: Restart kubelet after the initial installation as workaround
  hosts: k8s_nodes
  gather_facts: false
  serial: 1
  vars_files:
  - vars/disruption.yaml
  tasks:
    # This is required for the k8s node to come up after the installation
    # of calico â€“ but only when using containerd, go figure!  When
    # disruption is allowed we also restart on changes of the config, as
    # we can assume it is not properly reloaded (if initial loading does
    # not work).
    - name: Get the kubernetes node info
      become: yes
      environment:
        KUBECONFIG: /etc/kubernetes/kubelet.conf
      command:
      args:
        argv:
          - kubectl
          - get
          - node
          - -o
          - json
          - "{{ inventory_hostname }}"
      register: kubectl_get_node
      changed_when: false
      tags: containerd

    - name: Restart containerd
      become: yes
      systemd:
        enabled: yes
        name: containerd
        state: restarted
      tags: containerd
      when: container_runtime == 'containerd' and 'cni plugin not initialized' in kubectl_get_node.stdout

    - name: Restart kubelet
      become: yes
      systemd:
        enabled: yes
        name: kubelet
        state: restarted
      tags: containerd
      when: container_runtime == 'containerd' and 'cni plugin not initialized' in kubectl_get_node.stdout

    - name: Let things settle after the restart
      pause:
        seconds: 30
      tags: containerd
      when: container_runtime == 'containerd' and 'cni plugin not initialized' in kubectl_get_node.stdout
