---
- name: End play if Tigera operator is configured
  ansible.builtin.meta: end_play
  when:
    - image_versions.calico_use_tigera_operator | bool

- name: Get deployed calico version
  become: true
  environment:
    # required to obtain the cluster version and not just the client software version
    KUBECONFIG: /etc/kubernetes/admin.conf
  ansible.builtin.command:
    argv:
      - /usr/local/bin/calicoctl
      - version
  register: calicoctl_version
  ignore_errors: true
  changed_when: calicoctl_version.stderr | length == 0

- name: Compare deployed and configured version if calico is already present
  when: calicoctl_version is not failed
  block:
    - name: Fail if version differs but disruption is forbidden
      vars:
        calico_cluster_version: "{{ (calicoctl_version.stdout | from_yaml)['Cluster Version'] }}"
        calico_conf_version: "{{ 'v%s' | format(image_versions.calico_version) }}"
      ansible.builtin.fail:
        msg: |
          Another calico version than the one currently rolled out has been configured.
          This is probably because you upgraded Kubernetes in advance. This will cause
          the calico components to be updated which is disruptive. However, disruption
          is not allowed. Allow disruption if you know what you do and retry.
      when: calico_cluster_version is version(calico_conf_version, operator='ne') and not _allow_disruption

    # Downgrading calico is theoretically possibly, but we do not want to cover it
    - name: Fail if configured version is too old
      vars:
        calico_cluster_version: "{{ (calicoctl_version.stdout | from_yaml)['Cluster Version'] }}"
        calico_conf_version: "{{ 'v%s' | format(image_versions.calico_version) }}"
      ansible.builtin.fail:
        msg: |
          Your configured calico version is older than the currently deployed one.
          Please adjust your configuration to meet the deployed version, or a newer
          one if you want to update calico.
      when: calico_cluster_version is version(calico_conf_version, operator='gt')

- name: Setup Preliminaries
  run_once: true
  ansible.builtin.include_tasks: setup_preliminaries.yaml

- name: Setup IPPools
  run_once: true
  ansible.builtin.include_tasks: setup_ippools.yaml

- name: Apply calico-kube-controller
  become: true
  run_once: true
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  kubernetes.core.k8s:
    definition: "{{ lookup('template', item) }}"
    apply: true
    validate:
      fail_on_error: true
      strict: true
  with_items:
    - "{{ calico_versions_folder }}/calico-kube-controller.yaml.j2"
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: Setup Calico Typha
  run_once: true
  ansible.builtin.include_tasks: setup_typha.yaml

- name: Setup Calico/Node
  run_once: true
  ansible.builtin.include_tasks: setup_calico_node.yaml

- name: Setup BGP Routing Information Distribution via BIRD
  run_once: true
  ansible.builtin.include_tasks: setup_bgp.yaml
...
