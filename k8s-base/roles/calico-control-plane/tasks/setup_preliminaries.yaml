# If you plan to upgrade calico resources:
# curl https://docs.projectcalico.org/manifests/calico.yaml -O
# Make sure to only apply the CustomResourceDefinitions
---
- name: Create Custom Calico Resource Definitions
  become: true
  run_once: true
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  vars:
    crd_file: "{{ 'crds/calico-crds-v%s.yaml' | format(image_versions.calico_version) }}"
  kubernetes.core.k8s:
    definition: "{{ lookup('file', crd_file) }}"
    apply: true
    state: present
    validate:
      fail_on_error: true
      strict: true
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: Upload calico CA certificate to k8s
  run_once: true
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  block:
  - name: Upload calico CA certificate from vault
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    kubernetes.core.k8s:
      apply: true
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: calico-typha-ca
          namespace: kube-system
        data:
          typhaca.crt: "{{ lookup('community.hashi_vault.vault_read', '%s/%s/calico-pki/cert/ca_chain' | format(vault_path_prefix, vault_cluster_name), auth_method='approle', role_id=vault_node_role_id, secret_id=vault_node_secret_id, mount_point=vault_nodes_approle).data.ca_chain }}"
      validate:
        fail_on_error: true
        strict: true
    register: k8s_apply
    # Retry this task on failures
    until: k8s_apply is not failed
    retries: "{{ k8s_error_retries }}"
    delay: "{{ k8s_error_delay }}"

- name: Create user for calico-cni, configure RBAC and create RoleBinding
  become: true
  run_once: true
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  kubernetes.core.k8s:
    definition: "{{ lookup('file', item) }}"
    apply: true
    state: "present"
    validate:
      fail_on_error: true
      strict: true
  loop:
  - "{{ calico_versions_folder }}/calico-cni-user.yaml"
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"
...
