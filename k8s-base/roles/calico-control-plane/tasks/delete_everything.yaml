# Clean up installation when switching to operator-based installation.
# Drop me along with the manifest installation procedure
---
- name: Delete all the calico things (╯°□°）╯︵ ┻━┻
  become: true
  run_once: true
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  block:
    - name: Delete calico-kube-controller
      kubernetes.core.k8s:
        kind: Deployment
        name: calico-kube-controllers
        namespace: kube-system
        state: absent
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete calico/node DaemonSet
      kubernetes.core.k8s:
        kind: DaemonSet
        name: calico-node
        namespace: kube-system
        state: absent
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete calico/node secrets
      kubernetes.core.k8s:
        kind: Secret
        name: calico-node-certs
        namespace: kube-system
        state: absent
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete calico/node ServiceAccount, RBAC, ClusterRoleBinding
      block:
        - name: Delete calico/node ServiceAccount
          kubernetes.core.k8s:
            kind: ServiceAccount
            name: calico-node
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico/node ClusterRole
          kubernetes.core.k8s:
            kind: ClusterRole
            name: calico-node
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico/node ClusterRoleBinding
          kubernetes.core.k8s:
            kind: ClusterRoleBinding
            name: calico-node
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

    - name: Delete Typha CA ConfigMap
      kubernetes.core.k8s:
        kind: ConfigMap
        name: calico-typha-ca
        namespace: kube-system
        state: absent
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete Typha secrets
      kubernetes.core.k8s:
        state: absent
        kind: Secret
        name: calico-typha-certs
        namespace: kube-system
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete Typha ServiceAccount, RBAC, ClusterRole, ClusterRoleBinding
      block:
        - name: Delete Typha ServiceAccount
          kubernetes.core.k8s:
            kind: ServiceAccount
            name: calico-typha
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete Typha ClusterRole
          kubernetes.core.k8s:
            kind: ClusterRole
            name: calico-typha
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete Typha ClusterRoleBinding
          kubernetes.core.k8s:
            kind: ClusterRoleBinding
            name: calico-typha
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

    - name: Delete Typha Deployment
      kubernetes.core.k8s:
        kind: Deployment
        name: calico-typha
        namespace: kube-system
        state: absent
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete Typha Service
      kubernetes.core.k8s:
        kind: Service
        name: calico-typha
        namespace: kube-system
        state: absent
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete calico-cni user, RBAC, RoleBinding
      block:
        - name: Delete calico-cni ClusterRole
          kubernetes.core.k8s:
            kind: ClusterRole
            name: calico-cni
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico-cni ClusterRoleBinding
          kubernetes.core.k8s:
            kind: ClusterRoleBinding
            name: calico-cni
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

    - name: Delete calico CRDs
      vars:
        crd_file: "{{ 'crds/calico-crds-v%s.yaml' | format(item) }}"
      kubernetes.core.k8s:
        definition: "{{ lookup('file', crd_file) }}"
        state: absent
      loop: ["3.24.5"]
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"

    - name: Delete monitoring objects
      block:
        - name: Delete calico-typha-monitoring Service
          kubernetes.core.k8s:
            kind: Service
            name: calico-typha-monitoring
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico-typha ServiceMonitor
          when: k8s_monitoring_enabled
          kubernetes.core.k8s:
            kind: ServiceMonitor
            name: calico-typha
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico-node-monitoring Service
          kubernetes.core.k8s:
            kind: Service
            name: calico-node-monitoring
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico-node ServiceMonitor
          when: k8s_monitoring_enabled
          kubernetes.core.k8s:
            kind: ServiceMonitor
            name: calico-node
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico-kube-controllers Service
          kubernetes.core.k8s:
            kind: Service
            name: calico-kube-controllers-monitoring
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"

        - name: Delete calico-kube-controllers ServiceMonitor
          when: k8s_monitoring_enabled
          kubernetes.core.k8s:
            kind: ServiceMonitor
            name: calico-kube-controllers
            namespace: kube-system
            state: absent
          # Retry this task on failures
          register: k8s_apply
          until: k8s_apply is not failed
          retries: "{{ k8s_error_retries }}"
          delay: "{{ k8s_error_delay }}"


- name: Clean up nodes
  become: true
  block:
    - name: Drop calico-kubeconfig from k8s nodes
      ansible.builtin.file:
        state: absent
        path: /etc/cni/net.d/calico-kubeconfig

    - name: Drop calico binaries from k8s nodes
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - "/usr/local/bin/calicoctl"
        - "/opt/cni/bin/calico"
        - "/opt/cni/bin/calico-ipam"

    - name: Drop calico cni config from k8s nodes
      ansible.builtin.file:
        state: absent
        path: "/etc/cni/net.d/10-calico.conflist"

- name: Restart kubelet
  become: true
  ansible.builtin.systemd:
    name: kubelet
    state: restarted

- name: Clean up inventory
  delegate_to: localhost
  run_once: true
  block:
    - name: Delete calico files
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      with_items:
        - calico_cni_key_path
        - calico_cni_csr_path
        - calico_cni_crt_path
        - typhaca_crt_path
        - typhaca_csr_path
        - typhaca_key_path
        - typha_crt_path
        - typha_csr_path
        - typha_key_path
        - calico_node_crt_path
        - calico_node_csr_path
        - calico_node_key_path
...
