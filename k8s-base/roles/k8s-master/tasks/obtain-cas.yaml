---
- name: Obtain CAs
  # We do this step on each node, so we have to use node credentials
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  vars:
    kubeconfig_api_server_url: "https://{{ networking_fixed_ip }}:{{ hostvars[available_frontend]['k8s_apiserver_frontend_port'] }}"
  block:
  # This is based on the k8s best practices
  # https://kubernetes.io/docs/setup/best-practices/certificates/

  - name: Load service account key from Vault # noqa ignore-errors
    ignore_errors: true
    ansible.builtin.set_fact:
      service_account_key: "{{ lookup('community.hashi_vault.vault_kv2_get', 'k8s/service-account-key', engine_mount_point=('%s/%s/kv' | format(vault_path_prefix, vault_cluster_name)), mount_point=vault_nodes_approle, auth_method='approle', role_id=vault_node_role_id, secret_id=vault_node_secret_id).data.data.private_key | b64decode }}"

  - name: Generate private key if necessary
    when: service_account_key is not defined
    delegate_to: localhost
    community.crypto.openssl_privatekey:
      return_content: true
      type: "RSA"
      path: "{{ etc_dir }}/sa.key"
      mode: u=rw,go-rwx
    register: generated_service_account_key

  - name: Delete generated private key from disk
    delegate_to: localhost
    ansible.builtin.file:
      state: absent
      path: "{{ etc_dir }}/sa.key"

  - name: Store generated key in vault
    when: service_account_key is not defined
    delegate_to: localhost
    community.hashi_vault.vault_write:
      auth_method: approle
      mount_point: "{{ vault_nodes_approle }}"
      role_id: "{{ vault_node_role_id }}"
      secret_id: "{{ vault_node_secret_id }}"
      path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/kv/data/k8s/service-account-key"
      data:
        data:
          private_key: "{{ generated_service_account_key.privatekey | b64encode }}"

  - name: Use generated service account key
    when: service_account_key is not defined
    ansible.builtin.set_fact:
      service_account_key: "{{ generated_service_account_key.privatekey }}"

  - name: Derive service account public key
    community.crypto.openssl_privatekey_info:
      content: "{{ service_account_key }}"
    register: service_account_key_info

  - name: Write service account private key
    become: true
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/sa.key
      content: "{{ service_account_key }}"
      owner: root
      group: root
      mode: u=r

  - name: Write service account public key
    become: true
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/sa.pub
      content: "{{ service_account_key_info.public_key }}"
      owner: root
      group: root
      mode: ugo=r

  - name: Fetch CA certificates
    ansible.builtin.set_fact:
      k8s_ca_cert: "{{ lookup('template', 'ca.crt.j2', template_vars={'ca_pki_name': 'k8s-pki'}) }}"
      k8s_front_proxy_ca_cert: "{{ lookup('template', 'ca.crt.j2', template_vars={'ca_pki_name': 'k8s-front-proxy-pki'}) }}"

  - name: Check if k8s CA exists
    become: true
    stat:
      path: /etc/kubernetes/pki/ca.crt
    register: k8s_ca_stat_result

  - name: Get information on k8s ca certificate in vault
    when: k8s_ca_stat_result.stat.exists
    community.crypto.x509_certificate_info:
      content: "{{ k8s_ca_cert }}"
    register: k8s_ca_cert_info_vault

  - name: Get information on current k8s ca certificate
    become: true
    when: k8s_ca_stat_result.stat.exists
    community.crypto.x509_certificate_info:
      path: /etc/kubernetes/pki/ca.crt
    register: k8s_ca_cert_info_current

  - name: Check if k8s ca certificate has changed
    when: k8s_ca_stat_result.stat.exists
    set_fact:
      k8s_ca_key_changed: "{{ k8s_ca_cert_info_vault.public_key != k8s_ca_cert_info_current.public_key }}"

  - name: Fail if ca certificate has changed
    ansible.builtin.fail:
      msg: "CA certificate has changed. Perform CA rotation first"
    when: k8s_ca_stat_result.stat.exists and k8s_ca_key_changed and not (ca_rotation | default(false))

  - name: Write k8s CA file
    become: true
    when: not (ca_rotation | default(false))
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/ca.crt
      owner: root
      group: root
      mode: ugo=r
      content: "{{ k8s_ca_cert }}"

  - name: Write k8s front proxy CA file
    become: true
    ansible.builtin.copy:
      dest: /etc/kubernetes/pki/front-proxy-ca.crt
      owner: root
      group: root
      mode: ugo=r
      content: "{{ k8s_front_proxy_ca_cert }}"

  - name: Write etcd CA file
    become: true
    vars:
      ca_pki_name: etcd-pki
    ansible.builtin.template:
      src: ca.crt.j2
      dest: /etc/kubernetes/pki/etcd/ca.crt
      owner: root
      group: root
      mode: ugo=r
