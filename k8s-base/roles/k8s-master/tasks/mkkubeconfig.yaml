---
- name: Generate kubeconfig
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  block:
  - name: "{{ kubeconfig_title }}: Read kubeconfig"
    become: yes
    command:
    args:
      argv:
      - cat
      - "{{ kubeconfig_destination }}"
    failed_when: false
    register: kubeconfig_readback

  - name: "{{ kubeconfig_title }}: Interpret kubeconfig return code"
    set_fact:
      kubeconfig_exists: "{{ kubeconfig_readback.rc == 0 }}"

  - name: "{{ kubeconfig_title }}: Check expiry of embedded certificate"
    when: kubeconfig_exists and not (kubeconfig_external | default(False))
    delegate_to: localhost
    community.crypto.x509_certificate_info:
      content: "{{ (kubeconfig_readback.stdout | from_yaml).users[0].user['client-certificate-data'] | b64decode }}"
      valid_at:
        point_1: "-4w"
        point_2: "+16w"
    register: cert_info_embedded

  - name: "{{ kubeconfig_title }}: Check expiry of external certificate"
    become: yes
    when: kubeconfig_exists and (kubeconfig_external | default(False))
    community.crypto.x509_certificate_info:
      path: "{{ (kubeconfig_readback.stdout | from_yaml).users[0].user['client-certificate'] }}"
      valid_at:
        point_1: "-4w"
        point_2: "+16w"
    register: cert_info_external

  - name: "{{ kubeconfig_title }}: Select certificate information"
    set_fact:
      cert_info: "{{ kubeconfig_external | default(False) | ternary(cert_info_external, cert_info_embedded) }}"

  - name: "{{ kubeconfig_title }}: Dump cert information"
    debug:
      msg: |
        Kubernetes client certificate {% if kubeconfig_exists %}exists,
        {% if cert_info.valid_at.point_1 %} is older than 4w {% else %} is not older than 4w {% endif %}
        {% if cert_info.valid_at.point_2 %} and is valid 16w from now{% else %} and expires in less than 16w{% endif %}.
        {% else %}does not exist.{% endif %}

  - name: "{{ kubeconfig_title }}: Renew"
    when: |
      not kubeconfig_exists or
      cert_info.valid_at.point_1 or
      not cert_info.valid_at.point_2
    block:
    - name: "{{ kubeconfig_title }}: Fetch new keypair"
      delegate_to: localhost
      community.hashi_vault.vault_write:
        path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/k8s-pki/issue/{{ kubeconfig_issuer }}"
        data:
          common_name: "{{ kubeconfig_user }}"
          ttl: "{{ kubeconfig_ttl | default('8784h') }}"
        token_validate: false
        auth_method: approle
        role_id: "{{ vault_role_id }}"
        secret_id: "{{ vault_secret_id }}"
        mount_point: "{{ vault_nodes_approle }}"
      register: get_cert

    - name: "{{ kubeconfig_title }}: Write external keypair file"
      when: "kubeconfig_external | default(False)"
      become: yes
      copy:
        dest: "{{ kubeconfig_keypair_path }}"
        owner: "{{ kubeconfig_owner | default('root') }}"
        group: "{{ kubeconfig_group | default(kubeconfig_owner | default('root')) }}"
        mode: u=r,go-rwx
        content: "{{ get_cert.data.data.certificate }}{{ '\n' }}{{ get_cert.data.data.private_key }}{{ '\n' }}"

    - name: "{{ kubeconfig_title }}: Generate"
      become: yes
      copy:
        # we have to embed this template to make this task file includ'able
        # from elsewhere reliably.
        content: |
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority-data: {{ get_cert.data.data.issuing_ca | b64encode | to_json }}
              server: {{ kubeconfig_api_server_url | default("https://%s:6443" | format(local_ipv4_address)) | to_json }}
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              user: {{ kubeconfig_user | to_json }}
            name: {{ "%s@kubernetes" | format(kubeconfig_user) | to_json }}
          current-context: {{ "%s@kubernetes" | format(kubeconfig_user) | to_json }}
          kind: Config
          preferences: {}
          users:
          - name: {{ kubeconfig_user | to_json }}
            user:
          {% if kubeconfig_external | default(False) %}
              client-certificate: {{ kubeconfig_keypair_path | to_json }}
              client-key: {{ kubeconfig_keypair_path | to_json }}
          {% else %}
              client-certificate-data: {{ get_cert.data.data.certificate | b64encode | to_json }}
              client-key-data: {{ get_cert.data.data.private_key | b64encode | to_json }}
          {% endif %}
        dest: "{{ kubeconfig_destination }}"
        owner: "{{ kubeconfig_owner | default('root') }}"
        group: "{{ kubeconfig_group | default(kubeconfig_owner | default('root')) }}"
        mode: u=r,go-rwx
