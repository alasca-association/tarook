---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: kube-system-privileged
  namespace: kube-system
spec:
  fsGroup:
    rule: RunAsAny
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - '*'
  allowedCapabilities:
  - '*'
  hostPID: true
  hostIPC: true
  hostNetwork: true
  hostPorts:
  - min: 1
    max: 65536
---
# adapted from: https://github.com/helm/charts/blob/master/stable/coredns/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: kube-system-coredns
  namespace: kube-system
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  # Add back CAP_NET_BIND_SERVICE so that coredns can run on port 53
  allowedCapabilities:
  - NET_BIND_SERVICE
  - CAP_NET_BIND_SERVICE
    # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-system-privileged-psp-user
rules:
- apiGroups: ["policy"]
  verbs: ["use"]
  resources: ["podsecuritypolicies"]
  resourceNames:
  - kube-system-privileged
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-system-coredns-psp-user
rules:
- apiGroups: ["policy"]
  verbs: ["use"]
  resources: ["podsecuritypolicies"]
  resourceNames:
  - kube-system-coredns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-system-privileged-psp-users
subjects:
- kind: ServiceAccount
  # kube-proxy runs as Privileged
  name: kube-proxy
  namespace: kube-system
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: system:nodes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-system-privileged-psp-user
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kube-system-coredns-psp-users
  namespace: kube-system
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-system-coredns-psp-user
