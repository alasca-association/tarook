- name: Check if the node has kubernetes installed
  stat:
    path: "/etc/kubernetes"
  register: kubernetes_dir

- name: Gather facts
  setup:

- name: Control and create proxy configuration for Ubuntu machines
  become: yes
  when: (cluster_behind_proxy | default(false)) and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  block:
    - name: Ensure /etc/environment contains proxy configuration
      become: yes
      command: grep -Fq "no_proxy" /etc/environment
      register: proxy_conf
      check_mode: no
      ignore_errors: yes
      changed_when: no

    - name: Expand /etc/environment with proxy configuration
      when: proxy_conf.failed
      lineinfile:
        path: /etc/environment
        insertafter: EOF
        line: "{{ item }}"
      loop:
        - HTTP_PROXY={{ http_proxy }}
        - http_proxy={{ http_proxy }}
        - HTTPS_PROXY={{ https_proxy }}
        - https_proxy={{ https_proxy }}
        - NO_PROXY={{ no_proxy }}
        - no_proxy={{ no_proxy }}

- name: Control and create proxy configuration for RHEL machines
  become: yes
  when: (cluster_behind_proxy | default(false)) and ansible_distribution == 'Red Hat Enterprise Linux'
  block:

    - name: Ensure /etc/profile.d/proxy.sh contains proxy configuration
      become: yes
      command: grep -Fq "no_proxy" /etc/profile.d/proxy.sh
      register: proxy_conf
      check_mode: no
      ignore_errors: yes
      changed_when: no

    - name: Expand /etc/profile.d/proxy.sh with proxy configuration
      when: proxy_conf.failed
      lineinfile:
        path: /etc/profile.d/proxy.sh
        insertafter: EOF
        line: "{{ item }}"
      loop:
        - export HTTP_PROXY={{ http_proxy }}
        - export http_proxy={{ http_proxy }}
        - export HTTPS_PROXY={{ https_proxy }}
        - export https_proxy={{ https_proxy }}
        - export NO_PROXY={{ no_proxy }}
        - export no_proxy={{ no_proxy }}

# https://ansible-tips-and-tricks.readthedocs.io/en/latest/os-dependent-tasks/installing_packages/#installing-system-updates
- name: Upgrade the whole system (dnf) # noqa 403
  become: yes
  dnf:
    name: '*'
    state: latest
  # see the apt task for details
  async: 1800
  poll: 5
  when:
  - ansible_pkg_mgr == 'dnf'
  # gateways are internet-facing and highly-available
  - "_allow_disruption or not kubernetes_dir.stat.exists"
  register: upgrade_dnf

- name: Upgrade the whole system (yum) # noqa 403
  yum:
    name: '*'
    state: latest
    update_cache: yes
  # see the apt task for details
  async: 1800
  poll: 5
  when:
  - ansible_pkg_mgr == 'yum'
  # gateways are internet-facing and highly-available
  - "_allow_disruption or not kubernetes_dir.stat.exists"
  register: upgrade_yum

# This is required to be able to do initial updates on a Debian N image just
# after Debian N+1 has been released. Otherwise, the next apt: call would fail
# because the release info has changed from stable -> oldstable:
#
#     E: Repository 'http://deb.debian.org/debian buster InRelease' changed
#     its 'Suite' value from 'stable' to 'oldstable'
#     E: Repository 'http://deb.debian.org/debian buster-updates InRelease'
#     changed its 'Suite' value from 'stable-updates' to 'oldstable-updates'
#
- name: Update apt cache
  when: ansible_pkg_mgr == 'apt'
  become: yes
  command:
  args:
    argv:
    - apt-get
    - update
    - --allow-releaseinfo-change
    warn: false

- name: Upgrade the whole system (apt) # noqa 403
  become: yes
  apt:
    upgrade: dist
    autoremove: yes
  # We’ve been seeing timeouts during this operation. By nudging ssh using
  # SIGWINCH, ansible is allowed to continue.
  #
  # I suspect that there is some timeout involved which kills off the SSH
  # connection and SIGWINCH lets it revive or something. Either way, the
  # internet™ suggests to give async a shot, so we do that:
  #
  # See-Also:
  # - The comment which suggested using async:
  #   https://github.com/ansible/ansible/issues/62807#issuecomment-537741591
  # - More docs on async operations:
  #   https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html
  async: 1800
  poll: 5
  register: upgrade_apt
  when:
  - ansible_pkg_mgr == 'apt'
  # gateways are internet-facing and highly-available
  - "_allow_disruption or not kubernetes_dir.stat.exists"

- name: Reboot block
  become: yes
  when: upgrade_dnf is changed or upgrade_yum is changed or upgrade_apt is changed
  block: 

    - name: Reboot the system (cloud-init run)
      command:
        argv:
        - reboot
        - now
      when: ansible_connection == 'local'

    # We do not need a "when" here. ansible is killed approximately immediately
    # anyway by the above command if it is executed; If the above command is
    # not executed, we want to execute this one.
    - name: Reboot the system
      reboot:
