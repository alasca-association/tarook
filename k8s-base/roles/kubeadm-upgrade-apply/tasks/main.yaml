- name: kubeadm upgrade plan & apply
  become: yes
  when: do_upgrade
  block:
    - name: Run kubeadm upgrade plan # noqa no-changed-when
      command:
        argv:
          - "kubeadm"
          - "upgrade"
          - "plan"

    # Do not renew certificates here because we rolled out our own chain
    # --yes auto-confirms and makes upgrade non-interactive
    - name: Execute the upgrade
      command:
        argv:
          - "kubeadm"
          - "upgrade"
          - "apply"
          - "--certificate-renewal=false"
          - "--yes"
          - "v{{ next_k8s_version }}"
      # Let’s also play this safe here -- the `upgrade apply` command can take a
      # while and we want to be sure that we don’t run into any connection timeouts.
      # Note that this imposes a run-time limit on the apply command (half an hour)
      # which I suppose is OK.
      async: 1800
      poll: 5

    # Workaround because kubeadm recreates kube-proxy and it is
    # currently not possible to avoid that
    - name: Remove kube-proxy
      vars:
        _allow_disruption: true
      when: k8s_network_plugin == 'kube-router'
      include_role:
        name: k8s-master
        tasks_from: remove_kube-proxy

    - name: Remove featureGates for kube-proxy >= v1.23
      become: yes
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when:
        - next_k8s_version is defined and next_k8s_version is version('1.23', '>=')
      block:
      - name: Patch kube-proxy to remove featureGates
        k8s_info:
          kind: ConfigMap
          namespace: kube-system
          name: kube-proxy
        register: kube_proxy_configmap_old

      - name: Patch the kube-proxy ConfigMap
        vars:
          kube_proxy_config_patched: "{{ kube_proxy_configmap_old['resources'][0]['data']['config.conf'] | replace('IPv6DualStack: false', '') }}"
        k8s:
          definition:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: kube-proxy
              namespace: kube-system
            data:
              config.conf: |
                {{ kube_proxy_config_patched }}
        register: kube_proxy_configmap

      - name: Trigger rollout restart kube-proxy
        when: kube_proxy_configmap.changed
        command:
          argv:
            - kubectl
            - rollout
            - restart
            - ds
            - kube-proxy
            - -n
            - kube-system

