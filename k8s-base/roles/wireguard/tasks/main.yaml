- name: Ensure private key consistency
  become: yes
  any_errors_fatal: true
  block:
    - name: Check for existence of private key in old location (LEGACY)
      stat:
        path: /etc/wireguard/wg_gw.key
      register: wg_gw
    - name: Fail if the key exists (LEGACY)
      fail:
        msg: |
          This task fails because we changed the handling of the wireguard key of the gateway.
          The key is now stored locally in the inventory and not on the gateways.
          To avoid voodoo synchronization, manual intervention is required.
          1.) Copy the private wireguard key file of the gateway (/etc/wireguard/wg_gw.key) to your local inventory {{ etc_dir }}/wg_gw_priv.key.
          2.) Remove the key file (/etc/wireguard/wg_gw.key) from all gateways.
          3.) Re-run the playbook
          This task is only relevant for existing clusters.
      when: "wg_gw.stat.exists"

- name: Check existence of wg0.conf
  become: yes
  stat:
    path: /etc/wireguard/wg0.conf
  register: wg0_conf

- name: Lookup private wireguard key of the gateway
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  become: no
  delegate_to: localhost
  run_once: yes
  block:
    - name: Lookup key in vault # noqa ignore-errors
      ignore_errors: yes
      # Check if the key exists
      set_fact:
        wg_gw_key: "{{ lookup('community.hashi_vault.vault_kv2_get', 'wireguard-key', engine_mount_point=('%s/%s/kv' | format(vault_path_prefix, vault_cluster_name)), mount_point=vault_caller_auth_mount_point, auth_method=vault_caller_auth_method, token=vault_caller_token, role_id=vault_caller_role_id, secret_id=vault_caller_secret_id).data.data.private_key }}"

    - name: Create new wireguard private key of the gateway
      command: wg genkey
      register: wg_genkey
      when: "not wg0_conf.stat.exists and (wg_gw_key is not defined)"

    - name: Ensure that the output of `wg genkey` contains no whitespace
      fail:
        msg: |
          The output of `wg genkey` contains whitespace for an unknown reason. The passwordstore lookup plugin cannot cope with that so
          please check what went wrong.
      when: "wg_genkey.changed and (wg_genkey.stdout | regex_search('\\s'))"

    - name: Store generated key in vault
      when: "not wg0_conf.stat.exists and (wg_gw_key is not defined)"
      community.hashi_vault.vault_write:
        path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/kv/data/wireguard-key"
        mount_point: "{{ vault_caller_auth_mount_point }}"
        auth_method: "{{ vault_caller_auth_method }}"
        token: "{{ vault_caller_token }}"
        role_id: "{{ vault_caller_role_id }}"
        secret_id: "{{ vault_caller_secret_id }}"
        token_validate: false
        data:
          data:
            private_key: "{{ wg_genkey.stdout }}"

- name: Load shared keypair
  become: no
  delegate_to: localhost
  run_once: yes
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  block:
    - name: Load private key
      set_fact:
        wg_gw_priv_key: "{{ lookup('community.hashi_vault.vault_kv2_get', 'wireguard-key', engine_mount_point=('%s/%s/kv' | format(vault_path_prefix, vault_cluster_name)), mount_point=vault_caller_auth_mount_point, auth_method=vault_caller_auth_method, token=vault_caller_token, role_id=vault_caller_role_id, secret_id=vault_caller_secret_id).data.data.private_key }}"
    - name: Derive public key
      command: "wg pubkey"
      args:
        stdin: "{{ wg_gw_priv_key }}"
      register: wg_pubkey
      changed_when: false
    - name: Write public key to disk
      copy:
        content: "{{ wg_pubkey.stdout }}"
        dest: "{{ wg_local_pub_path }}"
        mode: 0644

- name: Create /etc/wireguard/wg0.conf on gateway side
  become: yes
  template:
    src: wg0_server.conf.j2
    dest: /etc/wireguard/wg0.conf
    mode: '0640'
  register: wg0_conf

- name: Make sure wireguard directory exists in etc directory
  delegate_to: localhost
  become: no
  file:
    path: "{{ etc_dir }}/wireguard"
    state: directory
    mode: 0755

- name: Create a wg0.conf template for each peer
  become: no
  delegate_to: localhost
  run_once: yes
  template:
    src: wg0_client.conf.j2
    dest: "{{ wg_client_path }}"
    mode: '0640'
  vars:
    wg_client_path: "{{ etc_dir }}/wireguard/wg_{{ item['ident'] }}.conf"
    vip_port: vip-port
  loop: "{{ wg_peers }}"

- name: Notify user about auto-generated wg.conf
  delegate_to: localhost
  become: no
  run_once: yes
  debug:
    msg: |
      The wg-* configurations were written to {{ etc_dir }}/wireguard.
      You need to insert your private wireguard key and bring the wireguard
      interface up before continuing.

- name: Remove old service
  become: yes
  file:
    path: /etc/systemd/system/wireguard.service
    state: absent
  register: old_wg_service

- name: Stop and disable old wireguard service # noqa no-handler
  become: yes
  service:
    name: wireguard.service
    state: stopped
    enabled: no
  when: old_wg_service is changed

- name: Reload systemd to drop old wireguard service # noqa no-handler
  become: yes
  systemd:
    daemon_reload: yes
  when: old_wg_service is changed

- name: Stop wg0 after removal of legacy service so that the new service can take over # noqa no-handler
  become: yes
  command:
  args:
    argv: ['wg-quick', 'down', 'wg0']
  when: old_wg_service is changed

- name: Start and enable wireguard endpoint
  become: yes
  block:
    - name: Start and enable wireguard endpoint
      service:
        name: wg-quick@wg0
        enabled: yes
        state: "{{ 'restarted' if wg0_conf is changed else 'started' }}"
  rescue:
    - name: Collect logs of the wg-quick service
      shell: journalctl -u wg-quick@wg0; systemctl status wg-quick@wg0
      register: wg_logs
      ignore_errors: yes
    - name: Print logs
      debug:
        var: wg_logs.stdout_lines
    - name: Re-raise error
      fail:
        msg: "{{ ansible_failed_result }}"

- name: Deploy bird configuration for wireguard routes
  become: yes
  block:
  - name: Ensure that drop-in directory for bird configs exist
    file:
      path: /etc/bird.d/
      state: directory
      owner: root
      group: bird
      mode: 0750

  - name: Ensure that drop-in directory for bird configs exist (IPv6)
    file:
      path: /etc/birdv6.d/
      state: directory
      owner: root
      group: bird
      mode: 0750
    when: dualstack_support

  - name: Create bird config for IPv4 wireguard routes
    template:
      src: wg_bird.conf.j2
      dest: /etc/bird.d/00-wireguard.conf
      owner: bird
      group: bird
      mode: 0640
    notify: restart bird

  - name: Create bird config for IPv6 wireguard routes
    template:
      src: wg_bird_v6.conf.j2
      dest: /etc/birdv6.d/00-wireguard.conf
      owner: bird
      group: bird
      mode: 06400
    when: dualstack_support
    notify: restart bird6
