---
- name: Read our token roles
  delegate_to: localhost
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
    ANSIBLE_HASHI_VAULT_TOKEN: "{{ lookup('env', 'VAULT_TOKEN') }}"
    ANSIBLE_HASHI_VAULT_ROLE_ID: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
    ANSIBLE_HASHI_VAULT_SECRET_ID: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
    ANSIBLE_HASHI_VAULT_AUTH_METHOD: "{{ lookup('env', 'VAULT_TOKEN') | ternary('approle', 'token') }}"
  community.hashi_vault.vault_read:
    path: auth/token/lookup-self
    token_validate: false
  register: token_info

- name: Test approle
  set_fact:
    has_vault_orchestrator_role: "{{ (vault_policy_prefix + '/orchestrator') in token_info.data.data.policies or 'root' in token_info.data.data.policies }}"

- name: Report orchestrator role
  debug:
    msg: "I do {{ has_vault_orchestrator_role | ternary('', 'NOT ') }}have the orchestrator role!"

- name: Set vault node name
  set_fact:
    vault_node_name: "{{ inventory_hostname }}.node.{{ vault_cluster_name }}"

- name: Prepare login data directory
  become: yes
  file:
    state: directory
    path: /etc/vault
    owner: root
    group: root
    mode: u=rwx,go-rwx

- name: Write cluster name
  become: yes
  copy:
    dest: /etc/vault/cluster-name
    owner: root
    group: root
    mode: ugo=r
    content: "{{ vault_cluster_name }}"

- name: Write node name
  become: yes
  copy:
    dest: /etc/vault/node-name
    owner: root
    group: root
    mode: ugo=r
    content: "{{ vault_node_name }}"

- name: Onboard node to vault
  when: has_vault_orchestrator_role
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
    ANSIBLE_HASHI_VAULT_TOKEN: "{{ lookup('env', 'VAULT_TOKEN') }}"
    ANSIBLE_HASHI_VAULT_ROLE_ID: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
    ANSIBLE_HASHI_VAULT_SECRET_ID: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
    ANSIBLE_HASHI_VAULT_AUTH_METHOD: "{{ lookup('env', 'VAULT_TOKEN') | ternary('approle', 'token') }}"
  block:
  - name: Configure policies
    block:
    - name: Add base policy
      set_fact:
        vault_node_policies: "{{ vault_policy_prefix }}/node"

    - name: Add gateway policy
      set_fact:
        vault_node_policies: "{{ vault_policy_prefix }}/gateway,{{ vault_node_policies }}"
      when: "'frontend' in group_names"

    - name: Add k8s node policy
      set_fact:
        vault_node_policies: "{{ vault_policy_prefix }}/k8s-node,{{ vault_node_policies }}"
      when: "'k8s_nodes' in group_names"

    - name: Add k8s control-plane policy
      set_fact:
        vault_node_policies: "{{ vault_policy_prefix }}/k8s-control-plane,{{ vault_node_policies }}"
      when: "'masters' in group_names"

    - name: Discovered policies
      debug:
        msg: "{{ vault_node_policies }}"

  - name: Configure approle
    delegate_to: localhost
    community.hashi_vault.vault_write:
      path: "auth/{{ vault_nodes_approle }}/role/{{ vault_node_name }}"
      token_validate: false
      data:
        token_ttl: 10m
        token_max_ttl: 1h
        token_policies: "{{ vault_node_policies }}"
        token_no_default_policy: "false"
        token_type: service

  - name: Configure SSH CA role
    delegate_to: localhost
    community.hashi_vault.vault_write:
      path: "{{ vault_path_prefix }}/{{ vault_cluster_name }}/ssh-ca/roles/{{ vault_node_name }}"
      token_validate: false
      data:
        key_type: ca
        allow_host_certificates: "true"
        allow_bare_domains: "true"
        allowed_domains: "{{ vault_node_name }},{{ inventory_hostname }}"
        ttl: "720h"
        algorithm_signer: "rsa-sha2-512"

  - name: Discover role ID
    delegate_to: localhost
    community.hashi_vault.vault_read:
      path: "auth/{{ vault_nodes_approle }}/role/{{ vault_node_name }}/role-id"
      token_validate: false
    register: approle_role_id

  - name: Regenerate secret ID
    delegate_to: localhost
    community.hashi_vault.vault_write:
      path: "auth/{{ vault_nodes_approle }}/role/{{ vault_node_name }}/secret-id"
      token_validate: false
      data:
        metadata: '{"yaook_deployment": {{ vault_cluster_name | to_json }}, "yaook_hostname": {{ inventory_hostname | to_json }}, "yaook_primary_ipv4": {{ local_ipv4_address | default("127.0.0.1") | to_json }}, "yaook_primary_ipv6": {{ local_ipv6_address | default("::1") | to_json }}}'
    register: approle_secret_id

  - name: Set vault credentials as facts
    set_fact:
      vault_role_id: "{{ approle_role_id.data.data.role_id }}"
      vault_secret_id: "{{ approle_secret_id.data.data.secret_id }}"

  - name: Read token information from approle
    delegate_to: localhost
    environment:
      ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
      ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
      ANSIBLE_HASHI_VAULT_TOKEN: "{{ lookup('env', 'VAULT_TOKEN') }}"
    community.hashi_vault.vault_read:
      path: auth/token/lookup-self
      token_validate: false
      auth_method: approle
      token: "invalid"
      role_id: "{{ vault_role_id }}"
      secret_id: "{{ vault_secret_id }}"
      mount_point: "{{ vault_nodes_approle }}"
    register: token_info

  - name: Check token information
    debug:
      msg: "{{ token_info }}"
    failed_when: "token_info.data.data.policies | difference(vault_node_policies.split(',')) != ['default']"

  - name: Write vault role-id
    become: yes
    copy:
      dest: /etc/vault/role-id
      owner: root
      group: root
      mode: ugo=r
      content: "{{ approle_role_id.data.data.role_id }}"

  - name: Write vault secret-id
    become: yes
    copy:
      dest: /etc/vault/secret-id
      owner: root
      group: root
      mode: u=r
      content: "{{ approle_secret_id.data.data.secret_id }}"

- name: Write role-id from env if not written
  become: yes
  when: "not has_vault_orchestrator_role and lookup('env', 'VAULT_ROLE_ID')"
  copy:
    dest: /etc/vault/role-id
    owner: root
    group: root
    mode: ugo=r
    content: "{{ lookup('env', 'VAULT_ROLE_ID') }}"

- name: Write secret-id from env if not written
  become: yes
  when: "not has_vault_orchestrator_role and lookup('env', 'VAULT_SECRET_ID')"
  copy:
    dest: /etc/vault/secret-id
    owner: root
    group: root
    mode: ugo=r
    content: "{{ lookup('env', 'VAULT_SECRET_ID') }}"

- name: Read role id
  become: yes
  command:
  args:
    argv:
    - cat
    - /etc/vault/role-id
  register: cat_role_id
  changed_when: false

- name: Read secret id
  become: yes
  command:
  args:
    argv:
    - cat
    - /etc/vault/secret-id
  register: cat_secret_id
  changed_when: false

- name: Read token information from on-node approle info
  delegate_to: localhost
  environment:
    ANSIBLE_HASHI_VAULT_URL: "{{ lookup('env', 'VAULT_ADDR') }}"
    ANSIBLE_HASHI_VAULT_CA_CERT: "{{ lookup('env', 'VAULT_CACERT') }}"
  community.hashi_vault.vault_read:
    path: auth/token/lookup-self
    token_validate: false
    auth_method: approle
    role_id: "{{ cat_role_id.stdout }}"
    secret_id: "{{ cat_secret_id.stdout }}"
    mount_point: "{{ vault_nodes_approle }}"
  register: token_info
  failed_when: false

- name: Fail if no vault credentials are available for this node
  fail:
    msg: |
      The Vault token with which ansible runs does not have the orchestrator
      role (otherwise, we would've just generated valid credentials) and there
      are no valid approle credentials predeployed on the node.

      Token info: {{ token_info }}
  when: token_info is failed or not (token_info.data.data.policies | default([]))
