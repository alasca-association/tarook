---
- name: Ensure /etc/containerd directory is present
  become: true
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Add docker repository
  become: true
  block:
  - name: Ensure keyrings directory exists
    # ftr: this is present by default on Debian...
    ansible.builtin.file:
      state: directory
      path: /etc/apt/keyrings
      owner: root
      group: root
      mode: u=rwx,go=rx

  - name: Add GPG apt key
    ansible.builtin.copy:
      src: apt-key-{{ ansible_distribution | lower }}.gpg
      dest: /etc/apt/keyrings/docker.gpg
      owner: root
      group: root
      mode: u=rw,go=r

  - name: Add docker repository
    ansible.builtin.apt_repository:
      repo: "deb [signed-by=/etc/apt/keyrings/docker.gpg] {% if apt_proxy_url is defined %}http{% else %}https{% endif %}://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
      state: present
    register: apt_action
    until: apt_action is not failed
    retries: "{{ network_error_retries }}"
    delay: "{{ network_error_delay }}"

  - name: Update apt package cache
    ansible.builtin.apt:
      update_cache: true
    register: apt_action
    until: apt_action is not failed
    retries: "{{ network_error_retries }}"
    delay: "{{ network_error_delay }}"

- name: Install containerd
  become: true
  block:
  - name: Ensure 'containerd' package is absent
    ansible.builtin.apt:
      state: absent
      name:
      - containerd
    register: containerd_remove
    until: containerd_remove is not failed
    retries: "{{ network_error_retries }}"
    delay: "{{ network_error_delay }}"

  - name: Install 'containerd.io' package from docker repository
    ansible.builtin.apt:
      state: present
      name:
      - containerd.io
    register: package_install
    until: package_install is not failed
    retries: "{{ network_error_retries }}"
    delay: "{{ network_error_delay }}"

- name: Create containerd daemon configuration
  become: true
  ansible.builtin.template:
    src: config.toml.j2
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: 0640
  register: configuration_update

- name: Configure crictl
  become: true
  ansible.builtin.template:
    src: crictl.yaml.j2
    dest: /etc/crictl.yaml
    owner: root
    group: root
    mode: 0400

- name: Create containerd proxy configuration
  become: true
  when: (cluster_behind_proxy | default(false))
  block:
  - name: Ensure directory containerd service directory is present
    become: true
    ansible.builtin.file:
      path: /etc/systemd/system/containerd.service.d
      state: directory
      mode: 0755
      owner: root
      group: root

  - name: Create containerd service extension
    become: true
    ansible.builtin.template:
      src: http-proxy.conf.j2
      dest: /etc/systemd/system/containerd.service.d/http-proxy.conf
      owner: root
      group: root
      mode: 0640
    register: service_drop_in

- name: Restart containerd
  become: true
  # Only restart if something changed AND we're allowed to do the restart
  when:
  - package_install.changed or containerd_remove.changed or configuration_update.changed or ((cluster_behind_proxy | default(False)) and service_drop_in.changed)
  - _allow_disruption or install_status == 'k8s_not_installed'  # noqa no-handler
  ansible.builtin.systemd:
    enabled: true
    state: restarted
    daemon_reload: true
    name: containerd
...
