---
- name: Create Cuda-Test namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    state: present
    name: "{{ nvidia_device_plugin_test_namespace }}"
    validate:
      fail_on_error: true
      strict: true
  # Retry this task on failures
  register: k8s_apply
  until: k8s_apply is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: Get GPU nodes
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    label_selectors:
      - k8s.yaook.cloud/gpu-node=true
  # Retry this task on failures
  register: gpu_nodes
  until: gpu_nodes is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: Check if GPU nodes have GPU capacity
  fail:
    msg: "{{ item.metadata.name }} has no GPUs in its capacities"
  loop: "{{ gpu_nodes.resources }}"
  when: item['status']['capacity']['nvidia.com/gpu'] | default(0) | int == 0

# This will spawn the test Pods on GPU nodes in serial
# We're waiting for the Pod to get completed
- name: Create Cuda-Test Pod if a GPU is allocatable
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'test_pod.yaml.j2') | from_yaml }}"
    state: present
    namespace: "{{ nvidia_device_plugin_test_namespace }}"
    validate:
      fail_on_error: true
      strict: true
    wait: true
    wait_sleep: 5
    wait_timeout: 600
    wait_condition:
      type: "Initialized"
      status: "True"
      reason: "PodCompleted"
  loop: "{{ gpu_nodes.resources }}"
  when: item['status']['allocatable']['nvidia.com/gpu'] | int > 0
  # Retry this task on failures
  register: k8s_apply_cuda_pod
  until: k8s_apply_cuda_pod is not failed
  retries: "{{ k8s_error_retries }}"
  delay: "{{ k8s_error_delay }}"

- name: Clean-up
  tags:
    - test-cleanup
  block:
    - name: Delete the namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        state: absent
        name: "{{ nvidia_device_plugin_test_namespace }}"
        wait: true
        validate:
          fail_on_error: true
          strict: true
      # Retry this task on failures
      register: k8s_apply
      until: k8s_apply is not failed
      retries: "{{ k8s_error_retries }}"
      delay: "{{ k8s_error_delay }}"
...
